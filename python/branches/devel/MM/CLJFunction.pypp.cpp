// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cljfunction.h"

#include "cljfunction.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJFunction_class(){

    { //::SireMM::CLJFunction
        typedef bp::class_< SireMM::CLJFunction, bp::bases< SireBase::Property >, boost::noncopyable > CLJFunction_exposer_t;
        CLJFunction_exposer_t CLJFunction_exposer = CLJFunction_exposer_t( "CLJFunction", bp::no_init );
        bp::scope CLJFunction_scope( CLJFunction_exposer );
        { //::SireMM::CLJFunction::operator()
        
            typedef void ( ::SireMM::CLJFunction::*__call___function_type )( ::SireMM::CLJAtoms const &,double &,double & ) const;
            __call___function_type __call___function_value( &::SireMM::CLJFunction::operator() );
            
            CLJFunction_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("atoms"), bp::arg("cnrg"), bp::arg("ljnrg") ) );
        
        }
        { //::SireMM::CLJFunction::operator()
        
            typedef void ( ::SireMM::CLJFunction::*__call___function_type )( ::SireMM::CLJAtoms const &,::SireMM::CLJAtoms const &,double &,double & ) const;
            __call___function_type __call___function_value( &::SireMM::CLJFunction::operator() );
            
            CLJFunction_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("atoms0"), bp::arg("atoms1"), bp::arg("cnrg"), bp::arg("ljnrg") ) );
        
        }
        CLJFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJFunction > );
        CLJFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJFunction > );
    }

}

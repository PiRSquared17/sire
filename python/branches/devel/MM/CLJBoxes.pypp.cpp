// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJBoxes.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMM/cljboxes.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/aabox.h"

#include "cljboxes.h"

#include <QDebug>

#include <QElapsedTimer>

#include "cljboxes.h"

SireMM::CLJBoxes __copy__(const SireMM::CLJBoxes &other){ return SireMM::CLJBoxes(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJBoxes_class(){

    { //::SireMM::CLJBoxes
        typedef bp::class_< SireMM::CLJBoxes > CLJBoxes_exposer_t;
        CLJBoxes_exposer_t CLJBoxes_exposer = CLJBoxes_exposer_t( "CLJBoxes", bp::init< >() );
        bp::scope CLJBoxes_scope( CLJBoxes_exposer );
        CLJBoxes_exposer.def( bp::init< SireMM::CLJAtoms const & >(( bp::arg("atoms") )) );
        CLJBoxes_exposer.def( bp::init< SireMM::CLJAtoms const &, SireUnits::Dimension::Length >(( bp::arg("atoms"), bp::arg("box_size") )) );
        CLJBoxes_exposer.def( bp::init< SireMM::CLJBoxes const & >(( bp::arg("other") )) );
        { //::SireMM::CLJBoxes::atoms
        
            typedef ::SireMM::CLJAtoms ( ::SireMM::CLJBoxes::*atoms_function_type )(  ) const;
            atoms_function_type atoms_function_value( &::SireMM::CLJBoxes::atoms );
            
            CLJBoxes_exposer.def( 
                "atoms"
                , atoms_function_value );
        
        }
        { //::SireMM::CLJBoxes::boxAt
        
            typedef ::SireMM::CLJBox ( ::SireMM::CLJBoxes::*boxAt_function_type )( ::SireMM::CLJBoxIndex const & ) const;
            boxAt_function_type boxAt_function_value( &::SireMM::CLJBoxes::boxAt );
            
            CLJBoxes_exposer.def( 
                "boxAt"
                , boxAt_function_value
                , ( bp::arg("index") ) );
        
        }
        { //::SireMM::CLJBoxes::boxAt
        
            typedef ::SireMM::CLJBox ( ::SireMM::CLJBoxes::*boxAt_function_type )( ::SireMaths::Vector const & ) const;
            boxAt_function_type boxAt_function_value( &::SireMM::CLJBoxes::boxAt );
            
            CLJBoxes_exposer.def( 
                "boxAt"
                , boxAt_function_value
                , ( bp::arg("coords") ) );
        
        }
        { //::SireMM::CLJBoxes::boxDimensions
        
            typedef ::QVector< SireVol::AABox > ( ::SireMM::CLJBoxes::*boxDimensions_function_type )(  ) const;
            boxDimensions_function_type boxDimensions_function_value( &::SireMM::CLJBoxes::boxDimensions );
            
            CLJBoxes_exposer.def( 
                "boxDimensions"
                , boxDimensions_function_value );
        
        }
        { //::SireMM::CLJBoxes::boxDimensionsAt
        
            typedef ::SireVol::AABox ( ::SireMM::CLJBoxes::*boxDimensionsAt_function_type )( ::SireMM::CLJBoxIndex const & ) const;
            boxDimensionsAt_function_type boxDimensionsAt_function_value( &::SireMM::CLJBoxes::boxDimensionsAt );
            
            CLJBoxes_exposer.def( 
                "boxDimensionsAt"
                , boxDimensionsAt_function_value
                , ( bp::arg("index") ) );
        
        }
        { //::SireMM::CLJBoxes::boxDimensionsAt
        
            typedef ::SireVol::AABox ( ::SireMM::CLJBoxes::*boxDimensionsAt_function_type )( ::SireMaths::Vector const & ) const;
            boxDimensionsAt_function_type boxDimensionsAt_function_value( &::SireMM::CLJBoxes::boxDimensionsAt );
            
            CLJBoxes_exposer.def( 
                "boxDimensionsAt"
                , boxDimensionsAt_function_value
                , ( bp::arg("coords") ) );
        
        }
        { //::SireMM::CLJBoxes::boxes
        
            typedef ::QVector< SireMM::CLJBox > ( ::SireMM::CLJBoxes::*boxes_function_type )(  ) const;
            boxes_function_type boxes_function_value( &::SireMM::CLJBoxes::boxes );
            
            CLJBoxes_exposer.def( 
                "boxes"
                , boxes_function_value );
        
        }
        { //::SireMM::CLJBoxes::length
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::CLJBoxes::*length_function_type )(  ) const;
            length_function_type length_function_value( &::SireMM::CLJBoxes::length );
            
            CLJBoxes_exposer.def( 
                "length"
                , length_function_value );
        
        }
        { //::SireMM::CLJBoxes::nAtoms
        
            typedef int ( ::SireMM::CLJBoxes::*nAtoms_function_type )(  ) const;
            nAtoms_function_type nAtoms_function_value( &::SireMM::CLJBoxes::nAtoms );
            
            CLJBoxes_exposer.def( 
                "nAtoms"
                , nAtoms_function_value );
        
        }
        { //::SireMM::CLJBoxes::nOccupiedBoxes
        
            typedef int ( ::SireMM::CLJBoxes::*nOccupiedBoxes_function_type )(  ) const;
            nOccupiedBoxes_function_type nOccupiedBoxes_function_value( &::SireMM::CLJBoxes::nOccupiedBoxes );
            
            CLJBoxes_exposer.def( 
                "nOccupiedBoxes"
                , nOccupiedBoxes_function_value );
        
        }
        { //::SireMM::CLJBoxes::occupiedBoxIndicies
        
            typedef ::QVector< SireMM::CLJBoxIndex > ( ::SireMM::CLJBoxes::*occupiedBoxIndicies_function_type )(  ) const;
            occupiedBoxIndicies_function_type occupiedBoxIndicies_function_value( &::SireMM::CLJBoxes::occupiedBoxIndicies );
            
            CLJBoxes_exposer.def( 
                "occupiedBoxIndicies"
                , occupiedBoxIndicies_function_value );
        
        }
        { //::SireMM::CLJBoxes::occupiedBoxes
        
            typedef ::QMap< SireMM::CLJBoxIndex, SireMM::CLJBoxPtr > const & ( ::SireMM::CLJBoxes::*occupiedBoxes_function_type )(  ) const;
            occupiedBoxes_function_type occupiedBoxes_function_value( &::SireMM::CLJBoxes::occupiedBoxes );
            
            CLJBoxes_exposer.def( 
                "occupiedBoxes"
                , occupiedBoxes_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        CLJBoxes_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJBoxes::operator=
        
            typedef ::SireMM::CLJBoxes & ( ::SireMM::CLJBoxes::*assign_function_type )( ::SireMM::CLJBoxes const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJBoxes::operator= );
            
            CLJBoxes_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        CLJBoxes_exposer.def( bp::self == bp::self );
        { //::SireMM::CLJBoxes::toString
        
            typedef ::QString ( ::SireMM::CLJBoxes::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMM::CLJBoxes::toString );
            
            CLJBoxes_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMM::CLJBoxes::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJBoxes::typeName );
            
            CLJBoxes_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMM::CLJBoxes::what
        
            typedef char const * ( ::SireMM::CLJBoxes::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMM::CLJBoxes::what );
            
            CLJBoxes_exposer.def( 
                "what"
                , what_function_value );
        
        }
        CLJBoxes_exposer.staticmethod( "typeName" );
        CLJBoxes_exposer.def( "__copy__", &__copy__);
        CLJBoxes_exposer.def( "__deepcopy__", &__copy__);
        CLJBoxes_exposer.def( "clone", &__copy__);
        CLJBoxes_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJBoxes >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJBoxes_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJBoxes >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJBoxes_exposer.def( "__str__", &__str__< ::SireMM::CLJBoxes > );
        CLJBoxes_exposer.def( "__repr__", &__str__< ::SireMM::CLJBoxes > );
    }

}

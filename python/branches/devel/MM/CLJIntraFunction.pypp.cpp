// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJIntraFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/cartesian.h"

#include "SireVol/periodicbox.h"

#include "cljfunction.h"

#include <QElapsedTimer>

#include "cljfunction.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJIntraFunction_class(){

    { //::SireMM::CLJIntraFunction
        typedef bp::class_< SireMM::CLJIntraFunction, bp::bases< SireMM::CLJCutoffFunction, SireMM::CLJFunction, SireBase::Property >, boost::noncopyable > CLJIntraFunction_exposer_t;
        CLJIntraFunction_exposer_t CLJIntraFunction_exposer = CLJIntraFunction_exposer_t( "CLJIntraFunction", bp::no_init );
        bp::scope CLJIntraFunction_scope( CLJIntraFunction_exposer );
        { //::SireMM::CLJIntraFunction::nbPairs
        
            typedef ::SireMM::CLJNBPairs const & ( ::SireMM::CLJIntraFunction::*nbPairs_function_type )(  ) const;
            nbPairs_function_type nbPairs_function_value( &::SireMM::CLJIntraFunction::nbPairs );
            
            CLJIntraFunction_exposer.def( 
                "nbPairs"
                , nbPairs_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJIntraFunction::setNBPairs
        
            typedef void ( ::SireMM::CLJIntraFunction::*setNBPairs_function_type )( ::SireMM::CLJNBPairs const & ) ;
            setNBPairs_function_type setNBPairs_function_value( &::SireMM::CLJIntraFunction::setNBPairs );
            
            CLJIntraFunction_exposer.def( 
                "setNBPairs"
                , setNBPairs_function_value
                , ( bp::arg("cljnb") ) );
        
        }
        { //::SireMM::CLJIntraFunction::setNBPairs
        
            typedef void ( ::SireMM::CLJIntraFunction::*setNBPairs_function_type )( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & ) ;
            setNBPairs_function_type setNBPairs_function_value( &::SireMM::CLJIntraFunction::setNBPairs );
            
            CLJIntraFunction_exposer.def( 
                "setNBPairs"
                , setNBPairs_function_value
                , ( bp::arg("molecule"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMM::CLJIntraFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJIntraFunction::typeName );
            
            CLJIntraFunction_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        CLJIntraFunction_exposer.staticmethod( "typeName" );
        CLJIntraFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJIntraFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJIntraFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJIntraFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJIntraFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJIntraFunction > );
        CLJIntraFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJIntraFunction > );
    }

}

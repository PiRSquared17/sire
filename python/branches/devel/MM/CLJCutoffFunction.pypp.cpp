// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJCutoffFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/cartesian.h"

#include "SireVol/periodicbox.h"

#include "cljfunction.h"

#include "gridinfo.h"

#include "tbb/blocked_range.h"

#include "tbb/parallel_for.h"

#include <QElapsedTimer>

#include "cljfunction.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJCutoffFunction_class(){

    { //::SireMM::CLJCutoffFunction
        typedef bp::class_< SireMM::CLJCutoffFunction, bp::bases< SireMM::CLJFunction, SireBase::Property >, boost::noncopyable > CLJCutoffFunction_exposer_t;
        CLJCutoffFunction_exposer_t CLJCutoffFunction_exposer = CLJCutoffFunction_exposer_t( "CLJCutoffFunction", bp::no_init );
        bp::scope CLJCutoffFunction_scope( CLJCutoffFunction_exposer );
        { //::SireMM::CLJCutoffFunction::coulombCutoff
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::CLJCutoffFunction::*coulombCutoff_function_type )(  ) const;
            coulombCutoff_function_type coulombCutoff_function_value( &::SireMM::CLJCutoffFunction::coulombCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "coulombCutoff"
                , coulombCutoff_function_value );
        
        }
        { //::SireMM::CLJCutoffFunction::hasCutoff
        
            typedef bool ( ::SireMM::CLJCutoffFunction::*hasCutoff_function_type )(  ) const;
            hasCutoff_function_type hasCutoff_function_value( &::SireMM::CLJCutoffFunction::hasCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "hasCutoff"
                , hasCutoff_function_value );
        
        }
        { //::SireMM::CLJCutoffFunction::ljCutoff
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::CLJCutoffFunction::*ljCutoff_function_type )(  ) const;
            ljCutoff_function_type ljCutoff_function_value( &::SireMM::CLJCutoffFunction::ljCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "ljCutoff"
                , ljCutoff_function_value );
        
        }
        { //::SireMM::CLJCutoffFunction::setCoulombCutoff
        
            typedef void ( ::SireMM::CLJCutoffFunction::*setCoulombCutoff_function_type )( ::SireUnits::Dimension::Length ) ;
            setCoulombCutoff_function_type setCoulombCutoff_function_value( &::SireMM::CLJCutoffFunction::setCoulombCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "setCoulombCutoff"
                , setCoulombCutoff_function_value
                , ( bp::arg("distance") ) );
        
        }
        { //::SireMM::CLJCutoffFunction::setCutoff
        
            typedef void ( ::SireMM::CLJCutoffFunction::*setCutoff_function_type )( ::SireUnits::Dimension::Length ) ;
            setCutoff_function_type setCutoff_function_value( &::SireMM::CLJCutoffFunction::setCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "setCutoff"
                , setCutoff_function_value
                , ( bp::arg("distance") ) );
        
        }
        { //::SireMM::CLJCutoffFunction::setCutoff
        
            typedef void ( ::SireMM::CLJCutoffFunction::*setCutoff_function_type )( ::SireUnits::Dimension::Length,::SireUnits::Dimension::Length ) ;
            setCutoff_function_type setCutoff_function_value( &::SireMM::CLJCutoffFunction::setCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "setCutoff"
                , setCutoff_function_value
                , ( bp::arg("coulomb_cutoff"), bp::arg("lj_cutoff") ) );
        
        }
        { //::SireMM::CLJCutoffFunction::setLJCutoff
        
            typedef void ( ::SireMM::CLJCutoffFunction::*setLJCutoff_function_type )( ::SireUnits::Dimension::Length ) ;
            setLJCutoff_function_type setLJCutoff_function_value( &::SireMM::CLJCutoffFunction::setLJCutoff );
            
            CLJCutoffFunction_exposer.def( 
                "setLJCutoff"
                , setLJCutoff_function_value
                , ( bp::arg("distance") ) );
        
        }
        { //::SireMM::CLJCutoffFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJCutoffFunction::typeName );
            
            CLJCutoffFunction_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        CLJCutoffFunction_exposer.staticmethod( "typeName" );
        CLJCutoffFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJCutoffFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJCutoffFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJCutoffFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJCutoffFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJCutoffFunction > );
        CLJCutoffFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJCutoffFunction > );
    }

}

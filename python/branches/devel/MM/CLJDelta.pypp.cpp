// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJDelta.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMol/moleculeview.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cljdelta.h"

#include "cljdelta.h"

SireMM::CLJDelta __copy__(const SireMM::CLJDelta &other){ return SireMM::CLJDelta(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::CLJDelta&){ return "SireMM::CLJDelta";}

void register_CLJDelta_class(){

    { //::SireMM::CLJDelta
        typedef bp::class_< SireMM::CLJDelta > CLJDelta_exposer_t;
        CLJDelta_exposer_t CLJDelta_exposer = CLJDelta_exposer_t( "CLJDelta", bp::init< >() );
        bp::scope CLJDelta_scope( CLJDelta_exposer );
        CLJDelta_exposer.def( bp::init< SireMM::CLJBoxes const &, QVector< SireMM::CLJBoxIndex > const &, SireMol::MoleculeView const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("boxes"), bp::arg("old_atoms"), bp::arg("new_atoms"), bp::arg("map")=SireBase::PropertyMap() )) );
        CLJDelta_exposer.def( bp::init< SireMM::CLJBoxes const &, QVector< SireMM::CLJBoxIndex > const &, SireMol::MoleculeView const &, SireMM::CLJAtoms::ID_SOURCE, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("boxes"), bp::arg("old_atoms"), bp::arg("new_atoms"), bp::arg("source"), bp::arg("map")=SireBase::PropertyMap() )) );
        CLJDelta_exposer.def( bp::init< SireMM::CLJDelta const & >(( bp::arg("other") )) );
        { //::SireMM::CLJDelta::boxIndex
        
            typedef ::SireMM::CLJBoxIndex const & ( ::SireMM::CLJDelta::*boxIndex_function_type )(  ) const;
            boxIndex_function_type boxIndex_function_value( &::SireMM::CLJDelta::boxIndex );
            
            CLJDelta_exposer.def( 
                "boxIndex"
                , boxIndex_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJDelta::changedAtoms
        
            typedef ::SireMM::CLJAtoms const & ( ::SireMM::CLJDelta::*changedAtoms_function_type )(  ) const;
            changedAtoms_function_type changedAtoms_function_value( &::SireMM::CLJDelta::changedAtoms );
            
            CLJDelta_exposer.def( 
                "changedAtoms"
                , changedAtoms_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJDelta::isSingleBox
        
            typedef bool ( ::SireMM::CLJDelta::*isSingleBox_function_type )(  ) const;
            isSingleBox_function_type isSingleBox_function_value( &::SireMM::CLJDelta::isSingleBox );
            
            CLJDelta_exposer.def( 
                "isSingleBox"
                , isSingleBox_function_value );
        
        }
        { //::SireMM::CLJDelta::nBoxX
        
            typedef ::quint8 ( ::SireMM::CLJDelta::*nBoxX_function_type )(  ) const;
            nBoxX_function_type nBoxX_function_value( &::SireMM::CLJDelta::nBoxX );
            
            CLJDelta_exposer.def( 
                "nBoxX"
                , nBoxX_function_value );
        
        }
        { //::SireMM::CLJDelta::nBoxY
        
            typedef ::quint8 ( ::SireMM::CLJDelta::*nBoxY_function_type )(  ) const;
            nBoxY_function_type nBoxY_function_value( &::SireMM::CLJDelta::nBoxY );
            
            CLJDelta_exposer.def( 
                "nBoxY"
                , nBoxY_function_value );
        
        }
        { //::SireMM::CLJDelta::nBoxZ
        
            typedef ::quint8 ( ::SireMM::CLJDelta::*nBoxZ_function_type )(  ) const;
            nBoxZ_function_type nBoxZ_function_value( &::SireMM::CLJDelta::nBoxZ );
            
            CLJDelta_exposer.def( 
                "nBoxZ"
                , nBoxZ_function_value );
        
        }
        { //::SireMM::CLJDelta::newAtoms
        
            typedef ::SireMM::CLJAtoms const & ( ::SireMM::CLJDelta::*newAtoms_function_type )(  ) const;
            newAtoms_function_type newAtoms_function_value( &::SireMM::CLJDelta::newAtoms );
            
            CLJDelta_exposer.def( 
                "newAtoms"
                , newAtoms_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJDelta::oldAtoms
        
            typedef ::SireMM::CLJAtoms ( ::SireMM::CLJDelta::*oldAtoms_function_type )(  ) const;
            oldAtoms_function_type oldAtoms_function_value( &::SireMM::CLJDelta::oldAtoms );
            
            CLJDelta_exposer.def( 
                "oldAtoms"
                , oldAtoms_function_value );
        
        }
        { //::SireMM::CLJDelta::oldIndicies
        
            typedef ::QVector< SireMM::CLJBoxIndex > const & ( ::SireMM::CLJDelta::*oldIndicies_function_type )(  ) const;
            oldIndicies_function_type oldIndicies_function_value( &::SireMM::CLJDelta::oldIndicies );
            
            CLJDelta_exposer.def( 
                "oldIndicies"
                , oldIndicies_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        CLJDelta_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJDelta::operator=
        
            typedef ::SireMM::CLJDelta & ( ::SireMM::CLJDelta::*assign_function_type )( ::SireMM::CLJDelta const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJDelta::operator= );
            
            CLJDelta_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        CLJDelta_exposer.def( bp::self == bp::self );
        CLJDelta_exposer.def( "__copy__", &__copy__);
        CLJDelta_exposer.def( "__deepcopy__", &__copy__);
        CLJDelta_exposer.def( "clone", &__copy__);
        CLJDelta_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJDelta >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJDelta_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJDelta >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJDelta_exposer.def( "__str__", &pvt_get_name);
        CLJDelta_exposer.def( "__repr__", &pvt_get_name);
    }

}

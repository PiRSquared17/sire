// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CLJVacShiftAriFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/multidouble.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cljfunction.h"

#include "cljfunction.h"

SireMM::CLJVacShiftAriFunction __copy__(const SireMM::CLJVacShiftAriFunction &other){ return SireMM::CLJVacShiftAriFunction(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CLJVacShiftAriFunction_class(){

    { //::SireMM::CLJVacShiftAriFunction
        typedef bp::class_< SireMM::CLJVacShiftAriFunction, bp::bases< SireMM::CLJFunction, SireBase::Property > > CLJVacShiftAriFunction_exposer_t;
        CLJVacShiftAriFunction_exposer_t CLJVacShiftAriFunction_exposer = CLJVacShiftAriFunction_exposer_t( "CLJVacShiftAriFunction", bp::init< >() );
        bp::scope CLJVacShiftAriFunction_scope( CLJVacShiftAriFunction_exposer );
        CLJVacShiftAriFunction_exposer.def( bp::init< SireUnits::Dimension::Length >(( bp::arg("cutoff") )) );
        CLJVacShiftAriFunction_exposer.def( bp::init< SireUnits::Dimension::Length, SireUnits::Dimension::Length >(( bp::arg("coul_cutoff"), bp::arg("lj_cutoff") )) );
        CLJVacShiftAriFunction_exposer.def( bp::init< SireMM::CLJVacShiftAriFunction const & >(( bp::arg("other") )) );
        CLJVacShiftAriFunction_exposer.def( bp::self != bp::self );
        { //::SireMM::CLJVacShiftAriFunction::operator=
        
            typedef ::SireMM::CLJVacShiftAriFunction & ( ::SireMM::CLJVacShiftAriFunction::*assign_function_type )( ::SireMM::CLJVacShiftAriFunction const & ) ;
            assign_function_type assign_function_value( &::SireMM::CLJVacShiftAriFunction::operator= );
            
            CLJVacShiftAriFunction_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        CLJVacShiftAriFunction_exposer.def( bp::self == bp::self );
        { //::SireMM::CLJVacShiftAriFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::CLJVacShiftAriFunction::typeName );
            
            CLJVacShiftAriFunction_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMM::CLJVacShiftAriFunction::what
        
            typedef char const * ( ::SireMM::CLJVacShiftAriFunction::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMM::CLJVacShiftAriFunction::what );
            
            CLJVacShiftAriFunction_exposer.def( 
                "what"
                , what_function_value );
        
        }
        CLJVacShiftAriFunction_exposer.staticmethod( "typeName" );
        CLJVacShiftAriFunction_exposer.def( "__copy__", &__copy__);
        CLJVacShiftAriFunction_exposer.def( "__deepcopy__", &__copy__);
        CLJVacShiftAriFunction_exposer.def( "clone", &__copy__);
        CLJVacShiftAriFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::CLJVacShiftAriFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJVacShiftAriFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::CLJVacShiftAriFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJVacShiftAriFunction_exposer.def( "__str__", &__str__< ::SireMM::CLJVacShiftAriFunction > );
        CLJVacShiftAriFunction_exposer.def( "__repr__", &__str__< ::SireMM::CLJVacShiftAriFunction > );
    }

}

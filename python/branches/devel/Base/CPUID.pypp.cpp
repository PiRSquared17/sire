// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CPUID.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/shareddatastream.h"

#include "cpuid.h"

#include "tostring.h"

#include "cpuid.h"

SireBase::CPUID __copy__(const SireBase::CPUID &other){ return SireBase::CPUID(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CPUID_class(){

    { //::SireBase::CPUID
        typedef bp::class_< SireBase::CPUID, bp::bases< SireBase::Property > > CPUID_exposer_t;
        CPUID_exposer_t CPUID_exposer = CPUID_exposer_t( "CPUID", bp::init< >() );
        bp::scope CPUID_scope( CPUID_exposer );
        CPUID_exposer.def( bp::init< SireBase::CPUID const & >(( bp::arg("other") )) );
        CPUID_exposer.def( bp::self != bp::self );
        { //::SireBase::CPUID::operator=
        
            typedef ::SireBase::CPUID & ( ::SireBase::CPUID::*assign_function_type )( ::SireBase::CPUID const & ) ;
            assign_function_type assign_function_value( &::SireBase::CPUID::operator= );
            
            CPUID_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        CPUID_exposer.def( bp::self == bp::self );
        { //::SireBase::CPUID::toString
        
            typedef ::QString ( ::SireBase::CPUID::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireBase::CPUID::toString );
            
            CPUID_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireBase::CPUID::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::CPUID::typeName );
            
            CPUID_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireBase::CPUID::what
        
            typedef char const * ( ::SireBase::CPUID::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireBase::CPUID::what );
            
            CPUID_exposer.def( 
                "what"
                , what_function_value );
        
        }
        CPUID_exposer.staticmethod( "typeName" );
        CPUID_exposer.def( "__copy__", &__copy__);
        CPUID_exposer.def( "__deepcopy__", &__copy__);
        CPUID_exposer.def( "clone", &__copy__);
        CPUID_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::CPUID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CPUID_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::CPUID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CPUID_exposer.def( "__str__", &__str__< ::SireBase::CPUID > );
        CPUID_exposer.def( "__repr__", &__str__< ::SireBase::CPUID > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MajMinVersion.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

SireBase::MajMinVersion __copy__(const SireBase::MajMinVersion &other){ return SireBase::MajMinVersion(other); }

#include "SirePy/str.hpp"

void register_MajMinVersion_class(){

    bp::class_< SireBase::MajMinVersion >( "MajMinVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::Incremint * >(( bp::arg("majint") )) )    
        .def( bp::init< SireBase::IDPair const & >(( bp::arg("other") )) )    
        .def( 
            "assertSameMajorVersion"
            , (void ( ::SireBase::MajMinVersion::* )( ::SireBase::MajMinVersion const & ) const)( &::SireBase::MajMinVersion::assertSameMajorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameMinorVersion"
            , (void ( ::SireBase::MajMinVersion::* )( ::SireBase::MajMinVersion const & ) const)( &::SireBase::MajMinVersion::assertSameMinorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameVersion"
            , (void ( ::SireBase::MajMinVersion::* )( ::SireBase::MajMinVersion const & ) const)( &::SireBase::MajMinVersion::assertSameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "incrementMajor"
            , (void ( ::SireBase::MajMinVersion::* )(  ) )( &::SireBase::MajMinVersion::incrementMajor ) )    
        .def( 
            "incrementMinor"
            , (void ( ::SireBase::MajMinVersion::* )(  ) )( &::SireBase::MajMinVersion::incrementMinor ) )    
        .def( 
            "major"
            , (::quint32 ( ::SireBase::MajMinVersion::* )(  ) const)( &::SireBase::MajMinVersion::major ) )    
        .def( 
            "minor"
            , (::quint32 ( ::SireBase::MajMinVersion::* )(  ) const)( &::SireBase::MajMinVersion::minor ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "sameMajorVersion"
            , (bool ( ::SireBase::MajMinVersion::* )( ::SireBase::MajMinVersion const & ) const)( &::SireBase::MajMinVersion::sameMajorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameMinorVersion"
            , (bool ( ::SireBase::MajMinVersion::* )( ::SireBase::MajMinVersion const & ) const)( &::SireBase::MajMinVersion::sameMinorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameVersion"
            , (bool ( ::SireBase::MajMinVersion::* )( ::SireBase::MajMinVersion const & ) const)( &::SireBase::MajMinVersion::sameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireBase::MajMinVersion::* )(  ) const)( &::SireBase::MajMinVersion::toString ) )    
        .def( 
            "version"
            , (::SireBase::Version const & ( ::SireBase::MajMinVersion::* )(  ) const)( &::SireBase::MajMinVersion::version )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &SirePy::__str__< ::SireBase::MajMinVersion > );

}

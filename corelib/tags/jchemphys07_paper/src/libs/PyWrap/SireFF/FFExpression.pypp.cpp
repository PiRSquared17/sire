// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "FFExpression.pypp.hpp"
#include "boost/python.hpp"
#include "sireff_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/partialmolecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"
#include "SireMol/cgatomid.h"
#include "SireMol/cutgroupnum.h"
#include "SireMol/resnumatomid.h"
#include "SireMol/resid.h"
#include "SireMol/moleculeid.h"
#include "SireBase/property.h"

namespace bp = boost::python;

SireFF::FFExpression __copy__(const SireFF::FFExpression &other){ return SireFF::FFExpression(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_FFExpression_class(){

    bp::class_< SireFF::FFExpression >( "FFExpression" )    
        .def( bp::init< >() )    
        .def( bp::init< QString const &, SireCAS::Expression const & >(( bp::arg("name"), bp::arg("expression") )) )    
        .def( bp::init< SireCAS::Function const & >(( bp::arg("func") )) )    
        .def( 
            "ID"
            , (::SireCAS::SymbolID ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::ID ) )    
        .def( 
            "components"
            , (::QSet<SireFF::FFComponent> ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::components ) )    
        .def( 
            "dependencies"
            , (::QSet<SireCAS::Function> const & ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::dependencies )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "evaluate"
            , (double ( ::SireFF::FFExpression::* )( ::SireCAS::Values const & ) const)( &::SireFF::FFExpression::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "expression"
            , (::SireCAS::Expression const & ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::expression )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "forceFieldIDs"
            , (::QSet<SireFF::ForceFieldID> const & ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::forceFieldIDs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "function"
            , (::SireCAS::Function const & ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::function )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "toString"
            , (::QString ( ::SireFF::FFExpression::* )(  ) const)( &::SireFF::FFExpression::toString ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireFF::FFExpression >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireFF::FFExpression >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireFF::FFExpression > );

}

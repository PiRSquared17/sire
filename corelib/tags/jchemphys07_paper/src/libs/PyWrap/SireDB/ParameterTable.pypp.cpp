// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "ParameterTable.pypp.hpp"
#include "boost/python.hpp"
#include "siredb_headers.h"
#include "SireCAS/function.h"
#include "SireCAS/expression.h"

namespace bp = boost::python;

SireDB::ParameterTable __copy__(const SireDB::ParameterTable &other){ return SireDB::ParameterTable(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireDB::ParameterTable&){ return "SireDB::ParameterTable";}

void register_ParameterTable_class(){

    bp::class_< SireDB::ParameterTable >( "ParameterTable" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::MoleculeInfo const & >(( bp::arg("molinfo") )) )    
        .def( 
            "addTable"
            , (void ( ::SireDB::ParameterTable::* )( ::SireDB::TableBase const & ) )( &::SireDB::ParameterTable::addTable )
            , ( bp::arg("table") ) )    
        .def( 
            "asA"
            , (::SireDB::TableBase const & ( ::SireDB::ParameterTable::* )( ::QString const & ) const)( &::SireDB::ParameterTable::asA )
            , ( bp::arg("type_name") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireDB::ParameterTable::* )( ::SireMol::Molecule const & ) const)( &::SireDB::ParameterTable::assertCompatibleWith )
            , ( bp::arg("molecule") ) )    
        .def( 
            "assertTableCompatible"
            , (void ( ::SireDB::ParameterTable::* )( ::SireDB::TableBase const & ) const)( &::SireDB::ParameterTable::assertTableCompatible )
            , ( bp::arg("table") ) )    
        .def( 
            "assign"
            , (void ( ::SireDB::ParameterTable::* )( ::SireMol::Molecule const &,::SireDB::ParameterDB &,::SireDB::assign_parameters const &,::SireDB::MatchMRData const & ) )( &::SireDB::ParameterTable::assign )
            , ( bp::arg("molecule"), bp::arg("db"), bp::arg("assigners"), bp::arg("matchmr")=::SireDB::MatchMRData( ) ) )    
        .def( 
            "createTable"
            , (void ( ::SireDB::ParameterTable::* )( ::QString const & ) )( &::SireDB::ParameterTable::createTable )
            , ( bp::arg("type_name") ) )    
        .def( 
            "info"
            , (::SireMol::MoleculeInfo const & ( ::SireDB::ParameterTable::* )(  ) const)( &::SireDB::ParameterTable::info )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "isA"
            , (bool ( ::SireDB::ParameterTable::* )( ::QString const & ) const)( &::SireDB::ParameterTable::isA )
            , ( bp::arg("type_name") ) )    
        .def( 
            "isEmpty"
            , (bool ( ::SireDB::ParameterTable::* )(  ) const)( &::SireDB::ParameterTable::isEmpty ) )    
        .def( 
            "removeTable"
            , (void ( ::SireDB::ParameterTable::* )( ::QString const & ) )( &::SireDB::ParameterTable::removeTable )
            , ( bp::arg("type_name") ) )    
        .def( 
            "setTable"
            , (void ( ::SireDB::ParameterTable::* )( ::SireDB::TableBase const & ) )( &::SireDB::ParameterTable::setTable )
            , ( bp::arg("table") ) )    
        .def( 
            "types"
            , (::QStringList ( ::SireDB::ParameterTable::* )(  ) const)( &::SireDB::ParameterTable::types ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireDB::ParameterTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireDB::ParameterTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

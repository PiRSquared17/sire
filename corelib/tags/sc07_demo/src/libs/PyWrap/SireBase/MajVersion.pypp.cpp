// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MajVersion.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

SireBase::MajVersion __copy__(const SireBase::MajVersion &other){ return SireBase::MajVersion(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireBase::MajVersion&){ return "SireBase::MajVersion";}

void register_MajVersion_class(){

    bp::class_< SireBase::MajVersion >( "MajVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::Incremint * >(( bp::arg("incremint") )) )    
        .def( 
            "assertSameVersion"
            , (void ( ::SireBase::MajVersion::* )( ::SireBase::MajVersion const & ) const)( &::SireBase::MajVersion::assertSameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "increment"
            , (void ( ::SireBase::MajVersion::* )(  ) )( &::SireBase::MajVersion::increment ) )    
        .def( "__int__", &SireBase::MajVersion::operator ::quint32  )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireBase::MajVersion >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireBase::MajVersion >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

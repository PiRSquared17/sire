// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MonitorEnergy.pypp.hpp"
#include "boost/python.hpp"
#include "siresystem_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireFF/ffgroupid.h"

namespace bp = boost::python;

SireSystem::MonitorEnergy __copy__(const SireSystem::MonitorEnergy &other){ return SireSystem::MonitorEnergy(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireSystem::MonitorEnergy&){ return "SireSystem::MonitorEnergy";}

void register_MonitorEnergy_class(){

    bp::class_< SireSystem::MonitorEnergy, bp::bases< SireSystem::SystemMonitorBase > >( "MonitorEnergy" )    
        .def( bp::init< >() )    
        .def( bp::init< SireCAS::Symbol const & >(( bp::arg("component") )) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireSystem::MonitorEnergy::* )( ::SireSystem::QuerySystem const & ) const)( &::SireSystem::MonitorEnergy::assertCompatibleWith )
            , ( bp::arg("system") ) )    
        .def( 
            "average"
            , (double ( ::SireSystem::MonitorEnergy::* )(  ) const)( &::SireSystem::MonitorEnergy::average ) )    
        .def( 
            "clear"
            , (void ( ::SireSystem::MonitorEnergy::* )(  ) )( &::SireSystem::MonitorEnergy::clear ) )    
        .def( 
            "energyComponent"
            , (::SireCAS::Symbol const & ( ::SireSystem::MonitorEnergy::* )(  ) const)( &::SireSystem::MonitorEnergy::energyComponent )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "monitor"
            , (void ( ::SireSystem::MonitorEnergy::* )( ::SireSystem::QuerySystem & ) )( &::SireSystem::MonitorEnergy::monitor )
            , ( bp::arg("system") ) )    
        .def( 
            "stdDev"
            , (double ( ::SireSystem::MonitorEnergy::* )(  ) const)( &::SireSystem::MonitorEnergy::stdDev ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireSystem::MonitorEnergy::typeName ) )    
        .def( 
            "value"
            , (double ( ::SireSystem::MonitorEnergy::* )(  ) const)( &::SireSystem::MonitorEnergy::value ) )    
        .def( 
            "what"
            , (char const * ( ::SireSystem::MonitorEnergy::* )(  ) const)( &::SireSystem::MonitorEnergy::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireSystem::MonitorEnergy >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireSystem::MonitorEnergy >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

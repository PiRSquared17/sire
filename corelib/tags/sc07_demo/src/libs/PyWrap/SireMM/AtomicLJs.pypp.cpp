// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomicLJs.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::AtomicLJs __copy__(const SireMM::AtomicLJs &other){ return SireMM::AtomicLJs(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::AtomicLJs&){ return "SireMM::AtomicLJs";}

void register_AtomicLJs_class(){

    bp::class_< SireMM::AtomicLJs, bp::bases< SireMol::AtomicProperties > >( "AtomicLJs" )    
        .def( bp::init< >() )    
        .def( bp::init< QVector<QVector<SireMM::LJParameter> > const & >(( bp::arg("ljparams") )) )    
        .def( bp::init< QVector<SireMM::LJParameter> const & >(( bp::arg("ljparams") )) )    
        .def( bp::init< SireBase::Property const & >(( bp::arg("property") )) )    
        .def( 
            "isCompatibleWith"
            , (bool ( ::SireMM::AtomicLJs::* )( ::SireMol::MoleculeInfo const & ) const)( &::SireMM::AtomicLJs::isCompatibleWith )
            , ( bp::arg("molinfo") ) )    
        .def( 
            "mask"
            , (::SireBase::Property ( ::SireMM::AtomicLJs::* )( ::SireMol::AtomSelection const & ) const)( &::SireMM::AtomicLJs::mask )
            , ( bp::arg("selected_atoms") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::AtomicLJs::typeName ) )    
        .def( 
            "value"
            , (::QVariant ( ::SireMM::AtomicLJs::* )( ::SireMol::CGAtomID const & ) const)( &::SireMM::AtomicLJs::value )
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::AtomicLJs::* )(  ) const)( &::SireMM::AtomicLJs::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::AtomicLJs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::AtomicLJs >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

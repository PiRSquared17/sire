// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QTextStream.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

const char* pvt_get_name(const QTextStream&){ return "QTextStream";}

void register_QTextStream_class(){

    { //::QTextStream
        typedef bp::class_< QTextStream, boost::noncopyable > QTextStream_exposer_t;
        QTextStream_exposer_t QTextStream_exposer = QTextStream_exposer_t( "QTextStream" );
        bp::scope QTextStream_scope( QTextStream_exposer );
        bp::enum_< QTextStream::FieldAlignment>("FieldAlignment")
            .value("AlignLeft", QTextStream::AlignLeft)
            .value("AlignRight", QTextStream::AlignRight)
            .value("AlignCenter", QTextStream::AlignCenter)
            .value("AlignAccountingStyle", QTextStream::AlignAccountingStyle)
            .export_values()
            ;
        bp::enum_< QTextStream::NumberFlag>("NumberFlag")
            .value("ShowBase", QTextStream::ShowBase)
            .value("ForcePoint", QTextStream::ForcePoint)
            .value("ForceSign", QTextStream::ForceSign)
            .value("UppercaseBase", QTextStream::UppercaseBase)
            .value("UppercaseDigits", QTextStream::UppercaseDigits)
            .export_values()
            ;
        bp::enum_< QTextStream::RealNumberNotation>("RealNumberNotation")
            .value("SmartNotation", QTextStream::SmartNotation)
            .value("FixedNotation", QTextStream::FixedNotation)
            .value("ScientificNotation", QTextStream::ScientificNotation)
            .export_values()
            ;
        bp::enum_< QTextStream::Status>("Status")
            .value("Ok", QTextStream::Ok)
            .value("ReadPastEnd", QTextStream::ReadPastEnd)
            .value("ReadCorruptData", QTextStream::ReadCorruptData)
            .export_values()
            ;
        { //::QTextStream::atEnd
        
            typedef bool ( ::QTextStream::*atEnd_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "atEnd"
                , atEnd_function_type( &::QTextStream::atEnd ) );
        
        }
        { //::QTextStream::autoDetectUnicode
        
            typedef bool ( ::QTextStream::*autoDetectUnicode_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "autoDetectUnicode"
                , autoDetectUnicode_function_type( &::QTextStream::autoDetectUnicode ) );
        
        }
        { //::QTextStream::fieldAlignment
        
            typedef ::QTextStream::FieldAlignment ( ::QTextStream::*fieldAlignment_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "fieldAlignment"
                , fieldAlignment_function_type( &::QTextStream::fieldAlignment ) );
        
        }
        { //::QTextStream::fieldWidth
        
            typedef int ( ::QTextStream::*fieldWidth_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "fieldWidth"
                , fieldWidth_function_type( &::QTextStream::fieldWidth ) );
        
        }
        { //::QTextStream::flush
        
            typedef void ( ::QTextStream::*flush_function_type )(  ) ;
            
            QTextStream_exposer.def( 
                "flush"
                , flush_function_type( &::QTextStream::flush ) );
        
        }
        { //::QTextStream::generateByteOrderMark
        
            typedef bool ( ::QTextStream::*generateByteOrderMark_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "generateByteOrderMark"
                , generateByteOrderMark_function_type( &::QTextStream::generateByteOrderMark ) );
        
        }
        { //::QTextStream::integerBase
        
            typedef int ( ::QTextStream::*integerBase_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "integerBase"
                , integerBase_function_type( &::QTextStream::integerBase ) );
        
        }
        { //::QTextStream::numberFlags
        
            typedef ::QFlags<QTextStream::NumberFlag> ( ::QTextStream::*numberFlags_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "numberFlags"
                , numberFlags_function_type( &::QTextStream::numberFlags ) );
        
        }
        { //::QTextStream::padChar
        
            typedef ::QChar ( ::QTextStream::*padChar_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "padChar"
                , padChar_function_type( &::QTextStream::padChar ) );
        
        }
        { //::QTextStream::read
        
            typedef ::QString ( ::QTextStream::*read_function_type )( ::qint64 ) ;
            
            QTextStream_exposer.def( 
                "read"
                , read_function_type( &::QTextStream::read )
                , ( bp::arg("maxlen") ) );
        
        }
        { //::QTextStream::readAll
        
            typedef ::QString ( ::QTextStream::*readAll_function_type )(  ) ;
            
            QTextStream_exposer.def( 
                "readAll"
                , readAll_function_type( &::QTextStream::readAll ) );
        
        }
        { //::QTextStream::readLine
        
            typedef ::QString ( ::QTextStream::*readLine_function_type )( ::qint64 ) ;
            
            QTextStream_exposer.def( 
                "readLine"
                , readLine_function_type( &::QTextStream::readLine )
                , ( bp::arg("maxlen")=(long long int)(0) ) );
        
        }
        { //::QTextStream::realNumberNotation
        
            typedef ::QTextStream::RealNumberNotation ( ::QTextStream::*realNumberNotation_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "realNumberNotation"
                , realNumberNotation_function_type( &::QTextStream::realNumberNotation ) );
        
        }
        { //::QTextStream::realNumberPrecision
        
            typedef int ( ::QTextStream::*realNumberPrecision_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "realNumberPrecision"
                , realNumberPrecision_function_type( &::QTextStream::realNumberPrecision ) );
        
        }
        { //::QTextStream::reset
        
            typedef void ( ::QTextStream::*reset_function_type )(  ) ;
            
            QTextStream_exposer.def( 
                "reset"
                , reset_function_type( &::QTextStream::reset ) );
        
        }
        { //::QTextStream::resetStatus
        
            typedef void ( ::QTextStream::*resetStatus_function_type )(  ) ;
            
            QTextStream_exposer.def( 
                "resetStatus"
                , resetStatus_function_type( &::QTextStream::resetStatus ) );
        
        }
        { //::QTextStream::seek
        
            typedef bool ( ::QTextStream::*seek_function_type )( ::qint64 ) ;
            
            QTextStream_exposer.def( 
                "seek"
                , seek_function_type( &::QTextStream::seek )
                , ( bp::arg("pos") ) );
        
        }
        { //::QTextStream::setAutoDetectUnicode
        
            typedef void ( ::QTextStream::*setAutoDetectUnicode_function_type )( bool ) ;
            
            QTextStream_exposer.def( 
                "setAutoDetectUnicode"
                , setAutoDetectUnicode_function_type( &::QTextStream::setAutoDetectUnicode )
                , ( bp::arg("enabled") ) );
        
        }
        { //::QTextStream::setCodec
        
            typedef void ( ::QTextStream::*setCodec_function_type )( ::QTextCodec * ) ;
            
            QTextStream_exposer.def( 
                "setCodec"
                , setCodec_function_type( &::QTextStream::setCodec )
                , ( bp::arg("codec") ) );
        
        }
        { //::QTextStream::setCodec
        
            typedef void ( ::QTextStream::*setCodec_function_type )( char const * ) ;
            
            QTextStream_exposer.def( 
                "setCodec"
                , setCodec_function_type( &::QTextStream::setCodec )
                , ( bp::arg("codecName") ) );
        
        }
        { //::QTextStream::setDevice
        
            typedef void ( ::QTextStream::*setDevice_function_type )( ::QIODevice * ) ;
            
            QTextStream_exposer.def( 
                "setDevice"
                , setDevice_function_type( &::QTextStream::setDevice )
                , ( bp::arg("device") ) );
        
        }
        { //::QTextStream::setFieldAlignment
        
            typedef void ( ::QTextStream::*setFieldAlignment_function_type )( ::QTextStream::FieldAlignment ) ;
            
            QTextStream_exposer.def( 
                "setFieldAlignment"
                , setFieldAlignment_function_type( &::QTextStream::setFieldAlignment )
                , ( bp::arg("alignment") ) );
        
        }
        { //::QTextStream::setFieldWidth
        
            typedef void ( ::QTextStream::*setFieldWidth_function_type )( int ) ;
            
            QTextStream_exposer.def( 
                "setFieldWidth"
                , setFieldWidth_function_type( &::QTextStream::setFieldWidth )
                , ( bp::arg("width") ) );
        
        }
        { //::QTextStream::setGenerateByteOrderMark
        
            typedef void ( ::QTextStream::*setGenerateByteOrderMark_function_type )( bool ) ;
            
            QTextStream_exposer.def( 
                "setGenerateByteOrderMark"
                , setGenerateByteOrderMark_function_type( &::QTextStream::setGenerateByteOrderMark )
                , ( bp::arg("generate") ) );
        
        }
        { //::QTextStream::setIntegerBase
        
            typedef void ( ::QTextStream::*setIntegerBase_function_type )( int ) ;
            
            QTextStream_exposer.def( 
                "setIntegerBase"
                , setIntegerBase_function_type( &::QTextStream::setIntegerBase )
                , ( bp::arg("base") ) );
        
        }
        { //::QTextStream::setNumberFlags
        
            typedef void ( ::QTextStream::*setNumberFlags_function_type )( ::QFlags<QTextStream::NumberFlag> ) ;
            
            QTextStream_exposer.def( 
                "setNumberFlags"
                , setNumberFlags_function_type( &::QTextStream::setNumberFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::QTextStream::setPadChar
        
            typedef void ( ::QTextStream::*setPadChar_function_type )( ::QChar ) ;
            
            QTextStream_exposer.def( 
                "setPadChar"
                , setPadChar_function_type( &::QTextStream::setPadChar )
                , ( bp::arg("ch") ) );
        
        }
        { //::QTextStream::setRealNumberNotation
        
            typedef void ( ::QTextStream::*setRealNumberNotation_function_type )( ::QTextStream::RealNumberNotation ) ;
            
            QTextStream_exposer.def( 
                "setRealNumberNotation"
                , setRealNumberNotation_function_type( &::QTextStream::setRealNumberNotation )
                , ( bp::arg("notation") ) );
        
        }
        { //::QTextStream::setRealNumberPrecision
        
            typedef void ( ::QTextStream::*setRealNumberPrecision_function_type )( int ) ;
            
            QTextStream_exposer.def( 
                "setRealNumberPrecision"
                , setRealNumberPrecision_function_type( &::QTextStream::setRealNumberPrecision )
                , ( bp::arg("precision") ) );
        
        }
        { //::QTextStream::setStatus
        
            typedef void ( ::QTextStream::*setStatus_function_type )( ::QTextStream::Status ) ;
            
            QTextStream_exposer.def( 
                "setStatus"
                , setStatus_function_type( &::QTextStream::setStatus )
                , ( bp::arg("status") ) );
        
        }
        { //::QTextStream::setString
        
            typedef void ( ::QTextStream::*setString_function_type )( ::QString *,::QFlags<QIODevice::OpenModeFlag> ) ;
            
            QTextStream_exposer.def( 
                "setString"
                , setString_function_type( &::QTextStream::setString )
                , ( bp::arg("string"), bp::arg("openMode")=QIODevice::ReadWrite ) );
        
        }
        { //::QTextStream::skipWhiteSpace
        
            typedef void ( ::QTextStream::*skipWhiteSpace_function_type )(  ) ;
            
            QTextStream_exposer.def( 
                "skipWhiteSpace"
                , skipWhiteSpace_function_type( &::QTextStream::skipWhiteSpace ) );
        
        }
        { //::QTextStream::status
        
            typedef ::QTextStream::Status ( ::QTextStream::*status_function_type )(  ) const;
            
            QTextStream_exposer.def( 
                "status"
                , status_function_type( &::QTextStream::status ) );
        
        }
        QTextStream_exposer.def( "__str__", &pvt_get_name);
    }

}

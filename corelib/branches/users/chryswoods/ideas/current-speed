Water-methane system;

All use a feather of 0.5A, 1679 water box, gas-phase boundaries
Using normal sqrt (not fast version)

Cutoff    ProtoMS3                       ProtoMS2.1                      Percentage
          Energy/kcal mol-1  Time/ms     Energy/kcal mol-1   Time/ms     Speedup
          
5.0       -13864.5           120- 125    -12964.8            117         105%
10.0      -14448.5           305- 315    -14451.2            447          69%
15.0      -14467.1           670- 685    -14465.2            992          67%
20.0      -14464.9          1177-1184    -14465.9           1818          65%
40.0      -14468.6          3005-3015    -14468.3           4900          61%
80.0      -14468.3          3059-3067    -14468.3           5120          60%

This looks like with the exception of very small cutoffs, ProtoMS3 is about 30% 
faster than ProtoMS 2.1, despite being written in C++, being more flexible,
calculating the cutoffs for the solvent correctly etc.

In the limit of no cutoffs, both 2.1 and 3 give the same total energy.

I will however have to keep an eye on the speed. This is without any bookkeeping,
and no perturbation. I do however have the option of using the fast sqrt...

Unfortunately, in my current code, fastSqrt actually slows down the calculation time to about 3150ms for the 80A cutoff test. though doesn't slow down the 5 A test...

Part of the problem is that the current code is written for normal square root. fastInvSqrt requires a different way of working, so I should really test this using a derived MM class.

Changing whether or not functions are virtual in the double loop does not appear to make
any difference to the speed at 15A cutoff.

The above was the times from version 200 of the code, (now known as "the Prototype"). I will now
rerun the tests using version 200 (ProtoMS3), the current version of ProtoMS2.1 (version 725), and 
the latest version of Sire (version 473). All three codes are compiled today, using the same
version of gcc (gcc 3.4.4) on my laptop (gentoo, linux 2.6.12).

I will run each test five times, and will record the fastest and slowest times for each test.
Energies in kcal mol-1, times in ms

Cutoff   Sire(473)             ProtoMS3(200)             ProtoMS2.1(725)        % speed up compared to 2.1
         Energy   Time         Energy      Time          Energy       Time (*)    Sire       ProtoMS3
5.0    -13747.5    158-166     -13864.5    112-118      -12965.2       179        110%       156%
10.0   -14449.5    311-319     -14448.5    274-283      -14451.6       432        137%       155%
15.0   -14467.3    591-604     -14467.1    586-593      -14465.6       991        166%       168%
20.0   -14465.9    999-1012    -14464.9   1023-1049     -14466.3      1770        176%       171%
40.0   -14468.9   2480-2508    -14468.6   2536-2583     -14468.7      4813        193%       188%
80.0   -14468.7   2549-2579    -14468.3   2672-2742     -14468.7      5059        197%       187%

ProtoMS2.1 time is average of 10 runs (calculated as difference
of total run time of 11 singlepoints with total run time of 1 singlepoint,
divided by 10)

The difference in energies between ProtoMS2.1 now and last time is because I changed the 
values of some of the physical constants to match the latest values. It is good that Sire(473) and 
ProtoMS2.1(725) both agree on the energy when there is no cutoff, as this shows that the difference
between Sire(473) and ProtoMS3(200) is just down to the physical constants used.

Both Sire and ProtoMS3 are faster than ProtoMS2.1, with the margin being over 160% for realistic 
cutoffs! The latest version of Sire is competitive with the prototype! This is despite the latest
version using the finished code. I am very pleased :-)

I have moved some things around. Here are the current test results...

Cutoff   Sire(480)             % speed up compared to ProtoMS2.1
         Energy   Time         
5.0    -13747.5   119-123        148%
10.0   -14449.5   269-271        160%
15.0   -14467.3   558-569        176%
20.0   -14465.9   967-970        183%
40.0   -14468.9   2445-2510      193%
80.0   -14468.7   2526-2532      200%

We have just broken the 200% barrier! It is interesting to note that the relative speed
of Sire compared to ProtoMS2.1 increases with increasing cutoff.

I have now implemented periodic boundaries. I will now compare the speed of the current version of
Sire to ProtoMS2.1 using periodic boundaries

Cutoff   Sire(493)               ProtoMS2.1(725)   Relative speed
         Energy   Time           Energy   Time
5.0    -15412.0   212-221      -14464.2    221    102%
10.0   -16342.5   443-445      -16347.6    580    131%
15.0   -16364.1   1029-1036    -16356.9   1559    151%
20.0   -16368.8   2015-2020    -16369.6   3377    167%
40.0   -16379.6   2728-2733    -16380.3   5081    186%
80.0   -16379.6   2727-2737    -16380.3   5137    188%

Time for 1000 moves (fake moves)

Cutoff  Sire(494)              ProtoMS2.1(725)    Relative speed
        cljff     intercljff                     cljff    intercljff
5.0     701-708    710-720     501                 71%     70%
10.0   1408-1420  1332-1345    1356                96%    101%
15.0   3158-3164  2963-2971    3693               117%    124%
20.0   6014-6025  5517-5528    8044               134%    146%
40.0   8004-8011  7207-7223    12103              151%    168%
80.0   7926-7936  7313-7336    12201              154%    167%

I think that the periodic boundaries are now about as fast as they 
are going to get. I base this on the time to calculate the energy
for the 80.0 A cutoff, which is 2529ms for gas-phase boundaries, and 
2732ms for periodic (a difference of only 200ms). Since there is by
necessity some cost for periodic boundaries, I would say that 200ms
is a reasonable cost for all 1679*1678/2 interactions (so periodic
boundaries cost 0.14ns per water-water interaction).

More testing: 9/3/07

Box of water, periodic boundaries, time to complete 1000 MC moves
(Sire is still using semi-fake moves, though is calculating the 
 change in energy correctly)

Test conducted on my work desktop (PentiumD 3.4GHz)

(version numbers for Sire are the gcode respository numbers)
 
Cutoff  Sire(209)              ProtoMS2.1(724)    Relative speed
        cljff     ljff                           cljff    ljff
5.0     1269      1378         448                35%     32%
10.0    1717      1871         892                51%     47%
15.0    2845      2990         1832               64%     61%
20.0    4601      5036         3350               72%     66%
40.0    5660      6256         8772              154%    140%
80.0    5824      6413         9665              165%    150%

These results show that Sire is within the same ballpark as ProtoMS,
but that optimisation work still needs to be performed. In addition,
this also suggests that there may be some inefficiencies in the 
cutoff with Sire, as it rapidly overtakes ProtoMS when fewer
interactions are discarded. Also, LJFF is consistently slower than
CLJFF despite it doing less work! (though LJFF does not use hard
coded geometric combining rules)

Part of the reason for the poor performance is that the energy calculations
are much slower than they could be. My optimised Tip4PFF can calculate
the energy for the water box in 250ms, while InterCLJFF takes 1055ms and
InterLJFF takes 1182ms. There is thus a theoretical 4x improvement
possible (though all of this will not be realised in a general forcefield).

 So there is light at the end of the tunnel!

=================
================= June 20th 2008
=================

Things have come a long way. I am now running Sire version 601 (google code)
running test/speed/water_energy_speed.py (same water box, periodic boundaries
and 15 A cutoff, 0.5 A feather). The results are;

Read in 1679 molecules!
Parameterised all of the water molecules (in 933 ms)!

This machine can run at; 938.0 MFLOPS for sum, 876.3 MFLOPS for sum+product,
276.3 MFLOPS for sum+quotient and 273.4 MFLOPS for sum+product+sqrt.

-16364.5 M L^2 T-2
-16364.5444965
Took 519 ms.  Speed is at least 379.4 MFLOPS
(This is 138.74 % of the benchmark  (137.29 %, 40.45 %, 43.29 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 516 ms.  Speed is at least 381.6 MFLOPS
(This is 139.55 % of the benchmark  (138.09 %, 40.68 %, 43.55 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 516 ms.  Speed is at least 381.6 MFLOPS
(This is 139.55 % of the benchmark  (138.09 %, 40.68 %, 43.55 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 514 ms.  Speed is at least 383.1 MFLOPS
(This is 140.09 % of the benchmark  (138.62 %, 40.84 %, 43.72 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 515 ms.  Speed is at least 382.3 MFLOPS
(This is 139.82 % of the benchmark  (138.35 %, 40.76 %, 43.63 %))
Done!

When running on both cores I get;

Read in 1679 molecules!
Parameterised all of the water molecules (in 937 ms)!

This machine can run at; 1850.0 MFLOPS for sum, 1800.0 MFLOPS for sum+product,
548.9 MFLOPS for sum+quotient and 524.0 MFLOPS for sum+product+sqrt.

-16364.5 M L^2 T-2
-16364.5444965
Took 377 ms.  Speed is at least 522.3 MFLOPS
(This is 99.68 % of the benchmark  (95.15 %, 28.23 %, 29.02 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 378 ms.  Speed is at least 520.9 MFLOPS
(This is 99.42 % of the benchmark  (94.90 %, 28.16 %, 28.94 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 378 ms.  Speed is at least 520.9 MFLOPS
(This is 99.42 % of the benchmark  (94.90 %, 28.16 %, 28.94 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 385 ms.  Speed is at least 511.4 MFLOPS
(This is 97.61 % of the benchmark  (93.18 %, 27.65 %, 28.41 %))
-16364.5 M L^2 T-2
-16364.5444965
Took 377 ms.  Speed is at least 522.3 MFLOPS
(This is 99.68 % of the benchmark  (95.15 %, 28.23 %, 29.02 %))
Done!

(for comparison, ProtoMS 2.1 gives the same energy in Sire compatibility mode,
in a time of 1353 ms, and an energy of -16357.3661 in a time of 850 ms in 
normal mode)

(note also that the measured speed of dual core sum (1.8 GFLOPS) is consistent
with the 3.2 GFLOPS I expect for this processor - given that I am working with
doubles that take twice as long to process)


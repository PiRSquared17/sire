// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "RDFMonitor.pypp.hpp"
#include "boost/python.hpp"
#include "siresystem_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireFF/ffgroupid.h"

namespace bp = boost::python;

SireSystem::RDFMonitor __copy__(const SireSystem::RDFMonitor &other){ return SireSystem::RDFMonitor(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireSystem::RDFMonitor&){ return "SireSystem::RDFMonitor";}

void register_RDFMonitor_class(){

    bp::class_< SireSystem::RDFMonitor, bp::bases< SireSystem::SystemMonitorBase > >( "RDFMonitor" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::Molecule const &, SireMol::MoleculeGroup const & >(( bp::arg("molecule"), bp::arg("molecules") )) )    
        .def( 
            "addRDF"
            , (void ( ::SireSystem::RDFMonitor::* )( ::QSet<SireMol::AtomIndex> const &,::QSet<SireMol::AtomIndex> const &,::SireSystem::RDF const & ) )( &::SireSystem::RDFMonitor::addRDF )
            , ( bp::arg("atoms0"), bp::arg("atoms1"), bp::arg("rdf")=::SireSystem::RDF( 0.0, 1.0e+1, 100 ) ) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireSystem::RDFMonitor::* )( ::SireSystem::QuerySystem const & ) const)( &::SireSystem::RDFMonitor::assertCompatibleWith )
            , ( bp::arg("system") ) )    
        .def( 
            "clear"
            , (void ( ::SireSystem::RDFMonitor::* )(  ) )( &::SireSystem::RDFMonitor::clear ) )    
        .def( 
            "getRDF"
            , (::SireSystem::RDF const & ( ::SireSystem::RDFMonitor::* )( ::QSet<SireMol::AtomIndex> const &,::QSet<SireMol::AtomIndex> const & ) const)( &::SireSystem::RDFMonitor::getRDF )
            , ( bp::arg("atoms0"), bp::arg("atoms1") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "group"
            , (::SireMol::MoleculeGroup const & ( ::SireSystem::RDFMonitor::* )(  ) const)( &::SireSystem::RDFMonitor::group )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "molecule"
            , (::SireMol::Molecule const & ( ::SireSystem::RDFMonitor::* )(  ) const)( &::SireSystem::RDFMonitor::molecule )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "monitor"
            , (void ( ::SireSystem::RDFMonitor::* )( ::SireSystem::QuerySystem & ) )( &::SireSystem::RDFMonitor::monitor )
            , ( bp::arg("system") ) )    
        .def( bp::self + bp::self )    
        .def( bp::self += bp::self )    
        .def( 
            "rdfs"
            , (::QList<boost::tuples::tuple<SireSystem::detail::AtomPairs, SireSystem::RDF, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type> > ( ::SireSystem::RDFMonitor::* )(  ) const)( &::SireSystem::RDFMonitor::rdfs ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireSystem::RDFMonitor::typeName ) )    
        .def( 
            "value"
            , (double ( ::SireSystem::RDFMonitor::* )(  ) const)( &::SireSystem::RDFMonitor::value ) )    
        .def( 
            "what"
            , (char const * ( ::SireSystem::RDFMonitor::* )(  ) const)( &::SireSystem::RDFMonitor::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireSystem::RDFMonitor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireSystem::RDFMonitor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

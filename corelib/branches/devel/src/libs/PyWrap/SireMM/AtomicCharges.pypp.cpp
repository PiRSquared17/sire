// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomicCharges.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::AtomicCharges __copy__(const SireMM::AtomicCharges &other){ return SireMM::AtomicCharges(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::AtomicCharges&){ return "SireMM::AtomicCharges";}

void register_AtomicCharges_class(){

    bp::class_< SireMM::AtomicCharges, bp::bases< SireMol::AtomicProperties > >( "AtomicCharges" )    
        .def( bp::init< >() )    
        .def( bp::init< QVector<QVector<SireMM::ChargeParameter> > const & >(( bp::arg("charges") )) )    
        .def( bp::init< QVector<SireMM::ChargeParameter> const & >(( bp::arg("charges") )) )    
        .def( bp::init< SireBase::Property const & >(( bp::arg("property") )) )    
        .def( 
            "isCompatibleWith"
            , (bool ( ::SireMM::AtomicCharges::* )( ::SireMol::MoleculeInfo const & ) const)( &::SireMM::AtomicCharges::isCompatibleWith )
            , ( bp::arg("molinfo") ) )    
        .def( 
            "mask"
            , (::SireBase::Property ( ::SireMM::AtomicCharges::* )( ::SireMol::AtomSelection const & ) const)( &::SireMM::AtomicCharges::mask )
            , ( bp::arg("selected_atoms") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::AtomicCharges::typeName ) )    
        .def( 
            "value"
            , (::QVariant ( ::SireMM::AtomicCharges::* )( ::SireMol::CGAtomID const & ) const)( &::SireMM::AtomicCharges::value )
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::AtomicCharges::* )(  ) const)( &::SireMM::AtomicCharges::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::AtomicCharges >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::AtomicCharges >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

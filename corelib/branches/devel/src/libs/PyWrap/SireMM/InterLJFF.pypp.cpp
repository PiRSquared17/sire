// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterLJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::InterLJFF __copy__(const SireMM::InterLJFF &other){ return SireMM::InterLJFF(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_InterLJFF_class(){

    { //::SireMM::InterLJFF
        typedef bp::class_< SireMM::InterLJFF, bp::bases< SireMM::LJFF > > InterLJFF_exposer_t;
        InterLJFF_exposer_t InterLJFF_exposer = InterLJFF_exposer_t( "InterLJFF" );
        bp::scope InterLJFF_scope( InterLJFF_exposer );
        bp::class_< SireMM::InterLJFF::Components, bp::bases< SireMM::LJFF::Components > >( "Components" )    
            .def( bp::init< >() )    
            .def( bp::init< SireFF::FFBase const &, SireCAS::Symbols const & >(( bp::arg("ffbase"), bp::arg("symbols") )) );
        bp::class_< SireMM::InterLJFF::Groups, bp::bases< SireMM::LJFF::Groups > >( "Groups" )    
            .def( bp::init< >() );
        bp::class_< SireMM::InterLJFF::Parameters, bp::bases< SireMM::LJFF::Parameters > >( "Parameters" )    
            .def( bp::init< >() );
        InterLJFF_exposer.def( bp::init< >() );
        InterLJFF_exposer.def( bp::init< SireVol::Space const &, SireMM::SwitchingFunction const & >(( bp::arg("space"), bp::arg("switchingfunction") )) );
        { //::SireMM::InterLJFF::add
        
            typedef bool ( ::SireMM::InterLJFF::*add_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterLJFF::add )
                , ( bp::arg("mol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterLJFF::change
        
            typedef bool ( ::SireMM::InterLJFF::*change_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterLJFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterLJFF::contains
        
            typedef bool ( ::SireMM::InterLJFF::*contains_function_type )( ::SireMol::PartialMolecule const & ) const;
            
            InterLJFF_exposer.def( 
                "contains"
                , contains_function_type( &::SireMM::InterLJFF::contains )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterLJFF::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireMM::InterLJFF::*contents_function_type )(  ) const;
            
            InterLJFF_exposer.def( 
                "contents"
                , contents_function_type( &::SireMM::InterLJFF::contents ) );
        
        }
        { //::SireMM::InterLJFF::groupsReferringTo
        
            typedef ::QSet<SireFF::FFBase::Group> ( ::SireMM::InterLJFF::*groupsReferringTo_function_type )( ::SireMol::MoleculeID ) const;
            
            InterLJFF_exposer.def( 
                "groupsReferringTo"
                , groupsReferringTo_function_type( &::SireMM::InterLJFF::groupsReferringTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterLJFF::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireMM::InterLJFF::*molecule_function_type )( ::SireMol::MoleculeID ) const;
            
            InterLJFF_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireMM::InterLJFF::molecule )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterLJFF::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireMM::InterLJFF::*moleculeIDs_function_type )(  ) const;
            
            InterLJFF_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireMM::InterLJFF::moleculeIDs ) );
        
        }
        { //::SireMM::InterLJFF::mustNowRecalculateFromScratch
        
            typedef void ( ::SireMM::InterLJFF::*mustNowRecalculateFromScratch_function_type )(  ) ;
            
            InterLJFF_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_type( &::SireMM::InterLJFF::mustNowRecalculateFromScratch ) );
        
        }
        { //::SireMM::InterLJFF::refersTo
        
            typedef bool ( ::SireMM::InterLJFF::*refersTo_function_type )( ::SireMol::MoleculeID ) const;
            
            InterLJFF_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireMM::InterLJFF::refersTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterLJFF::remove
        
            typedef bool ( ::SireMM::InterLJFF::*remove_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterLJFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterLJFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterLJFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterLJFF::typeName ) );
        
        }
        { //::SireMM::InterLJFF::what
        
            typedef char const * ( ::SireMM::InterLJFF::*what_function_type )(  ) const;
            
            InterLJFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterLJFF::what ) );
        
        }
        InterLJFF_exposer.staticmethod( "typeName" );
        InterLJFF_exposer.def( "__copy__", &__copy__);
        InterLJFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::InterLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterLJFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::InterLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterLJFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::InterLJFF > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CoordGroupBase.pypp.hpp"
#include "boost/python.hpp"
#include "sirevol_headers.h"
#include "SireMaths/vector.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"

namespace bp = boost::python;

const char* pvt_get_name(const SireVol::CoordGroupBase&){ return "SireVol::CoordGroupBase";}

void register_CoordGroupBase_class(){

    bp::class_< SireVol::CoordGroupBase, boost::noncopyable >( "CoordGroupBase", bp::no_init )    
        .def( 
            "aaBox"
            , (::SireVol::AABox const & ( ::SireVol::CoordGroupBase::* )(  ) const)( &::SireVol::CoordGroupBase::aaBox )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "assertSameSize"
            , (void ( ::SireVol::CoordGroupBase::* )( ::QVector<SireMaths::Vector> const & ) const)( &::SireVol::CoordGroupBase::assertSameSize )
            , ( bp::arg("coordinates") ) )    
        .def( 
            "assertSameSize"
            , (void ( ::SireVol::CoordGroupBase::* )( ::SireVol::CoordGroupBase const & ) const)( &::SireVol::CoordGroupBase::assertSameSize )
            , ( bp::arg("other") ) )    
        .def( 
            "assertValidIndex"
            , (void ( ::SireVol::CoordGroupBase::* )( ::quint32 ) const)( &::SireVol::CoordGroupBase::assertValidIndex )
            , ( bp::arg("i") ) )    
        .def( 
            "at"
            , (::SireMaths::Vector const & ( ::SireVol::CoordGroupBase::* )( ::quint32 ) const)( &::SireVol::CoordGroupBase::at )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "count"
            , (::quint32 ( ::SireVol::CoordGroupBase::* )(  ) const)( &::SireVol::CoordGroupBase::count ) )    
        .def( 
            "isEmpty"
            , (bool ( ::SireVol::CoordGroupBase::* )(  ) const)( &::SireVol::CoordGroupBase::isEmpty ) )    
        .def( 
            "maybeDifferent"
            , (bool ( ::SireVol::CoordGroupBase::* )( ::SireVol::CoordGroupBase const & ) const)( &::SireVol::CoordGroupBase::maybeDifferent )
            , ( bp::arg("other") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::SireMaths::Vector const & ( ::SireVol::CoordGroupBase::* )( ::quint32 ) const)( &::SireVol::CoordGroupBase::operator[] )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "size"
            , (::quint32 ( ::SireVol::CoordGroupBase::* )(  ) const)( &::SireVol::CoordGroupBase::size ) )    
        .def( "__str__", &pvt_get_name);

}

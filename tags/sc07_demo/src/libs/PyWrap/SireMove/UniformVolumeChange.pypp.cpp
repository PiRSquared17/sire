// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "UniformVolumeChange.pypp.hpp"
#include "boost/python.hpp"
#include "siremove_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/moleculegroup.h"
#include "SireSystem/simsystem.h"

namespace bp = boost::python;

SireMove::UniformVolumeChange __copy__(const SireMove::UniformVolumeChange &other){ return SireMove::UniformVolumeChange(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMove::UniformVolumeChange&){ return "SireMove::UniformVolumeChange";}

void register_UniformVolumeChange_class(){

    bp::class_< SireMove::UniformVolumeChange, bp::bases< SireMove::VolChangingFunctionBase > >( "UniformVolumeChange" )    
        .def( bp::init< >() )    
        .def( bp::init< SireUnits::Dimension::Volume >(( bp::arg("delta") )) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireMove::UniformVolumeChange::* )( ::SireVol::Space const & ) const)( &::SireMove::UniformVolumeChange::assertCompatibleWith )
            , ( bp::arg("space") ) )    
        .def( 
            "change"
            , (::SireVol::Space ( ::SireMove::UniformVolumeChange::* )( ::SireVol::Space const &,::SireMaths::RanGenerator ) const)( &::SireMove::UniformVolumeChange::change )
            , ( bp::arg("old_space"), bp::arg("generator")=::SireMaths::RanGenerator( ) ) )    
        .def( 
            "maximumVolumeChange"
            , (::SireUnits::Dimension::Volume ( ::SireMove::UniformVolumeChange::* )(  ) const)( &::SireMove::UniformVolumeChange::maximumVolumeChange ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMove::UniformVolumeChange::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMove::UniformVolumeChange::* )(  ) const)( &::SireMove::UniformVolumeChange::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMove::UniformVolumeChange >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMove::UniformVolumeChange >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

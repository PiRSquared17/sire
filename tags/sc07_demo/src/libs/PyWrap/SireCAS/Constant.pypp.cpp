// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Constant.pypp.hpp"
#include "boost/python.hpp"
#include "sirecas_headers.h"

namespace bp = boost::python;

SireCAS::Constant __copy__(const SireCAS::Constant &other){ return SireCAS::Constant(other); }

#include "SirePy/str.hpp"

void register_Constant_class(){

    bp::class_< SireCAS::Constant, bp::bases< SireCAS::ExBase > >( "Constant" )    
        .def( bp::init< >() )    
        .def( 
            "children"
            , (::SireCAS::Expressions ( ::SireCAS::Constant::* )(  ) const)( &::SireCAS::Constant::children ) )    
        .def( 
            "differentiate"
            , (::SireCAS::Expression ( ::SireCAS::Constant::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::Constant::differentiate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "evaluate"
            , (double ( ::SireCAS::Constant::* )( ::SireCAS::Values const & ) const)( &::SireCAS::Constant::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "evaluate"
            , (::SireMaths::Complex ( ::SireCAS::Constant::* )( ::SireCAS::ComplexValues const & ) const)( &::SireCAS::Constant::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "functions"
            , (::SireCAS::Functions ( ::SireCAS::Constant::* )(  ) const)( &::SireCAS::Constant::functions ) )    
        .def( 
            "hash"
            , (::uint ( ::SireCAS::Constant::* )(  ) const)( &::SireCAS::Constant::hash ) )    
        .def( 
            "integrate"
            , (::SireCAS::Expression ( ::SireCAS::Constant::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::Constant::integrate )
            , ( bp::arg("symbol") ) )    
        .def( bp::self == bp::other< SireCAS::ExBase >() )    
        .def( 
            "substitute"
            , (::SireCAS::Expression ( ::SireCAS::Constant::* )( ::SireCAS::Identities const & ) const)( &::SireCAS::Constant::substitute )
            , ( bp::arg("identities") ) )    
        .def( 
            "symbols"
            , (::SireCAS::Symbols ( ::SireCAS::Constant::* )(  ) const)( &::SireCAS::Constant::symbols ) )    
        .def( 
            "toString"
            , (::QString ( ::SireCAS::Constant::* )(  ) const)( &::SireCAS::Constant::toString ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireCAS::Constant::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireCAS::Constant::* )(  ) const)( &::SireCAS::Constant::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &SirePy::__str__< ::SireCAS::Constant > );

}

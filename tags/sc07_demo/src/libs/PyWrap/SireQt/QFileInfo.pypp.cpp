// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QFileInfo.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

const char* pvt_get_name(const QFileInfo&){ return "QFileInfo";}

void register_QFileInfo_class(){

    bp::class_< QFileInfo >( "QFileInfo" )    
        .def( bp::init< >() )    
        .def( bp::init< QString const & >(( bp::arg("file") )) )    
        .def( bp::init< QFile const & >(( bp::arg("file") )) )    
        .def( bp::init< QDir const &, QString const & >(( bp::arg("dir"), bp::arg("file") )) )    
        .def( 
            "absoluteDir"
            , (::QDir ( ::QFileInfo::* )(  ) const)( &::QFileInfo::absoluteDir ) )    
        .def( 
            "absoluteFilePath"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::absoluteFilePath ) )    
        .def( 
            "absolutePath"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::absolutePath ) )    
        .def( 
            "baseName"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::baseName ) )    
        .def( 
            "caching"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::caching ) )    
        .def( 
            "canonicalFilePath"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::canonicalFilePath ) )    
        .def( 
            "canonicalPath"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::canonicalPath ) )    
        .def( 
            "completeBaseName"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::completeBaseName ) )    
        .def( 
            "completeSuffix"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::completeSuffix ) )    
        .def( 
            "created"
            , (::QDateTime ( ::QFileInfo::* )(  ) const)( &::QFileInfo::created ) )    
        .def( 
            "dir"
            , (::QDir ( ::QFileInfo::* )(  ) const)( &::QFileInfo::dir ) )    
        .def( 
            "exists"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::exists ) )    
        .def( 
            "fileName"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::fileName ) )    
        .def( 
            "filePath"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::filePath ) )    
        .def( 
            "group"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::group ) )    
        .def( 
            "groupId"
            , (::uint ( ::QFileInfo::* )(  ) const)( &::QFileInfo::groupId ) )    
        .def( 
            "isAbsolute"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isAbsolute ) )    
        .def( 
            "isDir"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isDir ) )    
        .def( 
            "isExecutable"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isExecutable ) )    
        .def( 
            "isFile"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isFile ) )    
        .def( 
            "isHidden"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isHidden ) )    
        .def( 
            "isReadable"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isReadable ) )    
        .def( 
            "isRelative"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isRelative ) )    
        .def( 
            "isRoot"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isRoot ) )    
        .def( 
            "isSymLink"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isSymLink ) )    
        .def( 
            "isWritable"
            , (bool ( ::QFileInfo::* )(  ) const)( &::QFileInfo::isWritable ) )    
        .def( 
            "lastModified"
            , (::QDateTime ( ::QFileInfo::* )(  ) const)( &::QFileInfo::lastModified ) )    
        .def( 
            "lastRead"
            , (::QDateTime ( ::QFileInfo::* )(  ) const)( &::QFileInfo::lastRead ) )    
        .def( 
            "makeAbsolute"
            , (bool ( ::QFileInfo::* )(  ) )( &::QFileInfo::makeAbsolute ) )    
        .def( bp::self != bp::self )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "owner"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::owner ) )    
        .def( 
            "ownerId"
            , (::uint ( ::QFileInfo::* )(  ) const)( &::QFileInfo::ownerId ) )    
        .def( 
            "path"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::path ) )    
        .def( 
            "permission"
            , (bool ( ::QFileInfo::* )( ::QFlags<QFile::Permission> ) const)( &::QFileInfo::permission )
            , ( bp::arg("permissions") ) )    
        .def( 
            "permissions"
            , (::QFlags<QFile::Permission> ( ::QFileInfo::* )(  ) const)( &::QFileInfo::permissions ) )    
        .def( 
            "readLink"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::readLink ) )    
        .def( 
            "refresh"
            , (void ( ::QFileInfo::* )(  ) )( &::QFileInfo::refresh ) )    
        .def( 
            "setCaching"
            , (void ( ::QFileInfo::* )( bool ) )( &::QFileInfo::setCaching )
            , ( bp::arg("on") ) )    
        .def( 
            "setFile"
            , (void ( ::QFileInfo::* )( ::QString const & ) )( &::QFileInfo::setFile )
            , ( bp::arg("file") ) )    
        .def( 
            "setFile"
            , (void ( ::QFileInfo::* )( ::QFile const & ) )( &::QFileInfo::setFile )
            , ( bp::arg("file") ) )    
        .def( 
            "setFile"
            , (void ( ::QFileInfo::* )( ::QDir const &,::QString const & ) )( &::QFileInfo::setFile )
            , ( bp::arg("dir"), bp::arg("file") ) )    
        .def( 
            "size"
            , (::qint64 ( ::QFileInfo::* )(  ) const)( &::QFileInfo::size ) )    
        .def( 
            "suffix"
            , (::QString ( ::QFileInfo::* )(  ) const)( &::QFileInfo::suffix ) )    
        .def( "__str__", &pvt_get_name);

}

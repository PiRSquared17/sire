// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "IDMajMinVersion.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

SireBase::IDMajMinVersion __copy__(const SireBase::IDMajMinVersion &other){ return SireBase::IDMajMinVersion(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_IDMajMinVersion_class(){

    bp::class_< SireBase::IDMajMinVersion >( "IDMajMinVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::Incremint * >(( bp::arg("idint") )) )    
        .def( bp::init< SireBase::IDTriple const & >(( bp::arg("other") )) )    
        .def( 
            "ID"
            , (::quint32 ( ::SireBase::IDMajMinVersion::* )(  ) const)( &::SireBase::IDMajMinVersion::ID ) )    
        .def( 
            "assertSameID"
            , (void ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::assertSameID )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameIDAndMajorVersion"
            , (void ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::assertSameIDAndMajorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameIDAndVersion"
            , (void ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::assertSameIDAndVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameMajorVersion"
            , (void ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::assertSameMajorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameMinorVersion"
            , (void ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::assertSameMinorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameVersion"
            , (void ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::assertSameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "incrementID"
            , (void ( ::SireBase::IDMajMinVersion::* )(  ) )( &::SireBase::IDMajMinVersion::incrementID ) )    
        .def( 
            "incrementMajor"
            , (void ( ::SireBase::IDMajMinVersion::* )(  ) )( &::SireBase::IDMajMinVersion::incrementMajor ) )    
        .def( 
            "incrementMinor"
            , (void ( ::SireBase::IDMajMinVersion::* )(  ) )( &::SireBase::IDMajMinVersion::incrementMinor ) )    
        .def( 
            "major"
            , (::quint32 ( ::SireBase::IDMajMinVersion::* )(  ) const)( &::SireBase::IDMajMinVersion::major ) )    
        .def( 
            "minor"
            , (::quint32 ( ::SireBase::IDMajMinVersion::* )(  ) const)( &::SireBase::IDMajMinVersion::minor ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "sameID"
            , (bool ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::sameID )
            , ( bp::arg("other") ) )    
        .def( 
            "sameIDAndMajorVersion"
            , (bool ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::sameIDAndMajorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameIDAndVersion"
            , (bool ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::sameIDAndVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameMajorVersion"
            , (bool ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::sameMajorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameMinorVersion"
            , (bool ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::sameMinorVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameVersion"
            , (bool ( ::SireBase::IDMajMinVersion::* )( ::SireBase::IDMajMinVersion const & ) const)( &::SireBase::IDMajMinVersion::sameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireBase::IDMajMinVersion::* )(  ) const)( &::SireBase::IDMajMinVersion::toString ) )    
        .def( 
            "version"
            , (::SireBase::Version const & ( ::SireBase::IDMajMinVersion::* )(  ) const)( &::SireBase::IDMajMinVersion::version )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireBase::IDMajMinVersion >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireBase::IDMajMinVersion >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireBase::IDMajMinVersion > );

}

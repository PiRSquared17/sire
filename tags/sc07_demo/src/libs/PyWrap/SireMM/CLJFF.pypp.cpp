// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CLJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_CLJFF_class(){

    { //::SireMM::CLJFF
        typedef bp::class_< SireMM::CLJFF, bp::bases< SireFF::FFBase >, boost::noncopyable > CLJFF_exposer_t;
        CLJFF_exposer_t CLJFF_exposer = CLJFF_exposer_t( "CLJFF", bp::no_init );
        bp::scope CLJFF_scope( CLJFF_exposer );
        bp::class_< SireMM::CLJFF::CLJEnergy >( "CLJEnergy", bp::no_init )    
            .def( 
                "coulomb"
                , (double ( ::SireMM::CLJFF::CLJEnergy::* )(  ) const)( &::SireMM::CLJFF::CLJEnergy::coulomb ) )    
            .def( 
                "lj"
                , (double ( ::SireMM::CLJFF::CLJEnergy::* )(  ) const)( &::SireMM::CLJFF::CLJEnergy::lj ) )    
            .def( bp::self += bp::self )    
            .def( bp::self -= bp::self );
        bp::class_< SireMM::CLJFF::CLJMolecule >( "CLJMolecule" )    
            .def( 
                "add"
                , (::SireMM::CLJFF::CLJMolecule ( ::SireMM::CLJFF::CLJMolecule::* )( ::SireMol::PartialMolecule const &,::QString const &,::QString const & ) const)( &::SireMM::CLJFF::CLJMolecule::add )
                , ( bp::arg("molecule"), bp::arg("chgproperty")=QString::null, bp::arg("ljproperty")=QString::null ) )    
            .def( 
                "change"
                , (::SireMM::CLJFF::CLJMolecule ( ::SireMM::CLJFF::CLJMolecule::* )( ::SireMol::PartialMolecule const &,::QString const &,::QString const & ) const)( &::SireMM::CLJFF::CLJMolecule::change )
                , ( bp::arg("molecule"), bp::arg("chgproperty")=QString::null, bp::arg("ljproperty")=QString::null ) )    
            .def( 
                "chargeProperty"
                , (::QString const & ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::chargeProperty )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "charges"
                , (::SireMM::AtomicCharges const & ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::charges )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "coordinates"
                , (::QVector<SireVol::CoordGroup> const & ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::coordinates )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "getDifferences"
                , (::SireMM::CLJFF::CLJMolecule ( ::SireMM::CLJFF::CLJMolecule::* )( ::SireMM::CLJFF::CLJMolecule const & ) const)( &::SireMM::CLJFF::CLJMolecule::getDifferences )
                , ( bp::arg("other") ) )    
            .def( 
                "isEmpty"
                , (bool ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::isEmpty ) )    
            .def( 
                "isWholeMolecule"
                , (bool ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::isWholeMolecule ) )    
            .def( 
                "ljParameters"
                , (::SireMM::AtomicLJs const & ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::ljParameters )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "ljProperty"
                , (::QString const & ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::ljProperty )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "molecule"
                , (::SireMol::PartialMolecule const & ( ::SireMM::CLJFF::CLJMolecule::* )(  ) const)( &::SireMM::CLJFF::CLJMolecule::molecule )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( bp::self != bp::self )    
            .def( bp::self == bp::self )    
            .def( 
                "remove"
                , (::SireMM::CLJFF::CLJMolecule ( ::SireMM::CLJFF::CLJMolecule::* )( ::SireMol::PartialMolecule const & ) const)( &::SireMM::CLJFF::CLJMolecule::remove )
                , ( bp::arg("molecule") ) );
        bp::class_< SireMM::CLJFF::ChangedCLJMolecule >( "ChangedCLJMolecule" )    
            .def( 
                "add"
                , (::SireMM::CLJFF::ChangedCLJMolecule ( ::SireMM::CLJFF::ChangedCLJMolecule::* )( ::SireMol::PartialMolecule const &,::QString const &,::QString const & ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::add )
                , ( bp::arg("molecule"), bp::arg("chgproperty")=QString::null, bp::arg("ljproperty")=QString::null ) )    
            .def( 
                "change"
                , (::SireMM::CLJFF::ChangedCLJMolecule ( ::SireMM::CLJFF::ChangedCLJMolecule::* )( ::SireMol::PartialMolecule const &,::QString const &,::QString const & ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::change )
                , ( bp::arg("molecule"), bp::arg("chgproperty")=QString::null, bp::arg("ljproperty")=QString::null ) )    
            .def( 
                "changedAll"
                , (bool ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::changedAll ) )    
            .def( 
                "isEmpty"
                , (bool ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::isEmpty ) )    
            .def( 
                "newMolecule"
                , (::SireMM::CLJFF::CLJMolecule const & ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::newMolecule )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "newParts"
                , (::SireMM::CLJFF::CLJMolecule const & ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::newParts )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "nothingChanged"
                , (bool ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::nothingChanged ) )    
            .def( 
                "oldMolecule"
                , (::SireMM::CLJFF::CLJMolecule const & ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::oldMolecule )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "oldParts"
                , (::SireMM::CLJFF::CLJMolecule const & ( ::SireMM::CLJFF::ChangedCLJMolecule::* )(  ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::oldParts )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( bp::self != bp::self )    
            .def( bp::self == bp::self )    
            .def( 
                "remove"
                , (::SireMM::CLJFF::ChangedCLJMolecule ( ::SireMM::CLJFF::ChangedCLJMolecule::* )( ::SireMol::PartialMolecule const & ) const)( &::SireMM::CLJFF::ChangedCLJMolecule::remove )
                , ( bp::arg("molecule") ) );
        bp::class_< SireMM::CLJFF::Components, bp::bases< SireFF::FFBase::Components > >( "Components" )    
            .def( 
                "coulomb"
                , (::SireFF::FFComponent const & ( ::SireMM::CLJFF::Components::* )(  ) const)( &::SireMM::CLJFF::Components::coulomb )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "describe_coulomb"
                , (::QString (*)(  ))( &::SireMM::CLJFF::Components::describe_coulomb ) )    
            .def( 
                "describe_lj"
                , (::QString (*)(  ))( &::SireMM::CLJFF::Components::describe_lj ) )    
            .def( 
                "lj"
                , (::SireFF::FFComponent const & ( ::SireMM::CLJFF::Components::* )(  ) const)( &::SireMM::CLJFF::Components::lj )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .staticmethod( "describe_coulomb" )    
            .staticmethod( "describe_lj" );
        bp::class_< SireMM::CLJFF::Groups, bp::bases< SireFF::FFBase::Groups > >( "Groups" );
        bp::class_< SireMM::CLJFF::Parameters, bp::bases< SireFF::FFBase::Parameters > >( "Parameters" )    
            .def( 
                "coulomb"
                , (::SireFF::ParameterName const & ( ::SireMM::CLJFF::Parameters::* )(  ) const)( &::SireMM::CLJFF::Parameters::coulomb )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "lj"
                , (::SireFF::ParameterName const & ( ::SireMM::CLJFF::Parameters::* )(  ) const)( &::SireMM::CLJFF::Parameters::lj )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def_readonly( "default_sources", SireMM::CLJFF::Parameters::default_sources );
        { //::SireMM::CLJFF::calculateEnergy
        
            typedef ::SireMM::CLJFF::CLJEnergy ( *calculateEnergy_function_type )( ::SireMM::CLJFF::CLJMolecule const &,::SireMM::CLJFF::CLJMolecule const &,::SireVol::Space const &,::SireMM::SwitchingFunction const &,::SireVol::DistMatrix &,::SireMM::CLJPairMatrix & );
            
            CLJFF_exposer.def( 
                "calculateEnergy"
                , calculateEnergy_function_type( &::SireMM::CLJFF::calculateEnergy )
                , ( bp::arg("mol0"), bp::arg("mol1"), bp::arg("space"), bp::arg("switchfunc"), bp::arg("distmatrix"), bp::arg("cljmatrix") ) );
        
        }
        { //::SireMM::CLJFF::calculateEnergy
        
            typedef ::SireMM::CLJFF::CLJEnergy ( *calculateEnergy_function_type )( ::SireMM::CLJFF::CLJMolecule const &,::SireVol::Space const &,::SireMM::SwitchingFunction const &,::SireVol::DistMatrix &,::SireMM::CLJPairMatrix & );
            
            CLJFF_exposer.def( 
                "calculateEnergy"
                , calculateEnergy_function_type( &::SireMM::CLJFF::calculateEnergy )
                , ( bp::arg("mol"), bp::arg("space"), bp::arg("switchfunc"), bp::arg("distmatrix"), bp::arg("cljmatrix") ) );
        
        }
        { //::SireMM::CLJFF::components
        
            typedef ::SireMM::CLJFF::Components const & ( ::SireMM::CLJFF::*components_function_type )(  ) const;
            
            CLJFF_exposer.def( 
                "components"
                , components_function_type( &::SireMM::CLJFF::components )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJFF::containsProperty
        
            typedef bool ( ::SireMM::CLJFF::*containsProperty_function_type )( ::QString const & ) const;
            
            CLJFF_exposer.def( 
                "containsProperty"
                , containsProperty_function_type( &::SireMM::CLJFF::containsProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireMM::CLJFF::getProperty
        
            typedef ::SireBase::Property ( ::SireMM::CLJFF::*getProperty_function_type )( ::QString const & ) const;
            
            CLJFF_exposer.def( 
                "getProperty"
                , getProperty_function_type( &::SireMM::CLJFF::getProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireMM::CLJFF::parameters
        
            typedef ::SireMM::CLJFF::Parameters const & ( ::SireMM::CLJFF::*parameters_function_type )(  ) const;
            
            CLJFF_exposer.def( 
                "parameters"
                , parameters_function_type( &::SireMM::CLJFF::parameters )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJFF::properties
        
            typedef ::QHash<QString,SireBase::Property> ( ::SireMM::CLJFF::*properties_function_type )(  ) const;
            
            CLJFF_exposer.def( 
                "properties"
                , properties_function_type( &::SireMM::CLJFF::properties ) );
        
        }
        { //::SireMM::CLJFF::setProperty
        
            typedef bool ( ::SireMM::CLJFF::*setProperty_function_type )( ::QString const &,::SireBase::Property const & ) ;
            
            CLJFF_exposer.def( 
                "setProperty"
                , setProperty_function_type( &::SireMM::CLJFF::setProperty )
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireMM::CLJFF::setSpace
        
            typedef bool ( ::SireMM::CLJFF::*setSpace_function_type )( ::SireVol::Space const & ) ;
            
            CLJFF_exposer.def( 
                "setSpace"
                , setSpace_function_type( &::SireMM::CLJFF::setSpace )
                , ( bp::arg("space") ) );
        
        }
        { //::SireMM::CLJFF::setSwitchingFunction
        
            typedef bool ( ::SireMM::CLJFF::*setSwitchingFunction_function_type )( ::SireMM::SwitchingFunction const & ) ;
            
            CLJFF_exposer.def( 
                "setSwitchingFunction"
                , setSwitchingFunction_function_type( &::SireMM::CLJFF::setSwitchingFunction )
                , ( bp::arg("switchfunc") ) );
        
        }
        { //::SireMM::CLJFF::space
        
            typedef ::SireVol::Space const & ( ::SireMM::CLJFF::*space_function_type )(  ) const;
            
            CLJFF_exposer.def( 
                "space"
                , space_function_type( &::SireMM::CLJFF::space )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::CLJFF::switchingFunction
        
            typedef ::SireMM::SwitchingFunction const & ( ::SireMM::CLJFF::*switchingFunction_function_type )(  ) const;
            
            CLJFF_exposer.def( 
                "switchingFunction"
                , switchingFunction_function_type( &::SireMM::CLJFF::switchingFunction )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        CLJFF_exposer.staticmethod( "calculateEnergy" );
        CLJFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::CLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::CLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CLJFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::CLJFF > );
    }

}

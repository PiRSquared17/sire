// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CheckPoint.pypp.hpp"
#include "boost/python.hpp"
#include "siresystem_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireFF/ffgroupid.h"

namespace bp = boost::python;

SireSystem::CheckPoint __copy__(const SireSystem::CheckPoint &other){ return SireSystem::CheckPoint(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireSystem::CheckPoint&){ return "SireSystem::CheckPoint";}

void register_CheckPoint_class(){

    bp::class_< SireSystem::CheckPoint >( "CheckPoint" )    
        .def( bp::init< >() )    
        .def( bp::init< SireSystem::System & >(( bp::arg("system") )) )    
        .def( bp::init< SireSystem::QuerySystem const & >(( bp::arg("system") )) )    
        .def( 
            "ID"
            , (::SireSystem::SystemID ( ::SireSystem::CheckPoint::* )(  ) const)( &::SireSystem::CheckPoint::ID ) )    
        .def( 
            "forceFields"
            , (::SireFF::ForceFields const & ( ::SireSystem::CheckPoint::* )(  ) const)( &::SireSystem::CheckPoint::forceFields )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "info"
            , (::SireSystem::SystemData const & ( ::SireSystem::CheckPoint::* )(  ) const)( &::SireSystem::CheckPoint::info )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "monitors"
            , (::SireSystem::SystemMonitors const & ( ::SireSystem::CheckPoint::* )(  ) const)( &::SireSystem::CheckPoint::monitors )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "version"
            , (::SireBase::Version const & ( ::SireSystem::CheckPoint::* )(  ) const)( &::SireSystem::CheckPoint::version )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireSystem::CheckPoint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireSystem::CheckPoint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

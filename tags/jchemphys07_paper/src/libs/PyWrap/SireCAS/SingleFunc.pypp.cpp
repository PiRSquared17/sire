// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "SingleFunc.pypp.hpp"
#include "boost/python.hpp"
#include "sirecas_headers.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_SingleFunc_class(){

    bp::class_< SireCAS::SingleFunc, bp::bases< SireCAS::ExBase >, boost::noncopyable >( "SingleFunc", bp::no_init )    
        .def( 
            "argument"
            , (::SireCAS::Expression const & ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::argument )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "children"
            , (::SireCAS::Expressions ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::children ) )    
        .def( 
            "collapse"
            , (::SireCAS::Expression ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::collapse ) )    
        .def( 
            "conjugate"
            , (::SireCAS::Expression ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::conjugate ) )    
        .def( 
            "differentiate"
            , (::SireCAS::Expression ( ::SireCAS::SingleFunc::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::SingleFunc::differentiate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "expand"
            , (::SireCAS::Expression ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::expand ) )    
        .def( 
            "functions"
            , (::SireCAS::Functions ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::functions ) )    
        .def( 
            "hash"
            , (::uint ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::hash ) )    
        .def( 
            "integrate"
            , (::SireCAS::Expression ( ::SireCAS::SingleFunc::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::SingleFunc::integrate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "isComplex"
            , (bool ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::isComplex ) )    
        .def( 
            "isCompound"
            , (bool ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::isCompound ) )    
        .def( 
            "isConstant"
            , (bool ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::isConstant ) )    
        .def( 
            "isFunction"
            , (bool ( ::SireCAS::SingleFunc::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::SingleFunc::isFunction )
            , ( bp::arg("symbol") ) )    
        .def( 
            "substitute"
            , (::SireCAS::Expression ( ::SireCAS::SingleFunc::* )( ::SireCAS::Identities const & ) const)( &::SireCAS::SingleFunc::substitute )
            , ( bp::arg("identities") ) )    
        .def( 
            "symbols"
            , (::SireCAS::Symbols ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::symbols ) )    
        .def( 
            "toString"
            , (::QString ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::toString ) )    
        .def( 
            "x"
            , (::SireCAS::Expression const & ( ::SireCAS::SingleFunc::* )(  ) const)( &::SireCAS::SingleFunc::x )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireCAS::SingleFunc >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireCAS::SingleFunc >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireCAS::SingleFunc > );

}

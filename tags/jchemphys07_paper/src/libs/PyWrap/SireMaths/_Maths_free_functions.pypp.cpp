// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Maths_free_functions.pypp.hpp"
#include "boost/python.hpp"
#include "siremaths_headers.h"

namespace bp = boost::python;

void register_free_functions(){

    { //::SireMaths::arccos
    
        typedef ::SireMaths::Complex ( *arccos_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arccos"
            , arccos_function_type( &::SireMaths::arccos )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccos_real
    
        typedef ::SireMaths::Complex ( *arccos_real_function_type )( double );
        
        bp::def( 
            "arccos_real"
            , arccos_real_function_type( &::SireMaths::arccos_real )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccosh
    
        typedef ::SireMaths::Complex ( *arccosh_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arccosh"
            , arccosh_function_type( &::SireMaths::arccosh )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccosh_real
    
        typedef ::SireMaths::Complex ( *arccosh_real_function_type )( double );
        
        bp::def( 
            "arccosh_real"
            , arccosh_real_function_type( &::SireMaths::arccosh_real )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccot
    
        typedef ::SireMaths::Complex ( *arccot_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arccot"
            , arccot_function_type( &::SireMaths::arccot )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccoth
    
        typedef ::SireMaths::Complex ( *arccoth_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arccoth"
            , arccoth_function_type( &::SireMaths::arccoth )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccsc
    
        typedef ::SireMaths::Complex ( *arccsc_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arccsc"
            , arccsc_function_type( &::SireMaths::arccsc )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccsc_real
    
        typedef ::SireMaths::Complex ( *arccsc_real_function_type )( double );
        
        bp::def( 
            "arccsc_real"
            , arccsc_real_function_type( &::SireMaths::arccsc_real )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arccsch
    
        typedef ::SireMaths::Complex ( *arccsch_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arccsch"
            , arccsch_function_type( &::SireMaths::arccsch )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arcsec
    
        typedef ::SireMaths::Complex ( *arcsec_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arcsec"
            , arcsec_function_type( &::SireMaths::arcsec )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arcsec_real
    
        typedef ::SireMaths::Complex ( *arcsec_real_function_type )( double );
        
        bp::def( 
            "arcsec_real"
            , arcsec_real_function_type( &::SireMaths::arcsec_real )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arcsech
    
        typedef ::SireMaths::Complex ( *arcsech_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arcsech"
            , arcsech_function_type( &::SireMaths::arcsech )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arcsin
    
        typedef ::SireMaths::Complex ( *arcsin_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arcsin"
            , arcsin_function_type( &::SireMaths::arcsin )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arcsin_real
    
        typedef ::SireMaths::Complex ( *arcsin_real_function_type )( double );
        
        bp::def( 
            "arcsin_real"
            , arcsin_real_function_type( &::SireMaths::arcsin_real )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arcsinh
    
        typedef ::SireMaths::Complex ( *arcsinh_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arcsinh"
            , arcsinh_function_type( &::SireMaths::arcsinh )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arctan
    
        typedef ::SireMaths::Complex ( *arctan_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arctan"
            , arctan_function_type( &::SireMaths::arctan )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arctanh
    
        typedef ::SireMaths::Complex ( *arctanh_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "arctanh"
            , arctanh_function_type( &::SireMaths::arctanh )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::arctanh_real
    
        typedef ::SireMaths::Complex ( *arctanh_real_function_type )( double );
        
        bp::def( 
            "arctanh_real"
            , arctanh_real_function_type( &::SireMaths::arctanh_real )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::areEqual
    
        typedef bool ( *areEqual_function_type )( double,double );
        
        bp::def( 
            "areEqual"
            , areEqual_function_type( &::SireMaths::areEqual )
            , ( bp::arg("val0"), bp::arg("val1") ) );
    
    }

    { //::SireMaths::areEqual
    
        typedef bool ( *areEqual_function_type )( double,double,double );
        
        bp::def( 
            "areEqual"
            , areEqual_function_type( &::SireMaths::areEqual )
            , ( bp::arg("val0"), bp::arg("val1"), bp::arg("epsilon") ) );
    
    }

    { //::SireMaths::cos
    
        typedef ::SireMaths::Complex ( *cos_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "cos"
            , cos_function_type( &::SireMaths::cos )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::cosh
    
        typedef ::SireMaths::Complex ( *cosh_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "cosh"
            , cosh_function_type( &::SireMaths::cosh )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::cot
    
        typedef ::SireMaths::Complex ( *cot_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "cot"
            , cot_function_type( &::SireMaths::cot )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::coth
    
        typedef ::SireMaths::Complex ( *coth_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "coth"
            , coth_function_type( &::SireMaths::coth )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::csc
    
        typedef ::SireMaths::Complex ( *csc_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "csc"
            , csc_function_type( &::SireMaths::csc )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::csch
    
        typedef ::SireMaths::Complex ( *csch_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "csch"
            , csch_function_type( &::SireMaths::csch )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::exp
    
        typedef ::SireMaths::Complex ( *exp_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "exp"
            , exp_function_type( &::SireMaths::exp )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::gcd
    
        typedef ::qint32 ( *gcd_function_type )( ::qint32,::qint32 );
        
        bp::def( 
            "gcd"
            , gcd_function_type( &::SireMaths::gcd )
            , ( bp::arg("n"), bp::arg("m") ) );
    
    }

    { //::SireMaths::invSqrt
    
        typedef float ( *invSqrt_function_type )( float );
        
        bp::def( 
            "invSqrt"
            , invSqrt_function_type( &::SireMaths::invSqrt )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::invSqrt
    
        typedef double ( *invSqrt_function_type )( double );
        
        bp::def( 
            "invSqrt"
            , invSqrt_function_type( &::SireMaths::invSqrt )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::isEven
    
        typedef bool ( *isEven_function_type )( int );
        
        bp::def( 
            "isEven"
            , isEven_function_type( &::SireMaths::isEven )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::isInteger
    
        typedef bool ( *isInteger_function_type )( double );
        
        bp::def( 
            "isInteger"
            , isInteger_function_type( &::SireMaths::isInteger )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::isOdd
    
        typedef bool ( *isOdd_function_type )( int );
        
        bp::def( 
            "isOdd"
            , isOdd_function_type( &::SireMaths::isOdd )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::isRational
    
        typedef bool ( *isRational_function_type )( double );
        
        bp::def( 
            "isRational"
            , isRational_function_type( &::SireMaths::isRational )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::isRational
    
        typedef bool ( *isRational_function_type )( double,int );
        
        bp::def( 
            "isRational"
            , isRational_function_type( &::SireMaths::isRational )
            , ( bp::arg("val"), bp::arg("maxdenom") ) );
    
    }

    { //::SireMaths::isZero
    
        typedef bool ( *isZero_function_type )( double const & );
        
        bp::def( 
            "isZero"
            , isZero_function_type( &::SireMaths::isZero )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::lcm
    
        typedef ::qint32 ( *lcm_function_type )( ::qint32,::qint32 );
        
        bp::def( 
            "lcm"
            , lcm_function_type( &::SireMaths::lcm )
            , ( bp::arg("n"), bp::arg("m") ) );
    
    }

    { //::SireMaths::log
    
        typedef ::SireMaths::Complex ( *log_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "log"
            , log_function_type( &::SireMaths::log )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::log10
    
        typedef ::SireMaths::Complex ( *log10_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "log10"
            , log10_function_type( &::SireMaths::log10 )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::log_b
    
        typedef ::SireMaths::Complex ( *log_b_function_type )( ::SireMaths::Complex const &,::SireMaths::Complex const & );
        
        bp::def( 
            "log_b"
            , log_b_function_type( &::SireMaths::log_b )
            , ( bp::arg("z"), bp::arg("b") ) );
    
    }

    { //::SireMaths::pow
    
        typedef ::SireMaths::Complex ( *pow_function_type )( double,::SireMaths::Complex const & );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("x"), bp::arg("z") ) );
    
    }

    { //::SireMaths::pow
    
        typedef ::SireMaths::Complex ( *pow_function_type )( ::SireMaths::Complex const &,::SireMaths::Rational const & );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("z"), bp::arg("r") ) );
    
    }

    { //::SireMaths::pow
    
        typedef ::SireMaths::Complex ( *pow_function_type )( ::SireMaths::Complex const &,int );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("z"), bp::arg("n") ) );
    
    }

    { //::SireMaths::pow
    
        typedef ::SireMaths::Complex ( *pow_function_type )( ::SireMaths::Complex const &,double );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("z"), bp::arg("x") ) );
    
    }

    { //::SireMaths::pow
    
        typedef ::SireMaths::Complex ( *pow_function_type )( ::SireMaths::Complex const &,::SireMaths::Complex const & );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("z"), bp::arg("a") ) );
    
    }

    { //::SireMaths::pow
    
        typedef double ( *pow_function_type )( double,::SireMaths::Rational const & );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("x"), bp::arg("power") ) );
    
    }

    { //::SireMaths::pow
    
        typedef double ( *pow_function_type )( double,double );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("x"), bp::arg("n") ) );
    
    }

    { //::SireMaths::pow
    
        typedef double ( *pow_function_type )( double,int );
        
        bp::def( 
            "pow"
            , pow_function_type( &::SireMaths::pow )
            , ( bp::arg("x"), bp::arg("n") ) );
    
    }

    { //::SireMaths::pow_10
    
        typedef double ( *pow_10_function_type )( double const & );
        
        bp::def( 
            "pow_10"
            , pow_10_function_type( &::SireMaths::pow_10 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_11
    
        typedef double ( *pow_11_function_type )( double const & );
        
        bp::def( 
            "pow_11"
            , pow_11_function_type( &::SireMaths::pow_11 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_12
    
        typedef double ( *pow_12_function_type )( double const & );
        
        bp::def( 
            "pow_12"
            , pow_12_function_type( &::SireMaths::pow_12 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_2
    
        typedef double ( *pow_2_function_type )( double const & );
        
        bp::def( 
            "pow_2"
            , pow_2_function_type( &::SireMaths::pow_2 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_3
    
        typedef double ( *pow_3_function_type )( double const & );
        
        bp::def( 
            "pow_3"
            , pow_3_function_type( &::SireMaths::pow_3 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_4
    
        typedef double ( *pow_4_function_type )( double const & );
        
        bp::def( 
            "pow_4"
            , pow_4_function_type( &::SireMaths::pow_4 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_5
    
        typedef double ( *pow_5_function_type )( double const & );
        
        bp::def( 
            "pow_5"
            , pow_5_function_type( &::SireMaths::pow_5 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_6
    
        typedef double ( *pow_6_function_type )( double const & );
        
        bp::def( 
            "pow_6"
            , pow_6_function_type( &::SireMaths::pow_6 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_7
    
        typedef double ( *pow_7_function_type )( double const & );
        
        bp::def( 
            "pow_7"
            , pow_7_function_type( &::SireMaths::pow_7 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_8
    
        typedef double ( *pow_8_function_type )( double const & );
        
        bp::def( 
            "pow_8"
            , pow_8_function_type( &::SireMaths::pow_8 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_9
    
        typedef double ( *pow_9_function_type )( double const & );
        
        bp::def( 
            "pow_9"
            , pow_9_function_type( &::SireMaths::pow_9 )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::pow_pvt
    
        typedef double ( *pow_pvt_function_type )( double,::SireMaths::Rational const & );
        
        bp::def( 
            "pow_pvt"
            , pow_pvt_function_type( &::SireMaths::pow_pvt )
            , ( bp::arg("x"), bp::arg("power") ) );
    
    }

    { //::SireMaths::pow_pvt
    
        typedef double ( *pow_pvt_function_type )( double,int );
        
        bp::def( 
            "pow_pvt"
            , pow_pvt_function_type( &::SireMaths::pow_pvt )
            , ( bp::arg("x"), bp::arg("n") ) );
    
    }

    { //::SireMaths::rotate
    
        typedef ::SireMaths::Vector ( *rotate_function_type )( ::SireMaths::Vector const &,::SireMaths::Matrix const &,::SireMaths::Vector const & );
        
        bp::def( 
            "rotate"
            , rotate_function_type( &::SireMaths::rotate )
            , ( bp::arg("input"), bp::arg("rotmat"), bp::arg("point") ) );
    
    }

    { //::SireMaths::sec
    
        typedef ::SireMaths::Complex ( *sec_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "sec"
            , sec_function_type( &::SireMaths::sec )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::sech
    
        typedef ::SireMaths::Complex ( *sech_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "sech"
            , sech_function_type( &::SireMaths::sech )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::sin
    
        typedef ::SireMaths::Complex ( *sin_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "sin"
            , sin_function_type( &::SireMaths::sin )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::sinh
    
        typedef ::SireMaths::Complex ( *sinh_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "sinh"
            , sinh_function_type( &::SireMaths::sinh )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::sqrt
    
        typedef double ( *sqrt_function_type )( double );
        
        bp::def( 
            "sqrt"
            , sqrt_function_type( &::SireMaths::sqrt )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::sqrt
    
        typedef ::SireMaths::Complex ( *sqrt_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "sqrt"
            , sqrt_function_type( &::SireMaths::sqrt )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::sqrt_real
    
        typedef ::SireMaths::Complex ( *sqrt_real_function_type )( double );
        
        bp::def( 
            "sqrt_real"
            , sqrt_real_function_type( &::SireMaths::sqrt_real )
            , ( bp::arg("x") ) );
    
    }

    { //::SireMaths::tan
    
        typedef ::SireMaths::Complex ( *tan_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "tan"
            , tan_function_type( &::SireMaths::tan )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::tanh
    
        typedef ::SireMaths::Complex ( *tanh_function_type )( ::SireMaths::Complex const & );
        
        bp::def( 
            "tanh"
            , tanh_function_type( &::SireMaths::tanh )
            , ( bp::arg("z") ) );
    
    }

    { //::SireMaths::toDouble
    
        typedef double ( *toDouble_function_type )( ::SireMaths::Rational const & );
        
        bp::def( 
            "toDouble"
            , toDouble_function_type( &::SireMaths::toDouble )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::toRational
    
        typedef ::SireMaths::Rational ( *toRational_function_type )( double );
        
        bp::def( 
            "toRational"
            , toRational_function_type( &::SireMaths::toRational )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::toRational
    
        typedef ::SireMaths::Rational ( *toRational_function_type )( double,int );
        
        bp::def( 
            "toRational"
            , toRational_function_type( &::SireMaths::toRational )
            , ( bp::arg("val"), bp::arg("maxdenom") ) );
    
    }

    { //::SireMaths::toString
    
        typedef ::QString ( *toString_function_type )( ::SireMaths::Rational const & );
        
        bp::def( 
            "toString"
            , toString_function_type( &::SireMaths::toString )
            , ( bp::arg("val") ) );
    
    }

    { //::SireMaths::uniformRanGenerator
    
        typedef ::SireMaths::UniformRand ( *uniformRanGenerator_function_type )( double,double,::uint32_t );
        
        bp::def( 
            "uniformRanGenerator"
            , uniformRanGenerator_function_type( &::SireMaths::uniformRanGenerator )
            , ( bp::arg("min"), bp::arg("max"), bp::arg("seed") ) );
    
    }

    { //::SireMaths::uniformRanGenerator
    
        typedef ::SireMaths::UniformRand ( *uniformRanGenerator_function_type )( double,double );
        
        bp::def( 
            "uniformRanGenerator"
            , uniformRanGenerator_function_type( &::SireMaths::uniformRanGenerator )
            , ( bp::arg("min")=0.0, bp::arg("max")=1.0e+0 ) );
    
    }

    { //::SireMaths::uniformRanInt64Generator
    
        typedef ::SireMaths::UniformRanInt64 ( *uniformRanInt64Generator_function_type )( ::qint64,::qint64,::uint32_t );
        
        bp::def( 
            "uniformRanInt64Generator"
            , uniformRanInt64Generator_function_type( &::SireMaths::uniformRanInt64Generator )
            , ( bp::arg("min"), bp::arg("max"), bp::arg("seed") ) );
    
    }

    { //::SireMaths::uniformRanInt64Generator
    
        typedef ::SireMaths::UniformRanInt64 ( *uniformRanInt64Generator_function_type )( ::qint64,::qint64 );
        
        bp::def( 
            "uniformRanInt64Generator"
            , uniformRanInt64Generator_function_type( &::SireMaths::uniformRanInt64Generator )
            , ( bp::arg("min")=(long long int)(0), bp::arg("max")=(long long int)(100) ) );
    
    }

    { //::SireMaths::uniformRanIntGenerator
    
        typedef ::SireMaths::UniformRanInt ( *uniformRanIntGenerator_function_type )( ::qint32,::qint32,::uint32_t );
        
        bp::def( 
            "uniformRanIntGenerator"
            , uniformRanIntGenerator_function_type( &::SireMaths::uniformRanIntGenerator )
            , ( bp::arg("min"), bp::arg("max"), bp::arg("seed") ) );
    
    }

    { //::SireMaths::uniformRanIntGenerator
    
        typedef ::SireMaths::UniformRanInt ( *uniformRanIntGenerator_function_type )( ::qint32,::qint32 );
        
        bp::def( 
            "uniformRanIntGenerator"
            , uniformRanIntGenerator_function_type( &::SireMaths::uniformRanIntGenerator )
            , ( bp::arg("min")=(int)(0), bp::arg("max")=(int)(100) ) );
    
    }

    { //::SireMaths::uniformRanUInt64Generator
    
        typedef ::SireMaths::UniformRanUInt64 ( *uniformRanUInt64Generator_function_type )( ::quint64,::quint64,::uint32_t );
        
        bp::def( 
            "uniformRanUInt64Generator"
            , uniformRanUInt64Generator_function_type( &::SireMaths::uniformRanUInt64Generator )
            , ( bp::arg("min"), bp::arg("max"), bp::arg("seed") ) );
    
    }

    { //::SireMaths::uniformRanUInt64Generator
    
        typedef ::SireMaths::UniformRanUInt64 ( *uniformRanUInt64Generator_function_type )( ::quint64,::quint64 );
        
        bp::def( 
            "uniformRanUInt64Generator"
            , uniformRanUInt64Generator_function_type( &::SireMaths::uniformRanUInt64Generator )
            , ( bp::arg("min")=(long long unsigned int)(0), bp::arg("max")=(long long unsigned int)(100) ) );
    
    }

    { //::SireMaths::uniformRanUIntGenerator
    
        typedef ::SireMaths::UniformRanUInt ( *uniformRanUIntGenerator_function_type )( ::quint32,::quint32,::uint32_t );
        
        bp::def( 
            "uniformRanUIntGenerator"
            , uniformRanUIntGenerator_function_type( &::SireMaths::uniformRanUIntGenerator )
            , ( bp::arg("min"), bp::arg("max"), bp::arg("seed") ) );
    
    }

    { //::SireMaths::uniformRanUIntGenerator
    
        typedef ::SireMaths::UniformRanUInt ( *uniformRanUIntGenerator_function_type )( ::quint32,::quint32 );
        
        bp::def( 
            "uniformRanUIntGenerator"
            , uniformRanUIntGenerator_function_type( &::SireMaths::uniformRanUIntGenerator )
            , ( bp::arg("min")=(unsigned int)(0), bp::arg("max")=(unsigned int)(100) ) );
    
    }

}

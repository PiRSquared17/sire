#!/bin/env python
# -*- coding: utf-8 -*-

import sys
import string

# get the config file as the first argument of the script
config_file = sys.argv[1]

# the name of the command file to write is the second argument
cmd_file = sys.argv[2]

def readConfig(file):
    lines = open(file, "r").readlines()

    params = {}

    for line in lines:
        line = line.lstrip().rstrip()

        if not line.startswith("#"):
            words = line.split("=")

            if len(words) > 1:
                key = words[0].lstrip().rstrip()
                value = string.join(words[1:], "=").lstrip().rstrip()

                params[key] = value

    return params

#Â read in all of the keys from this file
params = readConfig(config_file)

# ok - now we have all of the configuration options, let us write
# the zebedde input file

def getBool(value):
    value = value.lower()
    if (value == "true" or value == "on" or value == "yes"):
        return "on"
    else:
        return "no"

def getAngstroms(value):
    words = value.split()
    return words[0]

def getKelvin(value):
    words = value.split()
    return words[0]

def getCount(params, key):

    if key in params:
        return 1

    n = 1
    while True:
        numkey = "%s[%d]" % (key, n)
        if not numkey in params:
            return (n-1)
        else:
            n += 1

def writeConfig(file, params):
    print >>file,"title"
    print >>file,"Input file generated by Conspire for job '%s'" % params["job name"]

    print >>file,"initial_minimize template %s" % getBool(params["trajectory.initial minimize template"])
    print >>file,"initial_minimize in_pore %s" % getBool(params["trajectory.initial minimize in pore"])
    print >>file,"logfile off"
    print >>file,"centre %s" % getBool(params["seed.centre"])
    print >>file,"prob_test %s" % params["parameters.testing probability"]
    
    n = getCount(params, "fragments.concentration limits.element")
    
    if n > 0:
        print >>file,"\nconcentration %d" % n

        if n == 1:
            print >>file,params["fragments.concentration limits.element"]
        else:
            for i in range(1,n+1):
                print >>file,params["fragments.concentration limits.element[%d]" % i]

        print >>file,"\n",

    n = getCount(params, "fragments.forbidden bonds.forbidden")

    if n > 0:
        print >>file,"\nforbidden %d" % n

        if n == 1:
            print >>file,params["fragments.forbidden bonds.forbidden"]
        else:
            for i in range(1,n+1):
                print >>file,params["fragments.forbidden bonds.forbidden[%d]" % i]

        print >>file,"\n",

    print >>file,"weight hydrogen"
    print >>file,"1 0\n"

    print >>file,"minimizer internal\n"

    print >>file,"vdw_scale %s" % params["trajectory.vdw scale"]
    print >>file,"stop %s" % params["trajectory.stop"]

    print >>file,"\npore %s" % params["pore.filename"]
    print >>file,"convention %s" % params["pore.convention"]

    print >>file,"\nverbose %s" % getBool(params["parameters.verbose"])

    print >>file,"\nseed molecule %s" % params["seed.filename"]

    print >>file,"\nmodify attempts %s" % params["trajectory.number of attempts"]
    print >>file,"maxtemplates %s" % params["trajectory.number of templates"]

    print >>file,"\ncost_function %s" % params["parameters.cost function"]
    print >>file,"nb_cutoff %s" % getAngstroms(params["parameters.nonbonded cutoff"])
    print >>file,"shake step %s" % getAngstroms(params["parameters.maximum shake"])
    print >>file,"rock step %s" % params["parameters.maximum rock"]

    print >>file,"\nweights action"
    print >>file,"%s " % params["weights.build"],
    print >>file,"%s " % params["weights.rotate last bond"],
    print >>file,"%s " % params["weights.shake"],
    print >>file,"%s " % params["weights.rock"],
    print >>file,"%s " % params["weights.twist"],
    print >>file,"%s " % params["weights.ring formation"],
    print >>file,"%s " % params["weights.minimise gas phase"],
    print >>file,"%s" % params["weights.minimise in host"]

    print >>file,"end\n"

    print >>file,"temperature %s" % getKelvin(params["parameters.temperature"])
    print >>file,"\npeek %s" % params["trajectory.peek"]
    
    if "fragments.library" in params:
        print >>file,"library fragment %s" % params["fragments.library"]
    else:
        print >>file,"library fragment big_library.arc"

    print >>file,"\nanimate biosym %s_" % params["job name"].replace(" ","_")
    print >>file,"library template %s_" % params["job name"].replace(" ","_")

    if "fragments.forcefield" in params:
        print >>file,"library forcefield %s" % params["fragments.forcefield"]
    else:
        print >>file,"library forcefield new_pcff07.frc"

    print >>file,"\nweights fragments"
    print >>file,"%s " % params["fragments.weights.methane"],
    print >>file,"%s " % params["fragments.weights.ethane"],
    print >>file,"%s " % params["fragments.weights.benzene"],
    print >>file,"%s " % params["fragments.weights.ammonia"],
    print >>file,"%s " % params["fragments.weights.ammonium"],
    print >>file,"%s " % params["fragments.weights.propane"],
    print >>file,"%s " % params["fragments.weights.pyrrole"],
    print >>file,"%s " % params["fragments.weights.adamantane"],
    print >>file,"%s" % params["fragments.weights.cyclohexane"]
    print >>file,"end\n"

    n = getCount(params, "fragments.torsions.torsion")

    if n > 0:
        print >>file,"torsions %d" % n

        if n == 1:
            print >>file,params["fragments.torsions.torsion"]
        else:
            for i in range(1,n+1):
                print >>file,params["fragments.torsions.torsion[%d]" % i]

        print >>file,"\n",

FILE = open(cmd_file, "w")

writeConfig(FILE, params)

FILE.close()

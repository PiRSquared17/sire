// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "UniformSampler.pypp.hpp"
#include "boost/python.hpp"
#include "siremove_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/moleculegroup.h"
#include "SireSystem/simsystem.h"

namespace bp = boost::python;

void register_UniformSampler_class(){

    bp::class_< SireMove::UniformSampler, bp::bases< SireMove::SamplerBase > >( "UniformSampler" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMaths::RanGenerator const & >(( bp::arg("rangenerator") )) )    
        .def( 
            "probability"
            , (double ( ::SireMove::UniformSampler::* )( ::SireMol::MoleculeGroup const &,::SireMol::Molecule const & ) )( &::SireMove::UniformSampler::probability )
            , ( bp::arg("group"), bp::arg("molecule") ) )    
        .def( 
            "probability"
            , (double ( ::SireMove::UniformSampler::* )( ::SireMol::MoleculeGroup const &,::SireMol::Residue const & ) )( &::SireMove::UniformSampler::probability )
            , ( bp::arg("group"), bp::arg("residue") ) )    
        .def( 
            "probability"
            , (double ( ::SireMove::UniformSampler::* )( ::SireMol::MoleculeGroup const &,::SireMol::NewAtom const & ) )( &::SireMove::UniformSampler::probability )
            , ( bp::arg("group"), bp::arg("atom") ) )    
        .def( 
            "randomAtom"
            , (::boost::tuples::tuple<SireMol::NewAtom,double,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireMove::UniformSampler::* )( ::SireMol::MoleculeGroup const & ) )( &::SireMove::UniformSampler::randomAtom )
            , ( bp::arg("group") ) )    
        .def( 
            "randomMolecule"
            , (::boost::tuples::tuple<SireMol::Molecule,double,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireMove::UniformSampler::* )( ::SireMol::MoleculeGroup const & ) )( &::SireMove::UniformSampler::randomMolecule )
            , ( bp::arg("group") ) )    
        .def( 
            "randomResidue"
            , (::boost::tuples::tuple<SireMol::Residue,double,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireMove::UniformSampler::* )( ::SireMol::MoleculeGroup const & ) )( &::SireMove::UniformSampler::randomResidue )
            , ( bp::arg("group") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMove::UniformSampler::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMove::UniformSampler::* )(  ) const)( &::SireMove::UniformSampler::what ) )    
        .staticmethod( "typeName" );

}

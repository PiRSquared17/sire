// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MonteCarlo.pypp.hpp"
#include "boost/python.hpp"
#include "siremove_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/moleculegroup.h"
#include "SireSystem/simsystem.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMove::MonteCarlo&){ return "SireMove::MonteCarlo";}

void register_MonteCarlo_class(){

    bp::class_< SireMove::MonteCarlo, bp::bases< SireSystem::MoveBase >, boost::noncopyable >( "MonteCarlo", bp::no_init )    
        .def( 
            "acceptanceRatio"
            , (double ( ::SireMove::MonteCarlo::* )(  ) const)( &::SireMove::MonteCarlo::acceptanceRatio ) )    
        .def( 
            "clearMoveStatistics"
            , (void ( ::SireMove::MonteCarlo::* )(  ) )( &::SireMove::MonteCarlo::clearMoveStatistics ) )    
        .def( 
            "generator"
            , (::SireMaths::RanGenerator const & ( ::SireMove::MonteCarlo::* )(  ) const)( &::SireMove::MonteCarlo::generator )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "nAccepted"
            , (::quint32 ( ::SireMove::MonteCarlo::* )(  ) const)( &::SireMove::MonteCarlo::nAccepted ) )    
        .def( 
            "nAttempted"
            , (::quint32 ( ::SireMove::MonteCarlo::* )(  ) const)( &::SireMove::MonteCarlo::nAttempted ) )    
        .def( 
            "nRejected"
            , (::quint32 ( ::SireMove::MonteCarlo::* )(  ) const)( &::SireMove::MonteCarlo::nRejected ) )    
        .def( 
            "setGenerator"
            , (void ( ::SireMove::MonteCarlo::* )( ::SireMaths::RanGenerator const & ) )( &::SireMove::MonteCarlo::setGenerator )
            , ( bp::arg("generator") ) )    
        .def( 
            "setTemperature"
            , (void ( ::SireMove::MonteCarlo::* )( double ) )( &::SireMove::MonteCarlo::setTemperature )
            , ( bp::arg("temperature") ) )    
        .def( 
            "temperature"
            , (double ( ::SireMove::MonteCarlo::* )(  ) const)( &::SireMove::MonteCarlo::temperature ) )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMove::MonteCarlo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMove::MonteCarlo >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

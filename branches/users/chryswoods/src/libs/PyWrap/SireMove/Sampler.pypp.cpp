// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Sampler.pypp.hpp"
#include "boost/python.hpp"
#include "siremove_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/moleculegroup.h"
#include "SireSystem/simsystem.h"

namespace bp = boost::python;

void register_Sampler_class(){

    bp::class_< SireMove::Sampler >( "Sampler" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMove::SamplerBase const & >(( bp::arg("sampler") )) )    
        .def( 
            "generator"
            , (::SireMaths::RanGenerator const & ( ::SireMove::Sampler::* )(  ) const)( &::SireMove::Sampler::generator )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "probability"
            , (double ( ::SireMove::Sampler::* )( ::SireMol::MoleculeGroup const &,::SireMol::Molecule const & ) )( &::SireMove::Sampler::probability )
            , ( bp::arg("group"), bp::arg("molecule") ) )    
        .def( 
            "probability"
            , (double ( ::SireMove::Sampler::* )( ::SireMol::MoleculeGroup const &,::SireMol::Residue const & ) )( &::SireMove::Sampler::probability )
            , ( bp::arg("group"), bp::arg("residue") ) )    
        .def( 
            "probability"
            , (double ( ::SireMove::Sampler::* )( ::SireMol::MoleculeGroup const &,::SireMol::NewAtom const & ) )( &::SireMove::Sampler::probability )
            , ( bp::arg("group"), bp::arg("atom") ) )    
        .def( 
            "randomAtom"
            , (::boost::tuples::tuple<SireMol::NewAtom,double,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireMove::Sampler::* )( ::SireMol::MoleculeGroup const & ) )( &::SireMove::Sampler::randomAtom )
            , ( bp::arg("group") ) )    
        .def( 
            "randomMolecule"
            , (::boost::tuples::tuple<SireMol::Molecule,double,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireMove::Sampler::* )( ::SireMol::MoleculeGroup const & ) )( &::SireMove::Sampler::randomMolecule )
            , ( bp::arg("group") ) )    
        .def( 
            "randomResidue"
            , (::boost::tuples::tuple<SireMol::Residue,double,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireMove::Sampler::* )( ::SireMol::MoleculeGroup const & ) )( &::SireMove::Sampler::randomResidue )
            , ( bp::arg("group") ) )    
        .def( 
            "setGenerator"
            , (void ( ::SireMove::Sampler::* )( ::SireMaths::RanGenerator const & ) )( &::SireMove::Sampler::setGenerator )
            , ( bp::arg("generator") ) );

}

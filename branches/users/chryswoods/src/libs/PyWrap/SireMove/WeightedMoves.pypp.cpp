// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "WeightedMoves.pypp.hpp"
#include "boost/python.hpp"
#include "siremove_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/moleculegroup.h"
#include "SireSystem/simsystem.h"

namespace bp = boost::python;

SireMove::WeightedMoves __copy__(const SireMove::WeightedMoves &other){ return SireMove::WeightedMoves(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMove::WeightedMoves&){ return "SireMove::WeightedMoves";}

void register_WeightedMoves_class(){

    bp::class_< SireMove::WeightedMoves, bp::bases< SireSystem::MovesBase > >( "WeightedMoves", bp::init< bp::optional< SireMaths::RanGenerator const & > >(( bp::arg("generator")=::SireMaths::RanGenerator( ) )) )    
        .def( bp::init< QVector<boost::tuples::tuple<SireSystem::Move, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type> > const &, bp::optional< SireMaths::RanGenerator const & > >(( bp::arg("moves"), bp::arg("generator")=::SireMaths::RanGenerator( ) )) )    
        .def( 
            "add"
            , (void ( ::SireMove::WeightedMoves::* )( ::SireSystem::Move const &,double ) )( &::SireMove::WeightedMoves::add )
            , ( bp::arg("move"), bp::arg("weight")=1 ) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireMove::WeightedMoves::* )( ::SireSystem::QuerySystem & ) const)( &::SireMove::WeightedMoves::assertCompatibleWith )
            , ( bp::arg("system") ) )    
        .def( 
            "count"
            , (int ( ::SireMove::WeightedMoves::* )(  ) const)( &::SireMove::WeightedMoves::count ) )    
        .def( 
            "generator"
            , (::SireMaths::RanGenerator const & ( ::SireMove::WeightedMoves::* )(  ) const)( &::SireMove::WeightedMoves::generator )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "moves"
            , (::QList<SireSystem::Move> ( ::SireMove::WeightedMoves::* )(  ) const)( &::SireMove::WeightedMoves::moves ) )    
        .def( 
            "setEnergyComponent"
            , (void ( ::SireMove::WeightedMoves::* )( ::SireCAS::Symbol const & ) )( &::SireMove::WeightedMoves::setEnergyComponent )
            , ( bp::arg("symbol") ) )    
        .def( 
            "setGenerator"
            , (void ( ::SireMove::WeightedMoves::* )( ::SireMaths::RanGenerator const & ) )( &::SireMove::WeightedMoves::setGenerator )
            , ( bp::arg("generator") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMove::WeightedMoves::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMove::WeightedMoves::* )(  ) const)( &::SireMove::WeightedMoves::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMove::WeightedMoves >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMove::WeightedMoves >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

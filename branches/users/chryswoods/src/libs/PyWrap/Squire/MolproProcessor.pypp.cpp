// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MolproProcessor.pypp.hpp"
#include "boost/python.hpp"
#include "squire_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"

namespace bp = boost::python;

Squire::MolproProcessor __copy__(const Squire::MolproProcessor &other){ return Squire::MolproProcessor(other); }

const char* pvt_get_name(const Squire::MolproProcessor&){ return "Squire::MolproProcessor";}

void register_MolproProcessor_class(){

    bp::class_< Squire::MolproProcessor, bp::bases< SireFF::FFThreadProcessor > >( "MolproProcessor" )    
        .def( bp::init< >() )    
        .def( bp::init< SireFF::ForceField const & >(( bp::arg("forcefield") )) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::Squire::MolproProcessor::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::Squire::MolproProcessor::* )(  ) const)( &::Squire::MolproProcessor::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &pvt_get_name);

}

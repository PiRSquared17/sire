// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MolproCalculator.pypp.hpp"
#include "boost/python.hpp"
#include "squire_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"

namespace bp = boost::python;

const char* pvt_get_name(const Squire::MolproCalculator&){ return "Squire::MolproCalculator";}

void register_MolproCalculator_class(){

    bp::class_< Squire::MolproCalculator, bp::bases< SireFF::FFLocalCalculator >, boost::noncopyable >( "MolproCalculator", bp::no_init )    
        .def( 
            "calculateEnergy"
            , (void ( ::Squire::MolproCalculator::* )(  ) )( &::Squire::MolproCalculator::calculateEnergy ) )    
        .def( 
            "forceField"
            , (::SireFF::ForceField ( ::Squire::MolproCalculator::* )(  ) )( &::Squire::MolproCalculator::forceField ) )    
        .def( 
            "getEnergies"
            , (double ( ::Squire::MolproCalculator::* )( ::SireCAS::Values & ) )( &::Squire::MolproCalculator::getEnergies )
            , ( bp::arg("values") ) )    
        .def( 
            "setForceField"
            , (bool ( ::Squire::MolproCalculator::* )( ::SireFF::ForceField const & ) )( &::Squire::MolproCalculator::setForceField )
            , ( bp::arg("forcefield") ) )    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MatchAtomTypeData.pypp.hpp"
#include "boost/python.hpp"
#include "siredb_headers.h"
#include "SireCAS/function.h"
#include "SireCAS/expression.h"

namespace bp = boost::python;

#include "SirePy/str.hpp"

void register_MatchAtomTypeData_class(){

    bp::class_< SireDB::MatchAtomTypeData, bp::bases< SireDB::MatchData > >( "MatchAtomTypeData" )    
        .def( bp::init< >() )    
        .def( bp::init< SireDB::MatchMol const & >(( bp::arg("moldata") )) )    
        .def( bp::init< SireDB::MatchRes const & >(( bp::arg("resdata") )) )    
        .def( bp::init< SireDB::MatchAtomType const & >(( bp::arg("atmdata") )) )    
        .def( bp::init< SireDB::MatchMR const & >(( bp::arg("molresdata") )) )    
        .def( bp::init< SireDB::MatchMRData const & >(( bp::arg("molresdata") )) )    
        .def( bp::init< uint, SireDB::MatchRes const & >(( bp::arg("atm"), bp::arg("resdata") )) )    
        .def( bp::init< uint, SireDB::MatchAtomType const & >(( bp::arg("atm"), bp::arg("atmdata") )) )    
        .def( 
            "addMirroredTo"
            , (::SireDB::RelateID ( ::SireDB::MatchAtomTypeData::* )( ::SireDB::ParameterDB &,::uint ) const)( &::SireDB::MatchAtomTypeData::addMirroredTo )
            , ( bp::arg("db"), bp::arg("n") ) )    
        .def( 
            "addTo"
            , (::SireDB::RelateID ( ::SireDB::MatchAtomTypeData::* )( ::SireDB::ParameterDB &,::uint ) const)( &::SireDB::MatchAtomTypeData::addTo )
            , ( bp::arg("db"), bp::arg("n") ) )    
        .def( 
            "getMatch"
            , (::boost::tuples::tuple<SireDB::MatchMR,SireDB::MatchAtomType,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> ( ::SireDB::MatchAtomTypeData::* )( ::uint ) const)( &::SireDB::MatchAtomTypeData::getMatch )
            , ( bp::arg("atm") ) )    
        .def( 
            "hasAtomCriteria"
            , (bool ( ::SireDB::MatchAtomTypeData::* )(  ) const)( &::SireDB::MatchAtomTypeData::hasAtomCriteria ) )    
        .def( 
            "hasMoleculeCriteria"
            , (bool ( ::SireDB::MatchAtomTypeData::* )(  ) const)( &::SireDB::MatchAtomTypeData::hasMoleculeCriteria ) )    
        .def( 
            "hasResidueCriteria"
            , (bool ( ::SireDB::MatchAtomTypeData::* )(  ) const)( &::SireDB::MatchAtomTypeData::hasResidueCriteria ) )    
        .def( 
            "isEmpty"
            , (bool ( ::SireDB::MatchAtomTypeData::* )(  ) const)( &::SireDB::MatchAtomTypeData::isEmpty ) )    
        .def( 
            "nMatches"
            , (int ( ::SireDB::MatchAtomTypeData::* )(  ) const)( &::SireDB::MatchAtomTypeData::nMatches ) )    
        .def( 
            "set"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint,::boost::tuples::tuple<SireDB::MatchMR,SireDB::MatchAtomType,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type,boost::tuples::null_type> const & ) )( &::SireDB::MatchAtomTypeData::set )
            , ( bp::arg("atm"), bp::arg("match") ) )    
        .def( 
            "setAtomType"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::SireDB::AtomType const & ) )( &::SireDB::MatchAtomTypeData::setAtomType )
            , ( bp::arg("atomtype") ) )    
        .def( 
            "setAtomType"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::QString const & ) )( &::SireDB::MatchAtomTypeData::setAtomType )
            , ( bp::arg("atomtype") ) )    
        .def( 
            "setAtomType"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint,::SireDB::AtomType const & ) )( &::SireDB::MatchAtomTypeData::setAtomType )
            , ( bp::arg("atm"), bp::arg("atomtype") ) )    
        .def( 
            "setAtomType"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint,::QString const & ) )( &::SireDB::MatchAtomTypeData::setAtomType )
            , ( bp::arg("atm"), bp::arg("atomtype") ) )    
        .def( 
            "setElement"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::SireMol::Element const & ) )( &::SireDB::MatchAtomTypeData::setElement )
            , ( bp::arg("element") ) )    
        .def( 
            "setElement"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint ) )( &::SireDB::MatchAtomTypeData::setElement )
            , ( bp::arg("nprotons") ) )    
        .def( 
            "setElement"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::QString const & ) )( &::SireDB::MatchAtomTypeData::setElement )
            , ( bp::arg("element") ) )    
        .def( 
            "setElement"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint,::SireMol::Element const & ) )( &::SireDB::MatchAtomTypeData::setElement )
            , ( bp::arg("atm"), bp::arg("element") ) )    
        .def( 
            "setElement"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint,::uint ) )( &::SireDB::MatchAtomTypeData::setElement )
            , ( bp::arg("atm"), bp::arg("nprotons") ) )    
        .def( 
            "setElement"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint,::QString const & ) )( &::SireDB::MatchAtomTypeData::setElement )
            , ( bp::arg("atm"), bp::arg("element") ) )    
        .def( 
            "simplify"
            , (void ( ::SireDB::MatchAtomTypeData::* )( ::uint ) )( &::SireDB::MatchAtomTypeData::simplify )
            , ( bp::arg("maxatm") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireDB::MatchAtomTypeData::* )(  ) const)( &::SireDB::MatchAtomTypeData::toString ) )    
        .def( "__str__", &SirePy::__str__< ::SireDB::MatchAtomTypeData > );

}

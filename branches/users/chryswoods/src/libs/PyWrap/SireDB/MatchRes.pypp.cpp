// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MatchRes.pypp.hpp"
#include "boost/python.hpp"
#include "siredb_headers.h"
#include "SireCAS/function.h"
#include "SireCAS/expression.h"

namespace bp = boost::python;

SireDB::MatchRes __copy__(const SireDB::MatchRes &other){ return SireDB::MatchRes(other); }

const char* pvt_get_name(const SireDB::MatchRes&){ return "SireDB::MatchRes";}

void register_MatchRes_class(){

    bp::class_< SireDB::MatchRes >( "MatchRes" )    
        .def( bp::init< >() )    
        .def( 
            "addNoResResBond"
            , (void ( ::SireDB::MatchRes::* )( ::QString const & ) )( &::SireDB::MatchRes::addNoResResBond )
            , ( bp::arg("atom") ) )    
        .def( 
            "addNoResResBonds"
            , (void ( ::SireDB::MatchRes::* )( ::QSet<QString> const & ) )( &::SireDB::MatchRes::addNoResResBonds )
            , ( bp::arg("atoms") ) )    
        .def( 
            "addResResBond"
            , (void ( ::SireDB::MatchRes::* )( ::QString const & ) )( &::SireDB::MatchRes::addResResBond )
            , ( bp::arg("atom") ) )    
        .def( 
            "addResResBonds"
            , (void ( ::SireDB::MatchRes::* )( ::QSet<QString> const & ) )( &::SireDB::MatchRes::addResResBonds )
            , ( bp::arg("atoms") ) )    
        .def( 
            "alias"
            , (::QString ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::alias ) )    
        .def( 
            "hasAliasMatch"
            , (bool ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::hasAliasMatch ) )    
        .def( 
            "hasNameMatch"
            , (bool ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::hasNameMatch ) )    
        .def( 
            "hasNoResResBonds"
            , (bool ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::hasNoResResBonds ) )    
        .def( 
            "hasNumberMatch"
            , (bool ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::hasNumberMatch ) )    
        .def( 
            "hasResResBonds"
            , (bool ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::hasResResBonds ) )    
        .def( 
            "isEmpty"
            , (bool ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::isEmpty ) )    
        .def( 
            "name"
            , (::QString ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::name ) )    
        .def( 
            "noResResBonds"
            , (::QStringList ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::noResResBonds ) )    
        .def( 
            "number"
            , (::SireMol::ResNum ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::number ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "resResBonds"
            , (::QStringList ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::resResBonds ) )    
        .def( 
            "setAlias"
            , (void ( ::SireDB::MatchRes::* )( ::QString const & ) )( &::SireDB::MatchRes::setAlias )
            , ( bp::arg("alias") ) )    
        .def( 
            "setName"
            , (void ( ::SireDB::MatchRes::* )( ::QString const & ) )( &::SireDB::MatchRes::setName )
            , ( bp::arg("name") ) )    
        .def( 
            "setNumber"
            , (void ( ::SireDB::MatchRes::* )( ::SireMol::ResNum ) )( &::SireDB::MatchRes::setNumber )
            , ( bp::arg("number") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireDB::MatchRes::* )(  ) const)( &::SireDB::MatchRes::toString ) )    
        .def( 
            "toString"
            , (::QString ( ::SireDB::MatchRes::* )( ::uint ) const)( &::SireDB::MatchRes::toString )
            , ( bp::arg("atm") ) )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &pvt_get_name);

}

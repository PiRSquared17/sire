// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "_PartialMolecule__enums.pypp.hpp"
#include "_PartialMolecule__unnamed_enums.pypp.hpp"
#include "_PartialMolecule__classes.pypp.hpp"
#include "_PartialMolecule__memfuns0.pypp.hpp"
#include "_PartialMolecule__memfuns1.pypp.hpp"
#include "_PartialMolecule__memfuns2.pypp.hpp"
#include "_PartialMolecule__memfuns_virtual.pypp.hpp"
#include "_PartialMolecule__memfuns_pvirtual.pypp.hpp"
#include "_PartialMolecule__protected_memfuns.pypp.hpp"

namespace bp = boost::python;

SireMol::PartialMolecule __copy__(const SireMol::PartialMolecule &other){ return SireMol::PartialMolecule(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::PartialMolecule&){ return "SireMol::PartialMolecule";}

void register_PartialMolecule_class(){

{ //::SireMol::PartialMolecule
    typedef bp::class_< SireMol::PartialMolecule, bp::bases< SireMol::MoleculeView > > PartialMolecule_exposer_t;
    PartialMolecule_exposer_t PartialMolecule_exposer = PartialMolecule_exposer_t( "PartialMolecule" );
    bp::scope PartialMolecule_scope( PartialMolecule_exposer );
    PartialMolecule_exposer.def( bp::init< >() );
    PartialMolecule_exposer.def( bp::init< SireMol::Molecule const & >(( bp::arg("molecule") )) );
    PartialMolecule_exposer.def( bp::init< SireMol::Molecule const &, SireMol::AtomSelection const & >(( bp::arg("molecule"), bp::arg("selected_atoms") )) );
    PartialMolecule_exposer.def( bp::init< SireMol::Residue const & >(( bp::arg("residue") )) );
    PartialMolecule_exposer.def( bp::init< SireMol::NewAtom const & >(( bp::arg("atom") )) );
    register_PartialMolecule_memfuns0(PartialMolecule_exposer);
    register_PartialMolecule_memfuns1(PartialMolecule_exposer);
    PartialMolecule_exposer.def( bp::self != bp::self );
    PartialMolecule_exposer.def( bp::self == bp::self );
    register_PartialMolecule_memfuns2(PartialMolecule_exposer);
    PartialMolecule_exposer.def( "__copy__", &__copy__);
    PartialMolecule_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::PartialMolecule >,
                        bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    PartialMolecule_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::PartialMolecule >,
                        bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    PartialMolecule_exposer.def( "__str__", &pvt_get_name);
}

}

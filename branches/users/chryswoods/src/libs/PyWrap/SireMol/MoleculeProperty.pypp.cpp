// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MoleculeProperty.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::MoleculeProperty&){ return "SireMol::MoleculeProperty";}

void register_MoleculeProperty_class(){

    bp::class_< SireMol::MoleculeProperty, bp::bases< SireBase::PropertyBase >, boost::noncopyable >( "MoleculeProperty", bp::no_init )    
        .def( 
            "assertCompatibleWith"
            , &::SireMol::MoleculeProperty::assertCompatibleWith
            , ( bp::arg("molecule") ) )    
        .def( 
            "isCompatibleWith"
            , &::SireMol::MoleculeProperty::isCompatibleWith
            , ( bp::arg("molecule") ) )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::MoleculeProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::MoleculeProperty >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

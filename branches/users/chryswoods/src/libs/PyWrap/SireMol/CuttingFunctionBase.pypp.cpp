// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CuttingFunctionBase.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::CuttingFunctionBase&){ return "SireMol::CuttingFunctionBase";}

void register_CuttingFunctionBase_class(){

    bp::class_< SireMol::CuttingFunctionBase, boost::noncopyable >( "CuttingFunctionBase", bp::no_init )    
        .def( 
            "__call__"
            , &::SireMol::CuttingFunctionBase::operator()
            , ( bp::arg("atom"), bp::arg("moldata") ) )    
        .def( 
            "typeName"
            , &::SireMol::CuttingFunctionBase::typeName )    
        .def( 
            "what"
            , &::SireMol::CuttingFunctionBase::what )    
        .staticmethod( "typeName" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::CuttingFunctionBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::CuttingFunctionBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

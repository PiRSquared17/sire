// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MoleculeVersion.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_MoleculeVersion_class(){

    bp::class_< SireMol::MoleculeVersion >( "MoleculeVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< quint32, quint32 >(( bp::arg("major"), bp::arg("minor") )) )    
        .def( 
            "incrementMajor"
            , (void ( ::SireMol::MoleculeVersion::* )(  ) )( &::SireMol::MoleculeVersion::incrementMajor ) )    
        .def( 
            "incrementMinor"
            , (void ( ::SireMol::MoleculeVersion::* )(  ) )( &::SireMol::MoleculeVersion::incrementMinor ) )    
        .def( 
            "major"
            , (::quint32 ( ::SireMol::MoleculeVersion::* )(  ) const)( &::SireMol::MoleculeVersion::major ) )    
        .def( 
            "majorDifference"
            , (bool ( ::SireMol::MoleculeVersion::* )( ::SireMol::MoleculeVersion const & ) const)( &::SireMol::MoleculeVersion::majorDifference )
            , ( bp::arg("other") ) )    
        .def( 
            "minor"
            , (::quint32 ( ::SireMol::MoleculeVersion::* )(  ) const)( &::SireMol::MoleculeVersion::minor ) )    
        .def( 
            "minorDifference"
            , (bool ( ::SireMol::MoleculeVersion::* )( ::SireMol::MoleculeVersion const & ) const)( &::SireMol::MoleculeVersion::minorDifference )
            , ( bp::arg("other") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self >= bp::self )    
        .def( 
            "sameVersion"
            , (bool ( ::SireMol::MoleculeVersion::* )( ::SireMol::MoleculeVersion const & ) const)( &::SireMol::MoleculeVersion::sameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireMol::MoleculeVersion::* )(  ) const)( &::SireMol::MoleculeVersion::toString ) );

}

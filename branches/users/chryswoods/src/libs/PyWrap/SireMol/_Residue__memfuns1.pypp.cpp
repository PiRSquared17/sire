// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Residue__memfuns1.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_Residue_memfuns1( Residue_exposer_t& Residue_exposer ){

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Angle const &,::SireMaths::Angle const &,::SireMol::WeightFunction const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("angle"), bp::arg("delta"), bp::arg("func"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Dihedral const &,::SireMaths::Angle const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("dihedral"), bp::arg("delta"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Dihedral const &,::SireMaths::Angle const &,::SireMol::WeightFunction const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("dihedral"), bp::arg("delta"), bp::arg("func"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Bond const &,::SireMaths::Angle const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("bond"), bp::arg("delta"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Bond const &,::SireMaths::Angle const &,::SireMol::WeightFunction const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("bond"), bp::arg("delta"), bp::arg("func"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Improper const &,::SireMaths::Angle const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("improper"), bp::arg("delta"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Improper const &,::SireMaths::Angle const &,::SireMol::WeightFunction const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("improper"), bp::arg("delta"), bp::arg("func"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::connectivity
    
        typedef ::SireMol::ResidueBonds ( ::SireMol::Residue::*connectivity_function_type )(  ) const;
        
        Residue_exposer.def( 
            "connectivity"
            , connectivity_function_type( &::SireMol::Residue::connectivity ) );
    
    }

    { //::SireMol::Residue::contains
    
        typedef bool ( ::SireMol::Residue::*contains_function_type )( ::SireMol::CutGroupID ) const;
        
        Residue_exposer.def( 
            "contains"
            , contains_function_type( &::SireMol::Residue::contains )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Residue::contains
    
        typedef bool ( ::SireMol::Residue::*contains_function_type )( ::SireMol::AtomID ) const;
        
        Residue_exposer.def( 
            "contains"
            , contains_function_type( &::SireMol::Residue::contains )
            , ( bp::arg("atomid") ) );
    
    }

    { //::SireMol::Residue::contains
    
        typedef bool ( ::SireMol::Residue::*contains_function_type )( ::QString const & ) const;
        
        Residue_exposer.def( 
            "contains"
            , contains_function_type( &::SireMol::Residue::contains )
            , ( bp::arg("atomname") ) );
    
    }

    { //::SireMol::Residue::contains
    
        typedef bool ( ::SireMol::Residue::*contains_function_type )( ::SireMol::AtomIndex const & ) const;
        
        Residue_exposer.def( 
            "contains"
            , contains_function_type( &::SireMol::Residue::contains )
            , ( bp::arg("atom") ) );
    
    }

    { //::SireMol::Residue::contains
    
        typedef bool ( ::SireMol::Residue::*contains_function_type )( ::SireMol::Bond const & ) const;
        
        Residue_exposer.def( 
            "contains"
            , contains_function_type( &::SireMol::Residue::contains )
            , ( bp::arg("bond") ) );
    
    }

    { //::SireMol::Residue::coordGroup
    
        typedef ::SireVol::CoordGroup ( ::SireMol::Residue::*coordGroup_function_type )( ::SireMol::CutGroupID ) const;
        
        Residue_exposer.def( 
            "coordGroup"
            , coordGroup_function_type( &::SireMol::Residue::coordGroup )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Residue::coordGroups
    
        typedef ::QHash<SireMol::CutGroupID,SireVol::CoordGroup> ( ::SireMol::Residue::*coordGroups_function_type )(  ) const;
        
        Residue_exposer.def( 
            "coordGroups"
            , coordGroups_function_type( &::SireMol::Residue::coordGroups ) );
    
    }

    { //::SireMol::Residue::coordinates
    
        typedef ::SireMaths::Vector ( ::SireMol::Residue::*coordinates_function_type )( ::SireMol::AtomID ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates )
            , ( bp::arg("i") ) );
    
    }

    { //::SireMol::Residue::coordinates
    
        typedef ::SireMaths::Vector ( ::SireMol::Residue::*coordinates_function_type )( ::QString const & ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates )
            , ( bp::arg("atomname") ) );
    
    }

    { //::SireMol::Residue::coordinates
    
        typedef ::SireMaths::Vector ( ::SireMol::Residue::*coordinates_function_type )( ::SireMol::AtomIndex const & ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates )
            , ( bp::arg("atom") ) );
    
    }

    { //::SireMol::Residue::coordinates
    
        typedef ::QVector<SireMaths::Vector> ( ::SireMol::Residue::*coordinates_function_type )(  ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates ) );
    
    }

    { //::SireMol::Residue::coordinates
    
        typedef ::QHash<SireMol::AtomID,SireMaths::Vector> ( ::SireMol::Residue::*coordinates_function_type )( ::QSet<SireMol::AtomID> const & ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates )
            , ( bp::arg("atomids") ) );
    
    }

}

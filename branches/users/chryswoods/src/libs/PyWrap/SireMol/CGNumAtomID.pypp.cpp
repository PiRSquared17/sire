// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CGNumAtomID.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "SireVol/space.h"

namespace bp = boost::python;

SireMol::CGNumAtomID __copy__(const SireMol::CGNumAtomID &other){ return SireMol::CGNumAtomID(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_CGNumAtomID_class(){

    bp::class_< SireMol::CGNumAtomID >( "CGNumAtomID", bp::init< bp::optional< SireMol::CutGroupNum, SireMol::AtomID > >(( bp::arg("cgid")=::SireMol::CutGroupNum( 0 ), bp::arg("atmid")=::SireMol::AtomID( 0 ) )) )    
        .def( bp::init< boost::tuples::tuple<SireMol::CutGroupNum, SireMol::AtomID, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type> const & >(( bp::arg("t") )) )    
        .def( 
            "atomID"
            , &::SireMol::CGNumAtomID::atomID )    
        .def( 
            "cutGroupNum"
            , &::SireMol::CGNumAtomID::cutGroupNum )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self >= bp::self )    
        .def( 
            "toString"
            , &::SireMol::CGNumAtomID::toString )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::CGNumAtomID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::CGNumAtomID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMol::CGNumAtomID > );

}

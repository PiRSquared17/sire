// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_EditMol__memfuns6.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_EditMol_memfuns6( EditMol_exposer_t& EditMol_exposer ){

    { //::SireMol::EditMol::cutGroups
    
        typedef ::QVector<SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroups_function_type )(  ) const;
        
        EditMol_exposer.def( 
            "cutGroups"
            , cutGroups_function_type( &::SireMol::EditMol::cutGroups ) );
    
    }

    { //::SireMol::EditMol::cutGroups
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroups_function_type )( ::QSet<SireMol::CutGroupID> const & ) const;
        
        EditMol_exposer.def( 
            "cutGroups"
            , cutGroups_function_type( &::SireMol::EditMol::cutGroups )
            , ( bp::arg("cgids") ) );
    
    }

    { //::SireMol::EditMol::cutGroups
    
        typedef ::QHash<SireMol::CutGroupNum,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroups_function_type )( ::QSet<SireMol::CutGroupNum> const & ) const;
        
        EditMol_exposer.def( 
            "cutGroups"
            , cutGroups_function_type( &::SireMol::EditMol::cutGroups )
            , ( bp::arg("cgnums") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByID
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByID_function_type )( ::SireMol::ResNum ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByID"
            , cutGroupsByID_function_type( &::SireMol::EditMol::cutGroupsByID )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByID
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByID_function_type )( ::SireMol::ResID ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByID"
            , cutGroupsByID_function_type( &::SireMol::EditMol::cutGroupsByID )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByID
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByID_function_type )( ::QSet<SireMol::ResNum> const & ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByID"
            , cutGroupsByID_function_type( &::SireMol::EditMol::cutGroupsByID )
            , ( bp::arg("resnums") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByID
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByID_function_type )( ::QSet<SireMol::ResID> const & ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByID"
            , cutGroupsByID_function_type( &::SireMol::EditMol::cutGroupsByID )
            , ( bp::arg("resids") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByNum
    
        typedef ::QHash<SireMol::CutGroupNum,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByNum_function_type )( ::SireMol::ResNum ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByNum"
            , cutGroupsByNum_function_type( &::SireMol::EditMol::cutGroupsByNum )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByNum
    
        typedef ::QHash<SireMol::CutGroupNum,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByNum_function_type )( ::SireMol::ResID ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByNum"
            , cutGroupsByNum_function_type( &::SireMol::EditMol::cutGroupsByNum )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByNum
    
        typedef ::QHash<SireMol::CutGroupNum,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByNum_function_type )( ::QSet<SireMol::ResNum> const & ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByNum"
            , cutGroupsByNum_function_type( &::SireMol::EditMol::cutGroupsByNum )
            , ( bp::arg("resnums") ) );
    
    }

    { //::SireMol::EditMol::cutGroupsByNum
    
        typedef ::QHash<SireMol::CutGroupNum,SireMol::CutGroup> ( ::SireMol::EditMol::*cutGroupsByNum_function_type )( ::QSet<SireMol::ResID> const & ) const;
        
        EditMol_exposer.def( 
            "cutGroupsByNum"
            , cutGroupsByNum_function_type( &::SireMol::EditMol::cutGroupsByNum )
            , ( bp::arg("resids") ) );
    
    }

    { //::SireMol::EditMol::dihedral
    
        typedef ::SireMaths::Torsion ( ::SireMol::EditMol::*dihedral_function_type )( ::SireMol::Dihedral const & ) const;
        
        EditMol_exposer.def( 
            "dihedral"
            , dihedral_function_type( &::SireMol::EditMol::dihedral )
            , ( bp::arg("dih") ) );
    
    }

    { //::SireMol::EditMol::getWeight
    
        typedef double ( ::SireMol::EditMol::*getWeight_function_type )( ::SireMol::AtomIDGroup const &,::SireMol::AtomIDGroup const &,::SireMol::WeightFunction const & ) const;
        
        EditMol_exposer.def( 
            "getWeight"
            , getWeight_function_type( &::SireMol::EditMol::getWeight )
            , ( bp::arg("group0"), bp::arg("group1"), bp::arg("weightfunc") ) );
    
    }

    { //::SireMol::EditMol::improper
    
        typedef ::SireMaths::Torsion ( ::SireMol::EditMol::*improper_function_type )( ::SireMol::Improper const & ) const;
        
        EditMol_exposer.def( 
            "improper"
            , improper_function_type( &::SireMol::EditMol::improper )
            , ( bp::arg("improper") ) );
    
    }

    { //::SireMol::EditMol::info
    
        typedef ::SireMol::MoleculeInfo ( ::SireMol::EditMol::*info_function_type )(  ) const;
        
        EditMol_exposer.def( 
            "info"
            , info_function_type( &::SireMol::EditMol::info ) );
    
    }

    { //::SireMol::EditMol::isEmpty
    
        typedef bool ( ::SireMol::EditMol::*isEmpty_function_type )(  ) const;
        
        EditMol_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::EditMol::isEmpty ) );
    
    }

    { //::SireMol::EditMol::isEmpty
    
        typedef bool ( ::SireMol::EditMol::*isEmpty_function_type )( ::SireMol::ResNum ) const;
        
        EditMol_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::EditMol::isEmpty )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::EditMol::isEmpty
    
        typedef bool ( ::SireMol::EditMol::*isEmpty_function_type )( ::SireMol::ResID ) const;
        
        EditMol_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::EditMol::isEmpty )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::EditMol::isEmpty
    
        typedef bool ( ::SireMol::EditMol::*isEmpty_function_type )( ::SireMol::CutGroupID ) const;
        
        EditMol_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::EditMol::isEmpty )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::EditMol::isEmpty
    
        typedef bool ( ::SireMol::EditMol::*isEmpty_function_type )( ::SireMol::CutGroupNum ) const;
        
        EditMol_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::EditMol::isEmpty )
            , ( bp::arg("cgnum") ) );
    
    }

}

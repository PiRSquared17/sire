// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "ResidueCutting.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::ResidueCutting&){ return "SireMol::ResidueCutting";}

void register_ResidueCutting_class(){

    bp::class_< SireMol::ResidueCutting, bp::bases< SireMol::CuttingFunctionBase > >( "ResidueCutting" )    
        .def( bp::init< >() )    
        .def( 
            "__call__"
            , &::SireMol::ResidueCutting::operator()
            , ( bp::arg("atom"), bp::arg("moldata") ) )    
        .def( 
            "typeName"
            , &::SireMol::ResidueCutting::typeName )    
        .def( 
            "what"
            , &::SireMol::ResidueCutting::what )    
        .staticmethod( "typeName" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::ResidueCutting >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::ResidueCutting >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

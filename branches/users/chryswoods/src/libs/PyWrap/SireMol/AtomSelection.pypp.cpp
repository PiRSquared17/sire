// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomSelection.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::AtomSelection __copy__(const SireMol::AtomSelection &other){ return SireMol::AtomSelection(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::AtomSelection&){ return "SireMol::AtomSelection";}

void register_AtomSelection_class(){

    bp::class_< SireMol::AtomSelection >( "AtomSelection" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::Molecule const & >(( bp::arg("molecule") )) )    
        .def( bp::init< SireMol::Residue const & >(( bp::arg("residue") )) )    
        .def( bp::init< SireMol::NewAtom const & >(( bp::arg("atom") )) )    
        .def( 
            "applyMask"
            , (void ( ::SireMol::AtomSelection::* )( ::QSet<SireMol::CutGroupID> const & ) )( &::SireMol::AtomSelection::applyMask )
            , ( bp::arg("cgids") ) )    
        .def( 
            "applyMask"
            , (void ( ::SireMol::AtomSelection::* )( ::QSet<SireMol::ResNum> const & ) )( &::SireMol::AtomSelection::applyMask )
            , ( bp::arg("resnums") ) )    
        .def( 
            "applyMask"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::AtomSelection const & ) )( &::SireMol::AtomSelection::applyMask )
            , ( bp::arg("other") ) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::MoleculeInfo const & ) const)( &::SireMol::AtomSelection::assertCompatibleWith )
            , ( bp::arg("molinfo") ) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::Molecule const & ) const)( &::SireMol::AtomSelection::assertCompatibleWith )
            , ( bp::arg("molecule") ) )    
        .def( 
            "assertCompatibleWith"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::AtomSelection const & ) const)( &::SireMol::AtomSelection::assertCompatibleWith )
            , ( bp::arg("other") ) )    
        .def( 
            "contains"
            , &::SireMol::AtomSelection::contains
            , ( bp::arg("other") ) )    
        .def( 
            "deselect"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::CGAtomID const & ) )( &::SireMol::AtomSelection::deselect )
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "deselect"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::IDMolAtom const & ) )( &::SireMol::AtomSelection::deselect )
            , ( bp::arg("atomid") ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )(  ) )( &::SireMol::AtomSelection::deselectAll ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) )( &::SireMol::AtomSelection::deselectAll )
            , ( bp::arg("cgid") ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) )( &::SireMol::AtomSelection::deselectAll )
            , ( bp::arg("resnum") ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::AtomSelection const & ) )( &::SireMol::AtomSelection::deselectAll )
            , ( bp::arg("selection") ) )    
        .def( 
            "info"
            , &::SireMol::AtomSelection::info
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "intersect"
            , &::SireMol::AtomSelection::intersect
            , ( bp::arg("other") ) )    
        .def( 
            "intersects"
            , &::SireMol::AtomSelection::intersects
            , ( bp::arg("other") ) )    
        .def( 
            "invert"
            , &::SireMol::AtomSelection::invert )    
        .def( 
            "isEmpty"
            , &::SireMol::AtomSelection::isEmpty )    
        .def( 
            "nSelected"
            , (int ( ::SireMol::AtomSelection::* )(  ) const)( &::SireMol::AtomSelection::nSelected ) )    
        .def( 
            "nSelected"
            , (int ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) const)( &::SireMol::AtomSelection::nSelected )
            , ( bp::arg("cgid") ) )    
        .def( 
            "nSelected"
            , (int ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomSelection::nSelected )
            , ( bp::arg("resnum") ) )    
        .def( 
            "nSelectedCutGroups"
            , &::SireMol::AtomSelection::nSelectedCutGroups )    
        .def( 
            "nSelectedResidues"
            , &::SireMol::AtomSelection::nSelectedResidues )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "select"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::CGAtomID const & ) )( &::SireMol::AtomSelection::select )
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "select"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::IDMolAtom const & ) )( &::SireMol::AtomSelection::select )
            , ( bp::arg("atomid") ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )(  ) )( &::SireMol::AtomSelection::selectAll ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) )( &::SireMol::AtomSelection::selectAll )
            , ( bp::arg("cgid") ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) )( &::SireMol::AtomSelection::selectAll )
            , ( bp::arg("resnum") ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::AtomSelection const & ) )( &::SireMol::AtomSelection::selectAll )
            , ( bp::arg("selection") ) )    
        .def( 
            "selected"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::CGAtomID const & ) const)( &::SireMol::AtomSelection::selected )
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "selected"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::IDMolAtom const & ) const)( &::SireMol::AtomSelection::selected )
            , ( bp::arg("atomid") ) )    
        .def( 
            "selected"
            , (::QList<SireMol::AtomIndex> ( ::SireMol::AtomSelection::* )(  ) const)( &::SireMol::AtomSelection::selected ) )    
        .def( 
            "selectedAll"
            , (bool ( ::SireMol::AtomSelection::* )(  ) const)( &::SireMol::AtomSelection::selectedAll ) )    
        .def( 
            "selectedAll"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) const)( &::SireMol::AtomSelection::selectedAll )
            , ( bp::arg("cgid") ) )    
        .def( 
            "selectedAll"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomSelection::selectedAll )
            , ( bp::arg("resnum") ) )    
        .def( 
            "selectedAllCutGroups"
            , &::SireMol::AtomSelection::selectedAllCutGroups )    
        .def( 
            "selectedAllResidues"
            , &::SireMol::AtomSelection::selectedAllResidues )    
        .def( 
            "selectedCutGroups"
            , &::SireMol::AtomSelection::selectedCutGroups )    
        .def( 
            "selectedNone"
            , (bool ( ::SireMol::AtomSelection::* )(  ) const)( &::SireMol::AtomSelection::selectedNone ) )    
        .def( 
            "selectedNone"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) const)( &::SireMol::AtomSelection::selectedNone )
            , ( bp::arg("cgid") ) )    
        .def( 
            "selectedNone"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomSelection::selectedNone )
            , ( bp::arg("resnum") ) )    
        .def( 
            "selectedResidues"
            , &::SireMol::AtomSelection::selectedResidues )    
        .def( 
            "subtract"
            , &::SireMol::AtomSelection::subtract
            , ( bp::arg("other") ) )    
        .def( 
            "unite"
            , &::SireMol::AtomSelection::unite
            , ( bp::arg("other") ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::AtomSelection >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::AtomSelection >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomSelection.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::AtomSelection&){ return "SireMol::AtomSelection";}

void register_AtomSelection_class(){

    bp::class_< SireMol::AtomSelection >( "AtomSelection" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::Molecule const & >(( bp::arg("molecule") )) )    
        .def( 
            "deselect"
            , &::SireMol::AtomSelection::deselect
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )(  ) )( &::SireMol::AtomSelection::deselectAll ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) )( &::SireMol::AtomSelection::deselectAll )
            , ( bp::arg("cgid") ) )    
        .def( 
            "deselectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) )( &::SireMol::AtomSelection::deselectAll )
            , ( bp::arg("resnum") ) )    
        .def( 
            "isEmpty"
            , &::SireMol::AtomSelection::isEmpty )    
        .def( 
            "nSelected"
            , (int ( ::SireMol::AtomSelection::* )(  ) const)( &::SireMol::AtomSelection::nSelected ) )    
        .def( 
            "nSelected"
            , (int ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) const)( &::SireMol::AtomSelection::nSelected )
            , ( bp::arg("cgid") ) )    
        .def( 
            "nSelected"
            , (int ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomSelection::nSelected )
            , ( bp::arg("resnum") ) )    
        .def( 
            "select"
            , &::SireMol::AtomSelection::select
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )(  ) )( &::SireMol::AtomSelection::selectAll ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) )( &::SireMol::AtomSelection::selectAll )
            , ( bp::arg("cgid") ) )    
        .def( 
            "selectAll"
            , (void ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) )( &::SireMol::AtomSelection::selectAll )
            , ( bp::arg("resnum") ) )    
        .def( 
            "selected"
            , &::SireMol::AtomSelection::selected
            , ( bp::arg("cgatomid") ) )    
        .def( 
            "selectedAll"
            , (bool ( ::SireMol::AtomSelection::* )(  ) const)( &::SireMol::AtomSelection::selectedAll ) )    
        .def( 
            "selectedAll"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::CutGroupID ) const)( &::SireMol::AtomSelection::selectedAll )
            , ( bp::arg("cgid") ) )    
        .def( 
            "selectedAll"
            , (bool ( ::SireMol::AtomSelection::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomSelection::selectedAll )
            , ( bp::arg("resnum") ) )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::AtomSelection >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::AtomSelection >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

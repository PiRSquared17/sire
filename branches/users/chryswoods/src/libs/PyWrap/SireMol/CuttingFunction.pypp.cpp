// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CuttingFunction.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::CuttingFunction&){ return "SireMol::CuttingFunction";}

void register_CuttingFunction_class(){

    bp::class_< SireMol::CuttingFunction >( "CuttingFunction" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::CuttingFunctionBase const & >(( bp::arg("func") )) )    
        .def( 
            "__call__"
            , &::SireMol::CuttingFunction::operator()
            , ( bp::arg("atom"), bp::arg("moldata") ) )    
        .def( 
            "what"
            , &::SireMol::CuttingFunction::what )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::CuttingFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::CuttingFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

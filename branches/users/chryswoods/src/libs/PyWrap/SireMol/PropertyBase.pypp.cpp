// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "PropertyBase.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::PropertyBase&){ return "SireMol::PropertyBase";}

void register_PropertyBase_class(){

    bp::class_< SireMol::PropertyBase, boost::noncopyable >( "PropertyBase", bp::no_init )    
        .def( 
            "assertCompatibleWith"
            , &::SireMol::PropertyBase::assertCompatibleWith
            , ( bp::arg("molecule") ) )    
        .def( 
            "isCompatibleWith"
            , &::SireMol::PropertyBase::isCompatibleWith
            , ( bp::arg("molecule") ) )    
        .def( 
            "null_property"
            , &::SireMol::PropertyBase::null_property )    
        .def( 
            "what"
            , &::SireMol::PropertyBase::what )    
        .staticmethod( "null_property" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::PropertyBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::PropertyBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "_Molecule__enums.pypp.hpp"
#include "_Molecule__unnamed_enums.pypp.hpp"
#include "_Molecule__classes.pypp.hpp"
#include "_Molecule__memfuns0.pypp.hpp"
#include "_Molecule__memfuns1.pypp.hpp"
#include "_Molecule__memfuns2.pypp.hpp"
#include "_Molecule__memfuns3.pypp.hpp"
#include "_Molecule__memfuns4.pypp.hpp"
#include "_Molecule__memfuns5.pypp.hpp"
#include "_Molecule__memfuns6.pypp.hpp"
#include "_Molecule__memfuns7.pypp.hpp"
#include "_Molecule__memfuns8.pypp.hpp"
#include "_Molecule__memfuns9.pypp.hpp"
#include "_Molecule__memfuns_virtual.pypp.hpp"
#include "_Molecule__memfuns_pvirtual.pypp.hpp"
#include "_Molecule__protected_memfuns.pypp.hpp"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::Molecule&){ return "SireMol::Molecule";}

void register_Molecule_class(){

{ //::SireMol::Molecule
    typedef bp::class_< SireMol::Molecule > Molecule_exposer_t;
    Molecule_exposer_t Molecule_exposer = Molecule_exposer_t( "Molecule" );
    bp::scope Molecule_scope( Molecule_exposer );
    Molecule_exposer.def( bp::init< >() );
    Molecule_exposer.def( bp::init< SireMol::Residue const & >(( bp::arg("residue") )) );
    Molecule_exposer.def( bp::init< SireMol::NewAtom const & >(( bp::arg("atom") )) );
    register_Molecule_memfuns0(Molecule_exposer);
    register_Molecule_memfuns1(Molecule_exposer);
    register_Molecule_memfuns2(Molecule_exposer);
    register_Molecule_memfuns3(Molecule_exposer);
    register_Molecule_memfuns4(Molecule_exposer);
    register_Molecule_memfuns5(Molecule_exposer);
    Molecule_exposer.def( bp::self != bp::self );
    Molecule_exposer.def( bp::self == bp::self );
    register_Molecule_memfuns6(Molecule_exposer);
    register_Molecule_memfuns7(Molecule_exposer);
    register_Molecule_memfuns8(Molecule_exposer);
    register_Molecule_memfuns9(Molecule_exposer);
    Molecule_exposer.def( bp::init<const SireMol::Molecule&>() );
    Molecule_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::Molecule >,
                        bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    Molecule_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::Molecule >,
                        bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    Molecule_exposer.def( "__str__", &pvt_get_name);
}

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_PartialMolecule__memfuns1.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_PartialMolecule_memfuns1( PartialMolecule_exposer_t& PartialMolecule_exposer ){

    { //::SireMol::PartialMolecule::invert
    
        typedef void ( ::SireMol::PartialMolecule::*invert_function_type )(  ) ;
        
        PartialMolecule_exposer.def( 
            "invert"
            , invert_function_type( &::SireMol::PartialMolecule::invert ) );
    
    }

    { //::SireMol::PartialMolecule::isEmpty
    
        typedef bool ( ::SireMol::PartialMolecule::*isEmpty_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::PartialMolecule::isEmpty ) );
    
    }

    { //::SireMol::PartialMolecule::nSelected
    
        typedef int ( ::SireMol::PartialMolecule::*nSelected_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "nSelected"
            , nSelected_function_type( &::SireMol::PartialMolecule::nSelected ) );
    
    }

    { //::SireMol::PartialMolecule::nSelected
    
        typedef int ( ::SireMol::PartialMolecule::*nSelected_function_type )( ::SireMol::CutGroupID ) const;
        
        PartialMolecule_exposer.def( 
            "nSelected"
            , nSelected_function_type( &::SireMol::PartialMolecule::nSelected )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::PartialMolecule::nSelected
    
        typedef int ( ::SireMol::PartialMolecule::*nSelected_function_type )( ::SireMol::ResNum ) const;
        
        PartialMolecule_exposer.def( 
            "nSelected"
            , nSelected_function_type( &::SireMol::PartialMolecule::nSelected )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::PartialMolecule::nSelectedCutGroups
    
        typedef int ( ::SireMol::PartialMolecule::*nSelectedCutGroups_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "nSelectedCutGroups"
            , nSelectedCutGroups_function_type( &::SireMol::PartialMolecule::nSelectedCutGroups ) );
    
    }

    { //::SireMol::PartialMolecule::nSelectedResidues
    
        typedef int ( ::SireMol::PartialMolecule::*nSelectedResidues_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "nSelectedResidues"
            , nSelectedResidues_function_type( &::SireMol::PartialMolecule::nSelectedResidues ) );
    
    }

    { //::SireMol::PartialMolecule::name
    
        typedef ::QString ( ::SireMol::PartialMolecule::*name_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "name"
            , name_function_type( &::SireMol::PartialMolecule::name ) );
    
    }

    { //::SireMol::PartialMolecule::remove
    
        typedef bool ( ::SireMol::PartialMolecule::*remove_function_type )( ::SireMol::AtomSelection const & ) ;
        
        PartialMolecule_exposer.def( 
            "remove"
            , remove_function_type( &::SireMol::PartialMolecule::remove )
            , ( bp::arg("atoms") ) );
    
    }

    { //::SireMol::PartialMolecule::select
    
        typedef void ( ::SireMol::PartialMolecule::*select_function_type )( ::SireMol::CGAtomID const & ) ;
        
        PartialMolecule_exposer.def( 
            "select"
            , select_function_type( &::SireMol::PartialMolecule::select )
            , ( bp::arg("cgatomid") ) );
    
    }

    { //::SireMol::PartialMolecule::select
    
        typedef void ( ::SireMol::PartialMolecule::*select_function_type )( ::SireMol::IDMolAtom const & ) ;
        
        PartialMolecule_exposer.def( 
            "select"
            , select_function_type( &::SireMol::PartialMolecule::select )
            , ( bp::arg("atomid") ) );
    
    }

    { //::SireMol::PartialMolecule::selectAll
    
        typedef void ( ::SireMol::PartialMolecule::*selectAll_function_type )(  ) ;
        
        PartialMolecule_exposer.def( 
            "selectAll"
            , selectAll_function_type( &::SireMol::PartialMolecule::selectAll ) );
    
    }

    { //::SireMol::PartialMolecule::selectAll
    
        typedef void ( ::SireMol::PartialMolecule::*selectAll_function_type )( ::SireMol::CutGroupID ) ;
        
        PartialMolecule_exposer.def( 
            "selectAll"
            , selectAll_function_type( &::SireMol::PartialMolecule::selectAll )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::PartialMolecule::selectAll
    
        typedef void ( ::SireMol::PartialMolecule::*selectAll_function_type )( ::SireMol::ResNum ) ;
        
        PartialMolecule_exposer.def( 
            "selectAll"
            , selectAll_function_type( &::SireMol::PartialMolecule::selectAll )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::PartialMolecule::selectAll
    
        typedef void ( ::SireMol::PartialMolecule::*selectAll_function_type )( ::SireMol::AtomSelection const & ) ;
        
        PartialMolecule_exposer.def( 
            "selectAll"
            , selectAll_function_type( &::SireMol::PartialMolecule::selectAll )
            , ( bp::arg("selection") ) );
    
    }

    { //::SireMol::PartialMolecule::selected
    
        typedef bool ( ::SireMol::PartialMolecule::*selected_function_type )( ::SireMol::CGAtomID const & ) const;
        
        PartialMolecule_exposer.def( 
            "selected"
            , selected_function_type( &::SireMol::PartialMolecule::selected )
            , ( bp::arg("cgatomid") ) );
    
    }

    { //::SireMol::PartialMolecule::selected
    
        typedef bool ( ::SireMol::PartialMolecule::*selected_function_type )( ::SireMol::IDMolAtom const & ) const;
        
        PartialMolecule_exposer.def( 
            "selected"
            , selected_function_type( &::SireMol::PartialMolecule::selected )
            , ( bp::arg("atomid") ) );
    
    }

    { //::SireMol::PartialMolecule::selected
    
        typedef ::QList<SireMol::AtomIndex> ( ::SireMol::PartialMolecule::*selected_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selected"
            , selected_function_type( &::SireMol::PartialMolecule::selected ) );
    
    }

    { //::SireMol::PartialMolecule::selectedAll
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedAll_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedAll"
            , selectedAll_function_type( &::SireMol::PartialMolecule::selectedAll ) );
    
    }

    { //::SireMol::PartialMolecule::selectedAll
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedAll_function_type )( ::SireMol::CutGroupID ) const;
        
        PartialMolecule_exposer.def( 
            "selectedAll"
            , selectedAll_function_type( &::SireMol::PartialMolecule::selectedAll )
            , ( bp::arg("cgid") ) );
    
    }

}

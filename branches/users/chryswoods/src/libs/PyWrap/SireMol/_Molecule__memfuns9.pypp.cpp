// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Molecule__memfuns9.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_Molecule_memfuns9( Molecule_exposer_t& Molecule_exposer ){

    { //::SireMol::Molecule::setProperty
    
        typedef void ( ::SireMol::Molecule::*setProperty_function_type )( ::QString const &,::SireMol::Property const & ) ;
        
        Molecule_exposer.def( 
            "setProperty"
            , setProperty_function_type( &::SireMol::Molecule::setProperty )
            , ( bp::arg("name"), bp::arg("value") ) );
    
    }

    { //::SireMol::Molecule::setProperty
    
        typedef void ( ::SireMol::Molecule::*setProperty_function_type )( ::QString const &,::QVariant const & ) ;
        
        Molecule_exposer.def( 
            "setProperty"
            , setProperty_function_type( &::SireMol::Molecule::setProperty )
            , ( bp::arg("name"), bp::arg("value") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::AtomIDGroup const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("group"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::AtomIndex const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("atom"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::QSet<SireMol::AtomIndex> const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("atoms"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::ResNum,::QStringList const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("resnum"), bp::arg("atoms"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::ResNum,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("resnum"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::QSet<SireMol::ResNum> const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("resnums"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::ResID,::QStringList const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("resid"), bp::arg("atoms"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::ResID,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("resid"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::QSet<SireMol::ResID> const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("resids"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::SireMol::CutGroupID,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("cgid"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::translate
    
        typedef void ( ::SireMol::Molecule::*translate_function_type )( ::QSet<SireMol::CutGroupID> const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "translate"
            , translate_function_type( &::SireMol::Molecule::translate )
            , ( bp::arg("cgids"), bp::arg("delta") ) );
    
    }

    { //::SireMol::Molecule::version
    
        typedef ::SireMol::MoleculeVersion const & ( ::SireMol::Molecule::*version_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "version"
            , version_function_type( &::SireMol::Molecule::version )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "IDBase.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "SireVol/space.h"

namespace bp = boost::python;

SireMol::IDBase __copy__(const SireMol::IDBase &other){ return SireMol::IDBase(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_IDBase_class(){

    bp::class_< SireMol::IDBase >( "IDBase" )    
        .def( bp::init< >() )    
        .def( bp::init< quint32 >(( bp::arg("id") )) )    
        .def( "__int__", &SireMol::IDBase::operator ::quint32  )    
        .def( bp::self += bp::other< quint32 >() )    
        .def( bp::self -= bp::other< quint32 >() )    
        .def( 
            "toInt"
            , &::SireMol::IDBase::toInt )    
        .def( 
            "toString"
            , &::SireMol::IDBase::toString )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::IDBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::IDBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMol::IDBase > );

}

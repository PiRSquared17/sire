// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Residue__memfuns0.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_Residue_memfuns0( Residue_exposer_t& Residue_exposer ){

    { //::SireMol::Residue::ID
    
        typedef ::SireMol::MoleculeID ( ::SireMol::Residue::*ID_function_type )(  ) const;
        
        Residue_exposer.def( 
            "ID"
            , ID_function_type( &::SireMol::Residue::ID ) );
    
    }

    { //::SireMol::Residue::angle
    
        typedef ::SireMaths::Triangle ( ::SireMol::Residue::*angle_function_type )( ::SireMol::Angle const & ) const;
        
        Residue_exposer.def( 
            "angle"
            , angle_function_type( &::SireMol::Residue::angle )
            , ( bp::arg("ang") ) );
    
    }

    { //::SireMol::Residue::at
    
        typedef ::SireMol::Atom ( ::SireMol::Residue::*at_function_type )( ::SireMol::AtomID ) const;
        
        Residue_exposer.def( 
            "at"
            , at_function_type( &::SireMol::Residue::at )
            , ( bp::arg("i") ) );
    
    }

    { //::SireMol::Residue::at
    
        typedef ::SireMol::Atom ( ::SireMol::Residue::*at_function_type )( ::QString const & ) const;
        
        Residue_exposer.def( 
            "at"
            , at_function_type( &::SireMol::Residue::at )
            , ( bp::arg("atomname") ) );
    
    }

    { //::SireMol::Residue::at
    
        typedef ::SireMol::Atom ( ::SireMol::Residue::*at_function_type )( ::SireMol::AtomIndex const & ) const;
        
        Residue_exposer.def( 
            "at"
            , at_function_type( &::SireMol::Residue::at )
            , ( bp::arg("atom") ) );
    
    }

    { //::SireMol::Residue::at
    
        typedef ::SireMol::CutGroup ( ::SireMol::Residue::*at_function_type )( ::SireMol::CutGroupID ) const;
        
        Residue_exposer.def( 
            "at"
            , at_function_type( &::SireMol::Residue::at )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Residue::at
    
        typedef ::SireMol::CutGroup ( ::SireMol::Residue::*at_function_type )( ::SireMol::CutGroupNum ) const;
        
        Residue_exposer.def( 
            "at"
            , at_function_type( &::SireMol::Residue::at )
            , ( bp::arg("cgnum") ) );
    
    }

    { //::SireMol::Residue::atom
    
        typedef ::SireMol::Atom ( ::SireMol::Residue::*atom_function_type )( ::SireMol::AtomID ) const;
        
        Residue_exposer.def( 
            "atom"
            , atom_function_type( &::SireMol::Residue::atom )
            , ( bp::arg("i") ) );
    
    }

    { //::SireMol::Residue::atom
    
        typedef ::SireMol::Atom ( ::SireMol::Residue::*atom_function_type )( ::QString const & ) const;
        
        Residue_exposer.def( 
            "atom"
            , atom_function_type( &::SireMol::Residue::atom )
            , ( bp::arg("atomname") ) );
    
    }

    { //::SireMol::Residue::atom
    
        typedef ::SireMol::Atom ( ::SireMol::Residue::*atom_function_type )( ::SireMol::AtomIndex const & ) const;
        
        Residue_exposer.def( 
            "atom"
            , atom_function_type( &::SireMol::Residue::atom )
            , ( bp::arg("atom") ) );
    
    }

    { //::SireMol::Residue::atomNames
    
        typedef ::QStringList ( ::SireMol::Residue::*atomNames_function_type )(  ) const;
        
        Residue_exposer.def( 
            "atomNames"
            , atomNames_function_type( &::SireMol::Residue::atomNames ) );
    
    }

    { //::SireMol::Residue::atoms
    
        typedef ::QVector<SireMol::Atom> ( ::SireMol::Residue::*atoms_function_type )(  ) const;
        
        Residue_exposer.def( 
            "atoms"
            , atoms_function_type( &::SireMol::Residue::atoms ) );
    
    }

    { //::SireMol::Residue::atoms
    
        typedef ::QHash<SireMol::AtomID,SireMol::Atom> ( ::SireMol::Residue::*atoms_function_type )( ::QSet<SireMol::AtomID> const & ) const;
        
        Residue_exposer.def( 
            "atoms"
            , atoms_function_type( &::SireMol::Residue::atoms )
            , ( bp::arg("atomids") ) );
    
    }

    { //::SireMol::Residue::atoms
    
        typedef ::QHash<QString,SireMol::Atom> ( ::SireMol::Residue::*atoms_function_type )( ::QSet<QString> const & ) const;
        
        Residue_exposer.def( 
            "atoms"
            , atoms_function_type( &::SireMol::Residue::atoms )
            , ( bp::arg("atomnames") ) );
    
    }

    { //::SireMol::Residue::atoms
    
        typedef ::QHash<SireMol::AtomIndex,SireMol::Atom> ( ::SireMol::Residue::*atoms_function_type )( ::QSet<SireMol::AtomIndex> const & ) const;
        
        Residue_exposer.def( 
            "atoms"
            , atoms_function_type( &::SireMol::Residue::atoms )
            , ( bp::arg("atms") ) );
    
    }

    { //::SireMol::Residue::bond
    
        typedef ::SireMaths::Line ( ::SireMol::Residue::*bond_function_type )( ::SireMol::Bond const & ) const;
        
        Residue_exposer.def( 
            "bond"
            , bond_function_type( &::SireMol::Residue::bond )
            , ( bp::arg("bnd") ) );
    
    }

    { //::SireMol::Residue::bondedResidues
    
        typedef ::QHash<SireMol::ResNum,SireMol::Residue> ( ::SireMol::Residue::*bondedResidues_function_type )(  ) const;
        
        Residue_exposer.def( 
            "bondedResidues"
            , bondedResidues_function_type( &::SireMol::Residue::bondedResidues ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Bond const &,double,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("bond"), bp::arg("delta"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Bond const &,double,::SireMol::WeightFunction const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("bond"), bp::arg("delta"), bp::arg("func"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

    { //::SireMol::Residue::change
    
        typedef void ( ::SireMol::Residue::*change_function_type )( ::SireMol::Angle const &,::SireMaths::Angle const &,::QSet<SireMol::AtomIndex> const & ) ;
        
        Residue_exposer.def( 
            "change"
            , change_function_type( &::SireMol::Residue::change )
            , ( bp::arg("angle"), bp::arg("delta"), bp::arg("anchors")=::QSet<SireMol::AtomIndex>( ) ) );
    
    }

}

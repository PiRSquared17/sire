// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "SelectionFromMol.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::SelectionFromMol __copy__(const SireMol::SelectionFromMol &other){ return SireMol::SelectionFromMol(other); }

const char* pvt_get_name(const SireMol::SelectionFromMol&){ return "SireMol::SelectionFromMol";}

void register_SelectionFromMol_class(){

    bp::class_< SireMol::SelectionFromMol >( "SelectionFromMol" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::ResNum >(( bp::arg("resnum") )) )    
        .def( bp::init< SireMol::ResID >(( bp::arg("resid") )) )    
        .def( bp::init< SireMol::CutGroupID >(( bp::arg("cgid") )) )    
        .def( bp::init< SireMol::CutGroupNum >(( bp::arg("cgnum") )) )    
        .def( bp::init< SireMol::IDMolAtom const & >(( bp::arg("atomid") )) )    
        .def( bp::init< SireMol::AtomSelection const & >(( bp::arg("selection") )) )    
        .def( bp::init< QSet<SireMol::ResNum> const & >(( bp::arg("resnums") )) )    
        .def( bp::init< QSet<SireMol::ResID> const & >(( bp::arg("resids") )) )    
        .def( bp::init< QSet<SireMol::CutGroupID> const & >(( bp::arg("cgids") )) )    
        .def( bp::init< QSet<SireMol::CutGroupNum> const & >(( bp::arg("cgnums") )) )    
        .def( bp::init< QList<SireMol::IDMolAtom> const & >(( bp::arg("atomids") )) )    
        .def( bp::init< QList<SireMol::AtomSelection> const & >(( bp::arg("selections") )) )    
        .def( bp::init< QList<SireMol::SelectionFromMol> const & >(( bp::arg("selections") )) )    
        .def( 
            "deselectAllIn"
            , &::SireMol::SelectionFromMol::deselectAllIn
            , ( bp::arg("selection") ) )    
        .def( 
            "selectAllFrom"
            , &::SireMol::SelectionFromMol::selectAllFrom
            , ( bp::arg("selection") ) )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MoleculeMover.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::MoleculeMover __copy__(const SireMol::MoleculeMover &other){ return SireMol::MoleculeMover(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::MoleculeMover&){ return "SireMol::MoleculeMover";}

void register_MoleculeMover_class(){

    bp::class_< SireMol::MoleculeMover, bp::bases< SireMol::MolDataView > >( "MoleculeMover" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molecule") )) )    
        .def( 
            "mapInto"
            , &::SireMol::MoleculeMover::mapInto
            , ( bp::arg("space"), bp::arg("moved_cgids")=bp::object() ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::MoleculeMover >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::MoleculeMover >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

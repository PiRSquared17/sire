// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Molecule__memfuns4.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_Molecule_memfuns4( Molecule_exposer_t& Molecule_exposer ){

    { //::SireMol::Molecule::info
    
        typedef ::SireMol::MoleculeInfo const & ( ::SireMol::Molecule::*info_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "info"
            , info_function_type( &::SireMol::Molecule::info )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::SireMol::Molecule::isEmpty
    
        typedef bool ( ::SireMol::Molecule::*isEmpty_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::Molecule::isEmpty ) );
    
    }

    { //::SireMol::Molecule::isEmpty
    
        typedef bool ( ::SireMol::Molecule::*isEmpty_function_type )( ::SireMol::ResNum ) const;
        
        Molecule_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::Molecule::isEmpty )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::Molecule::isEmpty
    
        typedef bool ( ::SireMol::Molecule::*isEmpty_function_type )( ::SireMol::ResID ) const;
        
        Molecule_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::Molecule::isEmpty )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::Molecule::isEmpty
    
        typedef bool ( ::SireMol::Molecule::*isEmpty_function_type )( ::SireMol::CutGroupID ) const;
        
        Molecule_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::Molecule::isEmpty )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Molecule::measure
    
        typedef double ( ::SireMol::Molecule::*measure_function_type )( ::SireMol::Bond const & ) const;
        
        Molecule_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Molecule::measure )
            , ( bp::arg("bnd") ) );
    
    }

    { //::SireMol::Molecule::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::Molecule::*measure_function_type )( ::SireMol::Angle const & ) const;
        
        Molecule_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Molecule::measure )
            , ( bp::arg("ang") ) );
    
    }

    { //::SireMol::Molecule::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::Molecule::*measure_function_type )( ::SireMol::Dihedral const & ) const;
        
        Molecule_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Molecule::measure )
            , ( bp::arg("dih") ) );
    
    }

    { //::SireMol::Molecule::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::Molecule::*measure_function_type )( ::SireMol::Improper const & ) const;
        
        Molecule_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Molecule::measure )
            , ( bp::arg("improper") ) );
    
    }

    { //::SireMol::Molecule::nAtoms
    
        typedef int ( ::SireMol::Molecule::*nAtoms_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::Molecule::nAtoms ) );
    
    }

    { //::SireMol::Molecule::nAtoms
    
        typedef int ( ::SireMol::Molecule::*nAtoms_function_type )( ::SireMol::ResNum ) const;
        
        Molecule_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::Molecule::nAtoms )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::Molecule::nAtoms
    
        typedef int ( ::SireMol::Molecule::*nAtoms_function_type )( ::SireMol::ResID ) const;
        
        Molecule_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::Molecule::nAtoms )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::Molecule::nAtoms
    
        typedef int ( ::SireMol::Molecule::*nAtoms_function_type )( ::SireMol::CutGroupID ) const;
        
        Molecule_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::Molecule::nAtoms )
            , ( bp::arg("id") ) );
    
    }

    { //::SireMol::Molecule::nBonds
    
        typedef int ( ::SireMol::Molecule::*nBonds_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "nBonds"
            , nBonds_function_type( &::SireMol::Molecule::nBonds ) );
    
    }

    { //::SireMol::Molecule::nBonds
    
        typedef int ( ::SireMol::Molecule::*nBonds_function_type )( ::SireMol::ResNum ) const;
        
        Molecule_exposer.def( 
            "nBonds"
            , nBonds_function_type( &::SireMol::Molecule::nBonds )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::Molecule::nBonds
    
        typedef int ( ::SireMol::Molecule::*nBonds_function_type )( ::SireMol::ResID ) const;
        
        Molecule_exposer.def( 
            "nBonds"
            , nBonds_function_type( &::SireMol::Molecule::nBonds )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::Molecule::nCutGroups
    
        typedef int ( ::SireMol::Molecule::*nCutGroups_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "nCutGroups"
            , nCutGroups_function_type( &::SireMol::Molecule::nCutGroups ) );
    
    }

    { //::SireMol::Molecule::nInterBonds
    
        typedef int ( ::SireMol::Molecule::*nInterBonds_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "nInterBonds"
            , nInterBonds_function_type( &::SireMol::Molecule::nInterBonds ) );
    
    }

    { //::SireMol::Molecule::nInterBonds
    
        typedef int ( ::SireMol::Molecule::*nInterBonds_function_type )( ::SireMol::ResNum ) const;
        
        Molecule_exposer.def( 
            "nInterBonds"
            , nInterBonds_function_type( &::SireMol::Molecule::nInterBonds )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::Molecule::nInterBonds
    
        typedef int ( ::SireMol::Molecule::*nInterBonds_function_type )( ::SireMol::ResID ) const;
        
        Molecule_exposer.def( 
            "nInterBonds"
            , nInterBonds_function_type( &::SireMol::Molecule::nInterBonds )
            , ( bp::arg("resid") ) );
    
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_PartialMolecule__memfuns2.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_PartialMolecule_memfuns2( PartialMolecule_exposer_t& PartialMolecule_exposer ){

    { //::SireMol::PartialMolecule::selectedAll
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedAll_function_type )( ::SireMol::ResNum ) const;
        
        PartialMolecule_exposer.def( 
            "selectedAll"
            , selectedAll_function_type( &::SireMol::PartialMolecule::selectedAll )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::PartialMolecule::selectedAllCutGroups
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedAllCutGroups_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedAllCutGroups"
            , selectedAllCutGroups_function_type( &::SireMol::PartialMolecule::selectedAllCutGroups ) );
    
    }

    { //::SireMol::PartialMolecule::selectedAllResidues
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedAllResidues_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedAllResidues"
            , selectedAllResidues_function_type( &::SireMol::PartialMolecule::selectedAllResidues ) );
    
    }

    { //::SireMol::PartialMolecule::selectedAtoms
    
        typedef ::SireMol::AtomSelection const & ( ::SireMol::PartialMolecule::*selectedAtoms_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedAtoms"
            , selectedAtoms_function_type( &::SireMol::PartialMolecule::selectedAtoms )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::SireMol::PartialMolecule::selectedCutGroups
    
        typedef ::QSet<SireMol::CutGroupID> ( ::SireMol::PartialMolecule::*selectedCutGroups_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedCutGroups"
            , selectedCutGroups_function_type( &::SireMol::PartialMolecule::selectedCutGroups ) );
    
    }

    { //::SireMol::PartialMolecule::selectedNone
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedNone_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedNone"
            , selectedNone_function_type( &::SireMol::PartialMolecule::selectedNone ) );
    
    }

    { //::SireMol::PartialMolecule::selectedNone
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedNone_function_type )( ::SireMol::CutGroupID ) const;
        
        PartialMolecule_exposer.def( 
            "selectedNone"
            , selectedNone_function_type( &::SireMol::PartialMolecule::selectedNone )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::PartialMolecule::selectedNone
    
        typedef bool ( ::SireMol::PartialMolecule::*selectedNone_function_type )( ::SireMol::ResNum ) const;
        
        PartialMolecule_exposer.def( 
            "selectedNone"
            , selectedNone_function_type( &::SireMol::PartialMolecule::selectedNone )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::PartialMolecule::selectedResidues
    
        typedef ::QSet<SireMol::ResNum> ( ::SireMol::PartialMolecule::*selectedResidues_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selectedResidues"
            , selectedResidues_function_type( &::SireMol::PartialMolecule::selectedResidues ) );
    
    }

    { //::SireMol::PartialMolecule::selection
    
        typedef ::SireMol::AtomSelection const & ( ::SireMol::PartialMolecule::*selection_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "selection"
            , selection_function_type( &::SireMol::PartialMolecule::selection )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::SireMol::PartialMolecule::setSelection
    
        typedef void ( ::SireMol::PartialMolecule::*setSelection_function_type )( ::SireMol::AtomSelection const & ) ;
        
        PartialMolecule_exposer.def( 
            "setSelection"
            , setSelection_function_type( &::SireMol::PartialMolecule::setSelection )
            , ( bp::arg("other") ) );
    
    }

    { //::SireMol::PartialMolecule::subtract
    
        typedef ::SireMol::PartialMolecule ( ::SireMol::PartialMolecule::*subtract_function_type )( ::SireMol::AtomSelection const & ) const;
        
        PartialMolecule_exposer.def( 
            "subtract"
            , subtract_function_type( &::SireMol::PartialMolecule::subtract )
            , ( bp::arg("other") ) );
    
    }

    { //::SireMol::PartialMolecule::unite
    
        typedef ::SireMol::PartialMolecule ( ::SireMol::PartialMolecule::*unite_function_type )( ::SireMol::AtomSelection const & ) const;
        
        PartialMolecule_exposer.def( 
            "unite"
            , unite_function_type( &::SireMol::PartialMolecule::unite )
            , ( bp::arg("other") ) );
    
    }

    { //::SireMol::PartialMolecule::version
    
        typedef ::SireMol::MoleculeVersion const & ( ::SireMol::PartialMolecule::*version_function_type )(  ) const;
        
        PartialMolecule_exposer.def( 
            "version"
            , version_function_type( &::SireMol::PartialMolecule::version )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

}

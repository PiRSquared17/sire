// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MoleculeGroup.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::MoleculeGroup __copy__(const SireMol::MoleculeGroup &other){ return SireMol::MoleculeGroup(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::MoleculeGroup&){ return "SireMol::MoleculeGroup";}

void register_MoleculeGroup_class(){

    bp::class_< SireMol::MoleculeGroup >( "MoleculeGroup" )    
        .def( bp::init< >() )    
        .def( bp::init< QString const & >(( bp::arg("name") )) )    
        .def( bp::init< QString const &, QVector<SireMol::PartialMolecule> const & >(( bp::arg("name"), bp::arg("molecules") )) )    
        .def( 
            "ID"
            , &::SireMol::MoleculeGroup::ID )    
        .def( 
            "add"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::SireMol::PartialMolecule const & ) )( &::SireMol::MoleculeGroup::add )
            , ( bp::arg("molecule") ) )    
        .def( 
            "add"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::QVector<SireMol::PartialMolecule> const & ) )( &::SireMol::MoleculeGroup::add )
            , ( bp::arg("molecules") ) )    
        .def( 
            "at"
            , &::SireMol::MoleculeGroup::at
            , ( bp::arg("molid") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "change"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::SireMol::PartialMolecule const & ) )( &::SireMol::MoleculeGroup::change )
            , ( bp::arg("molecule") ) )    
        .def( 
            "change"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::QVector<SireMol::PartialMolecule> const & ) )( &::SireMol::MoleculeGroup::change )
            , ( bp::arg("molecules") ) )    
        .def( 
            "change"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> const & ) )( &::SireMol::MoleculeGroup::change )
            , ( bp::arg("molecules") ) )    
        .def( 
            "contains"
            , &::SireMol::MoleculeGroup::contains
            , ( bp::arg("molecule") ) )    
        .def( 
            "count"
            , &::SireMol::MoleculeGroup::count )    
        .def( 
            "molecule"
            , &::SireMol::MoleculeGroup::molecule
            , ( bp::arg("molid") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "moleculeIDs"
            , &::SireMol::MoleculeGroup::moleculeIDs )    
        .def( 
            "molecules"
            , &::SireMol::MoleculeGroup::molecules
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "name"
            , &::SireMol::MoleculeGroup::name
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , &::SireMol::MoleculeGroup::operator[]
            , ( bp::arg("molid") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "refersTo"
            , &::SireMol::MoleculeGroup::refersTo
            , ( bp::arg("molid") ) )    
        .def( 
            "remove"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::SireMol::PartialMolecule const & ) )( &::SireMol::MoleculeGroup::remove )
            , ( bp::arg("molecule") ) )    
        .def( 
            "remove"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::SireMol::MoleculeID ) )( &::SireMol::MoleculeGroup::remove )
            , ( bp::arg("molid") ) )    
        .def( 
            "remove"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::QVector<SireMol::PartialMolecule> const & ) )( &::SireMol::MoleculeGroup::remove )
            , ( bp::arg("molecules") ) )    
        .def( 
            "remove"
            , (bool ( ::SireMol::MoleculeGroup::* )( ::QSet<SireMol::MoleculeID> const & ) )( &::SireMol::MoleculeGroup::remove )
            , ( bp::arg("molids") ) )    
        .def( 
            "rename"
            , &::SireMol::MoleculeGroup::rename
            , ( bp::arg("newname") ) )    
        .def( 
            "version"
            , &::SireMol::MoleculeGroup::version
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::MoleculeGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::MoleculeGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

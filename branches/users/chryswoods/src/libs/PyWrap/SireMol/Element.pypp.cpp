// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Element.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_Element_class(){

    bp::class_< SireMol::Element >( "Element" )    
        .def( bp::init< >() )    
        .def( bp::init< QString >(( bp::arg("element") )) )    
        .def( bp::init< char const * >(( bp::arg("element") )) )    
        .def( bp::init< unsigned int >(( bp::arg("nprotons") )) )    
        .def( bp::init< int >(( bp::arg("nprotons") )) )    
        .def( 
            "actinide"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::actinide ) )    
        .def( 
            "alkaliEarthMetal"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::alkaliEarthMetal ) )    
        .def( 
            "alkaliMetal"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::alkaliMetal ) )    
        .def( 
            "biological"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::biological ) )    
        .def( 
            "biologicalElement"
            , (::SireMol::Element (*)( ::QString const & ))( &::SireMol::Element::biologicalElement )
            , ( bp::arg("name") ) )    
        .def( 
            "blue"
            , (float ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::blue ) )    
        .def( 
            "bondOrderRadius"
            , (double ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::bondOrderRadius ) )    
        .def( 
            "covalentRadius"
            , (double ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::covalentRadius ) )    
        .def( 
            "electroNegativity"
            , (double ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::electroNegativity ) )    
        .def( 
            "elementWithMass"
            , (::SireMol::Element (*)( double ))( &::SireMol::Element::elementWithMass )
            , ( bp::arg("mass") ) )    
        .def( 
            "green"
            , (float ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::green ) )    
        .def( 
            "group"
            , (int ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::group ) )    
        .def( 
            "halogen"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::halogen ) )    
        .def( 
            "lanthanide"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::lanthanide ) )    
        .def( 
            "mass"
            , (double ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::mass ) )    
        .def( 
            "maxBonds"
            , (unsigned int ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::maxBonds ) )    
        .def( 
            "nProtons"
            , (unsigned int ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::nProtons ) )    
        .def( 
            "name"
            , (::QString ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::name ) )    
        .def( 
            "nobleGas"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::nobleGas ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self >= bp::self )    
        .def( 
            "period"
            , (int ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::period ) )    
        .def( 
            "rareEarth"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::rareEarth ) )    
        .def( 
            "red"
            , (float ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::red ) )    
        .def( 
            "symbol"
            , (::QString ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::symbol ) )    
        .def( 
            "toString"
            , (::QString ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::toString ) )    
        .def( 
            "transitionMetal"
            , (bool ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::transitionMetal ) )    
        .def( 
            "vdwRadius"
            , (double ( ::SireMol::Element::* )(  ) const)( &::SireMol::Element::vdwRadius ) )    
        .staticmethod( "biologicalElement" )    
        .staticmethod( "elementWithMass" );

}

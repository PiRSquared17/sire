// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "PropertyExtractor.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::PropertyExtractor __copy__(const SireMol::PropertyExtractor &other){ return SireMol::PropertyExtractor(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::PropertyExtractor&){ return "SireMol::PropertyExtractor";}

void register_PropertyExtractor_class(){

    bp::class_< SireMol::PropertyExtractor, bp::bases< SireMol::MolDataView > >( "PropertyExtractor" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molecule") )) )    
        .def( 
            "coordGroups"
            , &::SireMol::PropertyExtractor::coordGroups )    
        .def( 
            "cutGroupIndex"
            , &::SireMol::PropertyExtractor::cutGroupIndex )    
        .def( 
            "cutGroups"
            , &::SireMol::PropertyExtractor::cutGroups )    
        .def( 
            "elements"
            , &::SireMol::PropertyExtractor::elements )    
        .def( 
            "property"
            , &::SireMol::PropertyExtractor::property
            , ( bp::arg("name") ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::PropertyExtractor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::PropertyExtractor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

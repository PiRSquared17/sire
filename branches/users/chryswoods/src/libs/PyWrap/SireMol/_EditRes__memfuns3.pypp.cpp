// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_EditRes__memfuns3.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_EditRes_memfuns3( EditRes_exposer_t& EditRes_exposer ){

    { //::SireMol::EditRes::cutGroupsByID
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::EditRes::*cutGroupsByID_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "cutGroupsByID"
            , cutGroupsByID_function_type( &::SireMol::EditRes::cutGroupsByID ) );
    
    }

    { //::SireMol::EditRes::cutGroupsByNum
    
        typedef ::QHash<SireMol::CutGroupNum,SireMol::CutGroup> ( ::SireMol::EditRes::*cutGroupsByNum_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "cutGroupsByNum"
            , cutGroupsByNum_function_type( &::SireMol::EditRes::cutGroupsByNum ) );
    
    }

    { //::SireMol::EditRes::dihedral
    
        typedef ::SireMaths::Torsion ( ::SireMol::EditRes::*dihedral_function_type )( ::SireMol::Dihedral const & ) const;
        
        EditRes_exposer.def( 
            "dihedral"
            , dihedral_function_type( &::SireMol::EditRes::dihedral )
            , ( bp::arg("dih") ) );
    
    }

    { //::SireMol::EditRes::getWeight
    
        typedef double ( ::SireMol::EditRes::*getWeight_function_type )( ::QStringList const &,::QStringList const &,::SireMol::WeightFunction const & ) const;
        
        EditRes_exposer.def( 
            "getWeight"
            , getWeight_function_type( &::SireMol::EditRes::getWeight )
            , ( bp::arg("group0"), bp::arg("group1"), bp::arg("weightfunc") ) );
    
    }

    { //::SireMol::EditRes::getWeight
    
        typedef double ( ::SireMol::EditRes::*getWeight_function_type )( ::QSet<SireMol::AtomIndex> const &,::QSet<SireMol::AtomIndex> const &,::SireMol::WeightFunction const & ) const;
        
        EditRes_exposer.def( 
            "getWeight"
            , getWeight_function_type( &::SireMol::EditRes::getWeight )
            , ( bp::arg("group0"), bp::arg("group1"), bp::arg("weightfunc") ) );
    
    }

    { //::SireMol::EditRes::improper
    
        typedef ::SireMaths::Torsion ( ::SireMol::EditRes::*improper_function_type )( ::SireMol::Improper const & ) const;
        
        EditRes_exposer.def( 
            "improper"
            , improper_function_type( &::SireMol::EditRes::improper )
            , ( bp::arg("improper") ) );
    
    }

    { //::SireMol::EditRes::info
    
        typedef ::SireMol::ResidueInfo ( ::SireMol::EditRes::*info_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "info"
            , info_function_type( &::SireMol::EditRes::info ) );
    
    }

    { //::SireMol::EditRes::isEmpty
    
        typedef bool ( ::SireMol::EditRes::*isEmpty_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::EditRes::isEmpty ) );
    
    }

    { //::SireMol::EditRes::measure
    
        typedef double ( ::SireMol::EditRes::*measure_function_type )( ::SireMol::Bond const & ) const;
        
        EditRes_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::EditRes::measure )
            , ( bp::arg("bnd") ) );
    
    }

    { //::SireMol::EditRes::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::EditRes::*measure_function_type )( ::SireMol::Angle const & ) const;
        
        EditRes_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::EditRes::measure )
            , ( bp::arg("ang") ) );
    
    }

    { //::SireMol::EditRes::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::EditRes::*measure_function_type )( ::SireMol::Dihedral const & ) const;
        
        EditRes_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::EditRes::measure )
            , ( bp::arg("dih") ) );
    
    }

    { //::SireMol::EditRes::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::EditRes::*measure_function_type )( ::SireMol::Improper const & ) const;
        
        EditRes_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::EditRes::measure )
            , ( bp::arg("improper") ) );
    
    }

    { //::SireMol::EditRes::molecule
    
        typedef ::SireMol::EditMol ( ::SireMol::EditRes::*molecule_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "molecule"
            , molecule_function_type( &::SireMol::EditRes::molecule ) );
    
    }

    { //::SireMol::EditRes::nAtoms
    
        typedef int ( ::SireMol::EditRes::*nAtoms_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::EditRes::nAtoms ) );
    
    }

    { //::SireMol::EditRes::nAtoms
    
        typedef int ( ::SireMol::EditRes::*nAtoms_function_type )( ::SireMol::CutGroupID ) const;
        
        EditRes_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::EditRes::nAtoms )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::EditRes::nAtoms
    
        typedef int ( ::SireMol::EditRes::*nAtoms_function_type )( ::SireMol::CutGroupNum ) const;
        
        EditRes_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::EditRes::nAtoms )
            , ( bp::arg("cgnum") ) );
    
    }

    { //::SireMol::EditRes::nBonds
    
        typedef int ( ::SireMol::EditRes::*nBonds_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "nBonds"
            , nBonds_function_type( &::SireMol::EditRes::nBonds ) );
    
    }

    { //::SireMol::EditRes::nCutGroups
    
        typedef int ( ::SireMol::EditRes::*nCutGroups_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "nCutGroups"
            , nCutGroups_function_type( &::SireMol::EditRes::nCutGroups ) );
    
    }

    { //::SireMol::EditRes::nInterBonds
    
        typedef int ( ::SireMol::EditRes::*nInterBonds_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "nInterBonds"
            , nInterBonds_function_type( &::SireMol::EditRes::nInterBonds ) );
    
    }

    { //::SireMol::EditRes::nIntraBonds
    
        typedef int ( ::SireMol::EditRes::*nIntraBonds_function_type )(  ) const;
        
        EditRes_exposer.def( 
            "nIntraBonds"
            , nIntraBonds_function_type( &::SireMol::EditRes::nIntraBonds ) );
    
    }

}

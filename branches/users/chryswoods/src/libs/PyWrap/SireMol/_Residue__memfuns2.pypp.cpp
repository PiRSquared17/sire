// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Residue__memfuns2.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_Residue_memfuns2( Residue_exposer_t& Residue_exposer ){

    { //::SireMol::Residue::coordinates
    
        typedef ::QHash<QString,SireMaths::Vector> ( ::SireMol::Residue::*coordinates_function_type )( ::QSet<QString> const & ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates )
            , ( bp::arg("atomnames") ) );
    
    }

    { //::SireMol::Residue::coordinates
    
        typedef ::QHash<SireMol::AtomIndex,SireMaths::Vector> ( ::SireMol::Residue::*coordinates_function_type )( ::QSet<SireMol::AtomIndex> const & ) const;
        
        Residue_exposer.def( 
            "coordinates"
            , coordinates_function_type( &::SireMol::Residue::coordinates )
            , ( bp::arg("atms") ) );
    
    }

    { //::SireMol::Residue::cutGroup
    
        typedef ::SireMol::CutGroup ( ::SireMol::Residue::*cutGroup_function_type )( ::SireMol::CutGroupID ) const;
        
        Residue_exposer.def( 
            "cutGroup"
            , cutGroup_function_type( &::SireMol::Residue::cutGroup )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Residue::cutGroups
    
        typedef ::QHash<SireMol::CutGroupID,SireMol::CutGroup> ( ::SireMol::Residue::*cutGroups_function_type )(  ) const;
        
        Residue_exposer.def( 
            "cutGroups"
            , cutGroups_function_type( &::SireMol::Residue::cutGroups ) );
    
    }

    { //::SireMol::Residue::dihedral
    
        typedef ::SireMaths::Torsion ( ::SireMol::Residue::*dihedral_function_type )( ::SireMol::Dihedral const & ) const;
        
        Residue_exposer.def( 
            "dihedral"
            , dihedral_function_type( &::SireMol::Residue::dihedral )
            , ( bp::arg("dih") ) );
    
    }

    { //::SireMol::Residue::getWeight
    
        typedef double ( ::SireMol::Residue::*getWeight_function_type )( ::QStringList const &,::QStringList const &,::SireMol::WeightFunction const & ) const;
        
        Residue_exposer.def( 
            "getWeight"
            , getWeight_function_type( &::SireMol::Residue::getWeight )
            , ( bp::arg("group0"), bp::arg("group1"), bp::arg("weightfunc") ) );
    
    }

    { //::SireMol::Residue::getWeight
    
        typedef double ( ::SireMol::Residue::*getWeight_function_type )( ::QSet<SireMol::AtomIndex> const &,::QSet<SireMol::AtomIndex> const &,::SireMol::WeightFunction const & ) const;
        
        Residue_exposer.def( 
            "getWeight"
            , getWeight_function_type( &::SireMol::Residue::getWeight )
            , ( bp::arg("group0"), bp::arg("group1"), bp::arg("weightfunc") ) );
    
    }

    { //::SireMol::Residue::idString
    
        typedef ::QString ( ::SireMol::Residue::*idString_function_type )(  ) const;
        
        Residue_exposer.def( 
            "idString"
            , idString_function_type( &::SireMol::Residue::idString ) );
    
    }

    { //::SireMol::Residue::improper
    
        typedef ::SireMaths::Torsion ( ::SireMol::Residue::*improper_function_type )( ::SireMol::Improper const & ) const;
        
        Residue_exposer.def( 
            "improper"
            , improper_function_type( &::SireMol::Residue::improper )
            , ( bp::arg("improper") ) );
    
    }

    { //::SireMol::Residue::info
    
        typedef ::SireMol::ResidueInfo const & ( ::SireMol::Residue::*info_function_type )(  ) const;
        
        Residue_exposer.def( 
            "info"
            , info_function_type( &::SireMol::Residue::info )
            , bp::return_value_policy< bp::copy_const_reference >() );
    
    }

    { //::SireMol::Residue::isEmpty
    
        typedef bool ( ::SireMol::Residue::*isEmpty_function_type )(  ) const;
        
        Residue_exposer.def( 
            "isEmpty"
            , isEmpty_function_type( &::SireMol::Residue::isEmpty ) );
    
    }

    { //::SireMol::Residue::measure
    
        typedef double ( ::SireMol::Residue::*measure_function_type )( ::SireMol::Bond const & ) const;
        
        Residue_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Residue::measure )
            , ( bp::arg("bnd") ) );
    
    }

    { //::SireMol::Residue::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::Residue::*measure_function_type )( ::SireMol::Angle const & ) const;
        
        Residue_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Residue::measure )
            , ( bp::arg("ang") ) );
    
    }

    { //::SireMol::Residue::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::Residue::*measure_function_type )( ::SireMol::Dihedral const & ) const;
        
        Residue_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Residue::measure )
            , ( bp::arg("dih") ) );
    
    }

    { //::SireMol::Residue::measure
    
        typedef ::SireMaths::Angle ( ::SireMol::Residue::*measure_function_type )( ::SireMol::Improper const & ) const;
        
        Residue_exposer.def( 
            "measure"
            , measure_function_type( &::SireMol::Residue::measure )
            , ( bp::arg("improper") ) );
    
    }

    { //::SireMol::Residue::nAtoms
    
        typedef int ( ::SireMol::Residue::*nAtoms_function_type )(  ) const;
        
        Residue_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::Residue::nAtoms ) );
    
    }

    { //::SireMol::Residue::nAtoms
    
        typedef int ( ::SireMol::Residue::*nAtoms_function_type )( ::SireMol::CutGroupID ) const;
        
        Residue_exposer.def( 
            "nAtoms"
            , nAtoms_function_type( &::SireMol::Residue::nAtoms )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Residue::nBonds
    
        typedef int ( ::SireMol::Residue::*nBonds_function_type )(  ) const;
        
        Residue_exposer.def( 
            "nBonds"
            , nBonds_function_type( &::SireMol::Residue::nBonds ) );
    
    }

    { //::SireMol::Residue::nCutGroups
    
        typedef int ( ::SireMol::Residue::*nCutGroups_function_type )(  ) const;
        
        Residue_exposer.def( 
            "nCutGroups"
            , nCutGroups_function_type( &::SireMol::Residue::nCutGroups ) );
    
    }

    { //::SireMol::Residue::nInterBonds
    
        typedef int ( ::SireMol::Residue::*nInterBonds_function_type )(  ) const;
        
        Residue_exposer.def( 
            "nInterBonds"
            , nInterBonds_function_type( &::SireMol::Residue::nInterBonds ) );
    
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "_NewAtom__enums.pypp.hpp"
#include "_NewAtom__unnamed_enums.pypp.hpp"
#include "_NewAtom__classes.pypp.hpp"
#include "_NewAtom__memfuns.pypp.hpp"
#include "_NewAtom__memfuns_virtual.pypp.hpp"
#include "_NewAtom__memfuns_pvirtual.pypp.hpp"
#include "_NewAtom__protected_memfuns.pypp.hpp"

namespace bp = boost::python;

void register_NewAtom_class(){

{ //::SireMol::NewAtom
    typedef bp::class_< SireMol::NewAtom > NewAtom_exposer_t;
    NewAtom_exposer_t NewAtom_exposer = NewAtom_exposer_t( "NewAtom" );
    bp::scope NewAtom_scope( NewAtom_exposer );
    NewAtom_exposer.def( bp::init< >() );
    NewAtom_exposer.def( bp::init< SireMol::CGAtomID const &, SireMol::Molecule const & >(( bp::arg("cgatomid"), bp::arg("molecule") )) );
    NewAtom_exposer.def( bp::init< SireMol::IDMolAtom const &, SireMol::Molecule const & >(( bp::arg("idmolatom"), bp::arg("molecule") )) );
    NewAtom_exposer.def( bp::init< QString const &, SireMol::Residue const & >(( bp::arg("name"), bp::arg("residue") )) );
    NewAtom_exposer.def( bp::init< SireMol::AtomID, SireMol::Residue const & >(( bp::arg("i"), bp::arg("residue") )) );
    register_NewAtom_memfuns(NewAtom_exposer);
    NewAtom_exposer.def( "as__scope_SireMaths_scope_Vector", &SireMol::NewAtom::operator ::SireMaths::Vector  );
    NewAtom_exposer.def( "as__scope_SireMol_scope_AtomInfo_const__ref_", &SireMol::NewAtom::operator ::SireMol::AtomInfo const & ,bp::return_value_policy< bp::copy_const_reference >() );
    NewAtom_exposer.def( "as__scope_SireMol_scope_Element", &SireMol::NewAtom::operator ::SireMol::Element  );
    NewAtom_exposer.def( bp::self != bp::self );
    NewAtom_exposer.def( bp::self += bp::other< SireMaths::Vector >() );
    NewAtom_exposer.def( bp::self -= bp::other< SireMaths::Vector >() );
    NewAtom_exposer.def( bp::self == bp::self );
}

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "NewAtom.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "SireVol/space.h"

namespace bp = boost::python;

SireMol::NewAtom __copy__(const SireMol::NewAtom &other){ return SireMol::NewAtom(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_NewAtom_class(){

    bp::class_< SireMol::NewAtom, bp::bases< SireMol::MoleculeView > >( "NewAtom" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::CGAtomID const &, SireMol::Molecule const & >(( bp::arg("cgatomid"), bp::arg("molecule") )) )    
        .def( bp::init< SireMol::IDMolAtom const &, SireMol::Molecule const & >(( bp::arg("idmolatom"), bp::arg("molecule") )) )    
        .def( bp::init< QString const &, SireMol::Residue const & >(( bp::arg("name"), bp::arg("residue") )) )    
        .def( bp::init< SireMol::AtomID, SireMol::Residue const & >(( bp::arg("i"), bp::arg("residue") )) )    
        .def( 
            "ID"
            , &::SireMol::NewAtom::ID )    
        .def( 
            "bondedAtoms"
            , &::SireMol::NewAtom::bondedAtoms )    
        .def( 
            "bondedResidues"
            , &::SireMol::NewAtom::bondedResidues )    
        .def( 
            "cgAtomID"
            , &::SireMol::NewAtom::cgAtomID
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "coordinates"
            , &::SireMol::NewAtom::coordinates )    
        .def( 
            "element"
            , &::SireMol::NewAtom::element )    
        .def( 
            "idString"
            , &::SireMol::NewAtom::idString )    
        .def( 
            "info"
            , &::SireMol::NewAtom::info
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "molecule"
            , &::SireMol::NewAtom::molecule )    
        .def( 
            "name"
            , &::SireMol::NewAtom::name )    
        .def( "as__scope_SireMaths_scope_Vector", &SireMol::NewAtom::operator ::SireMaths::Vector  )    
        .def( "as__scope_SireMol_scope_AtomInfo_const__ref_", &SireMol::NewAtom::operator ::SireMol::AtomInfo const & ,bp::return_value_policy< bp::copy_const_reference >() )    
        .def( "as__scope_SireMol_scope_Element", &SireMol::NewAtom::operator ::SireMol::Element  )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "property"
            , &::SireMol::NewAtom::property
            , ( bp::arg("name") ) )    
        .def( 
            "residue"
            , &::SireMol::NewAtom::residue )    
        .def( 
            "toString"
            , &::SireMol::NewAtom::toString )    
        .def( 
            "version"
            , &::SireMol::NewAtom::version
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "withinBondRadii"
            , &::SireMol::NewAtom::withinBondRadii
            , ( bp::arg("other"), bp::arg("err")=0 ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::NewAtom >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::NewAtom >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMol::NewAtom > );

}

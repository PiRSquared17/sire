// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomSelector.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::AtomSelector __copy__(const SireMol::AtomSelector &other){ return SireMol::AtomSelector(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::AtomSelector&){ return "SireMol::AtomSelector";}

void register_AtomSelector_class(){

    bp::class_< SireMol::AtomSelector, bp::bases< SireMol::MolDataView > >( "AtomSelector" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::MoleculeView const & >(( bp::arg("molecule") )) )    
        .def( 
            "add"
            , &::SireMol::AtomSelector::add
            , ( bp::arg("selection") ) )    
        .def( 
            "deselectAll"
            , &::SireMol::AtomSelector::deselectAll )    
        .def( 
            "invert"
            , &::SireMol::AtomSelector::invert )    
        .def( 
            "remove"
            , &::SireMol::AtomSelector::remove
            , ( bp::arg("selection") ) )    
        .def( 
            "selectAll"
            , &::SireMol::AtomSelector::selectAll )    
        .def( 
            "selectNone"
            , &::SireMol::AtomSelector::selectNone )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::AtomSelector >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::AtomSelector >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

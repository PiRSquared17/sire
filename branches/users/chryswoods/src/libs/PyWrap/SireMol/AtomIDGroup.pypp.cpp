// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomIDGroup.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

SireMol::AtomIDGroup __copy__(const SireMol::AtomIDGroup &other){ return SireMol::AtomIDGroup(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMol::AtomIDGroup&){ return "SireMol::AtomIDGroup";}

void register_AtomIDGroup_class(){

    bp::class_< SireMol::AtomIDGroup >( "AtomIDGroup" )    
        .def( bp::init< >() )    
        .def( bp::init< QSet<SireMol::AtomIndex> const & >(( bp::arg("atoms") )) )    
        .def( bp::init< QSet<SireMol::ResNum> const & >(( bp::arg("residues") )) )    
        .def( bp::init< QSet<SireMol::ResNum> const &, QSet<SireMol::AtomIndex> const & >(( bp::arg("residues"), bp::arg("atoms") )) )    
        .def( 
            "add"
            , (void ( ::SireMol::AtomIDGroup::* )( ::SireMol::ResNum ) )( &::SireMol::AtomIDGroup::add )
            , ( bp::arg("resnum") ) )    
        .def( 
            "add"
            , (void ( ::SireMol::AtomIDGroup::* )( ::SireMol::AtomIndex const & ) )( &::SireMol::AtomIDGroup::add )
            , ( bp::arg("atom") ) )    
        .def( 
            "atoms"
            , &::SireMol::AtomIDGroup::atoms
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "clear"
            , &::SireMol::AtomIDGroup::clear )    
        .def( 
            "contains"
            , (bool ( ::SireMol::AtomIDGroup::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomIDGroup::contains )
            , ( bp::arg("resnum") ) )    
        .def( 
            "contains"
            , (bool ( ::SireMol::AtomIDGroup::* )( ::SireMol::AtomIndex const & ) const)( &::SireMol::AtomIDGroup::contains )
            , ( bp::arg("atom") ) )    
        .def( 
            "intersects"
            , (bool ( ::SireMol::AtomIDGroup::* )( ::QSet<SireMol::AtomIndex> const & ) const)( &::SireMol::AtomIDGroup::intersects )
            , ( bp::arg("atoms") ) )    
        .def( 
            "inventory"
            , &::SireMol::AtomIDGroup::inventory )    
        .def( 
            "isEmpty"
            , &::SireMol::AtomIDGroup::isEmpty )    
        .def( 
            "residues"
            , &::SireMol::AtomIDGroup::residues
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "simplify"
            , &::SireMol::AtomIDGroup::simplify )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMol::AtomIDGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMol::AtomIDGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

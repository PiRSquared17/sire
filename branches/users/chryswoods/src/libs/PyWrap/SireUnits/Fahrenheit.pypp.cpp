// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Fahrenheit.pypp.hpp"
#include "boost/python.hpp"
#include "sireunits_headers.h"

namespace bp = boost::python;

SireUnits::Fahrenheit __copy__(const SireUnits::Fahrenheit &other){ return SireUnits::Fahrenheit(other); }

const char* pvt_get_name(const SireUnits::Fahrenheit&){ return "SireUnits::Fahrenheit";}

void register_Fahrenheit_class(){

    bp::class_< SireUnits::Fahrenheit, bp::bases< SireUnits::Dimension::TempBase > >( "Fahrenheit" )    
        .def( bp::init< >() )    
        .def( bp::init< double >(( bp::arg("value") )) )    
        .def( bp::init< SireUnits::Dimension::Temperature const & >(( bp::arg("temp") )) )    
        .def( bp::init< SireUnits::Dimension::TempBase const & >(( bp::arg("other") )) )    
        .def( 
            "convertFromInternal"
            , (double ( ::SireUnits::Fahrenheit::* )( double ) const)( &::SireUnits::Fahrenheit::convertFromInternal )
            , ( bp::arg("value") ) )    
        .def( 
            "convertFromInternal"
            , (double ( ::SireUnits::Fahrenheit::* )(  ) const)( &::SireUnits::Fahrenheit::convertFromInternal ) )    
        .def( 
            "convertToInternal"
            , &::SireUnits::Fahrenheit::convertToInternal
            , ( bp::arg("value") ) )    
        .def( bp::self * bp::other< double >() )    
        .def( bp::self * bp::other< int >() )    
        .def( bp::self + bp::self )    
        .def( bp::self + bp::other< SireUnits::Dimension::Temperature >() )    
        .def( bp::self += bp::self )    
        .def( bp::self += bp::other< SireUnits::Dimension::Temperature >() )    
        .def( -bp::self )    
        .def( bp::self - bp::self )    
        .def( bp::self - bp::other< SireUnits::Dimension::Temperature >() )    
        .def( bp::self -= bp::self )    
        .def( bp::self -= bp::other< SireUnits::Dimension::Temperature >() )    
        .def( bp::self / bp::other< double >() )    
        .def( bp::self / bp::other< int >() )    
        .def( bp::other< int >() * bp::self )    
        .def( bp::other< double >() * bp::self )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &pvt_get_name);

}

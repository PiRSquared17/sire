// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "TempBase.pypp.hpp"
#include "boost/python.hpp"
#include "sireunits_headers.h"

namespace bp = boost::python;

const char* pvt_get_name(const SireUnits::Dimension::TempBase&){ return "SireUnits::Dimension::TempBase";}

void register_TempBase_class(){

    bp::class_< SireUnits::Dimension::TempBase, boost::noncopyable >( "TempBase", bp::no_init )    
        .def( 
            "convertFromInternal"
            , (double ( ::SireUnits::Dimension::TempBase::* )( double ) const)( &::SireUnits::Dimension::TempBase::convertFromInternal )
            , ( bp::arg("value") ) )    
        .def( 
            "convertFromInternal"
            , (double ( ::SireUnits::Dimension::TempBase::* )(  ) const)( &::SireUnits::Dimension::TempBase::convertFromInternal ) )    
        .def( 
            "convertToInternal"
            , &::SireUnits::Dimension::TempBase::convertToInternal
            , ( bp::arg("value") ) )    
        .def( 
            "in"
            , (double ( ::SireUnits::Dimension::TempBase::* )( ::SireUnits::Dimension::TempBase const & ) const)( &::SireUnits::Dimension::TempBase::in )
            , ( bp::arg("other") ) )    
        .def( 
            "in"
            , (double ( ::SireUnits::Dimension::TempBase::* )( ::SireUnits::Dimension::Temperature const & ) const)( &::SireUnits::Dimension::TempBase::in )
            , ( bp::arg("temp") ) )    
        .def( "as__scope_SireUnits_scope_Dimension_scope_Temperature", &SireUnits::Dimension::TempBase::operator ::SireUnits::Dimension::Temperature  )    
        .def( bp::self != bp::self )    
        .def( bp::self != bp::other< SireUnits::Dimension::Temperature >() )    
        .def( bp::self == bp::self )    
        .def( bp::self == bp::other< SireUnits::Dimension::Temperature >() )    
        .def( "__str__", &pvt_get_name);

}

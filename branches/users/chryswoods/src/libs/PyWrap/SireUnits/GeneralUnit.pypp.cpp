// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "GeneralUnit.pypp.hpp"
#include "boost/python.hpp"
#include "sireunits_headers.h"

namespace bp = boost::python;

SireUnits::Dimension::GeneralUnit __copy__(const SireUnits::Dimension::GeneralUnit &other){ return SireUnits::Dimension::GeneralUnit(other); }

#include "SirePy/str.hpp"

void register_GeneralUnit_class(){

    bp::class_< SireUnits::Dimension::GeneralUnit >( "GeneralUnit" )    
        .def( bp::init< >() )    
        .def( 
            "ANGLE"
            , &::SireUnits::Dimension::GeneralUnit::ANGLE )    
        .def( 
            "CHARGE"
            , &::SireUnits::Dimension::GeneralUnit::CHARGE )    
        .def( 
            "LENGTH"
            , &::SireUnits::Dimension::GeneralUnit::LENGTH )    
        .def( 
            "MASS"
            , &::SireUnits::Dimension::GeneralUnit::MASS )    
        .def( 
            "QUANTITY"
            , &::SireUnits::Dimension::GeneralUnit::QUANTITY )    
        .def( 
            "TEMPERATURE"
            , &::SireUnits::Dimension::GeneralUnit::TEMPERATURE )    
        .def( 
            "TIME"
            , &::SireUnits::Dimension::GeneralUnit::TIME )    
        .def( 
            "convertFromInternal"
            , &::SireUnits::Dimension::GeneralUnit::convertFromInternal
            , ( bp::arg("value") ) )    
        .def( 
            "convertToInternal"
            , &::SireUnits::Dimension::GeneralUnit::convertToInternal
            , ( bp::arg("value") ) )    
        .def( 
            "invert"
            , &::SireUnits::Dimension::GeneralUnit::invert )    
        .def( bp::self != bp::self )    
        .def( bp::self * bp::self )    
        .def( bp::self * bp::other< double >() )    
        .def( bp::self * bp::other< int >() )    
        .def( bp::self *= bp::self )    
        .def( bp::self *= bp::other< double >() )    
        .def( bp::self *= bp::other< int >() )    
        .def( bp::self + bp::self )    
        .def( bp::self += bp::self )    
        .def( -bp::self )    
        .def( bp::self - bp::self )    
        .def( bp::self -= bp::self )    
        .def( bp::self / bp::self )    
        .def( bp::self / bp::other< double >() )    
        .def( bp::self / bp::other< int >() )    
        .def( bp::self /= bp::self )    
        .def( bp::self /= bp::other< double >() )    
        .def( bp::self /= bp::other< int >() )    
        .def( bp::self == bp::self )    
        .def( 
            "scaleFactor"
            , &::SireUnits::Dimension::GeneralUnit::scaleFactor )    
        .def( 
            "to"
            , &::SireUnits::Dimension::GeneralUnit::to
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , &::SireUnits::Dimension::GeneralUnit::toString )    
        .def( bp::other< int >() * bp::self )    
        .def( bp::other< double >() * bp::self )    
        .def( bp::other< int >() / bp::self )    
        .def( bp::other< double >() / bp::self )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &SirePy::__str__< ::SireUnits::Dimension::GeneralUnit > );

}

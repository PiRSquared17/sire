// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "DerivedUnit.pypp.hpp"
#include "boost/python.hpp"
#include "sireunits_headers.h"

namespace bp = boost::python;

SireUnits::Dimension::DerivedUnit __copy__(const SireUnits::Dimension::DerivedUnit &other){ return SireUnits::Dimension::DerivedUnit(other); }

const char* pvt_get_name(const SireUnits::Dimension::DerivedUnit&){ return "SireUnits::Dimension::DerivedUnit";}

void register_DerivedUnit_class(){

    bp::class_< SireUnits::Dimension::DerivedUnit, bp::bases< SireUnits::Dimension::Unit > >( "DerivedUnit" )    
        .def( bp::init< >() )    
        .def( bp::init< double >(( bp::arg("scale") )) )    
        .def( bp::init< SireUnits::Dimension::Unit const & >(( bp::arg("unit") )) )    
        .def( 
            "divide"
            , &::SireUnits::Dimension::DerivedUnit::divide
            , ( bp::arg("unit") ) )    
        .def( 
            "multiply"
            , &::SireUnits::Dimension::DerivedUnit::multiply
            , ( bp::arg("unit") ) )    
        .def( bp::self * bp::other< SireUnits::Dimension::Quantity >() )    
        .def( bp::other< double >() * bp::self )    
        .def( bp::self / bp::other< SireUnits::Dimension::Quantity >() )    
        .def( bp::other< double >() / bp::self )    
        .def( bp::self * bp::other<SireUnits::Dimension::Unit>() )    
        .def( bp::self / bp::other<SireUnits::Dimension::Unit>() )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &pvt_get_name);

}

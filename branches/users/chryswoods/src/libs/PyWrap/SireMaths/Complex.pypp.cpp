// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Complex.pypp.hpp"
#include "boost/python.hpp"
#include "siremaths_headers.h"

namespace bp = boost::python;

SireMaths::Complex __copy__(const SireMaths::Complex &other){ return SireMaths::Complex(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_Complex_class(){

    bp::class_< SireMaths::Complex >( "Complex", bp::init< bp::optional< double, double > >(( bp::arg("r")=0.0, bp::arg("i")=0.0 )) )    
        .def( bp::init< gsl_complex const & >(( bp::arg("complex") )) )    
        .def( 
            "abs"
            , (double ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::abs ) )    
        .def( 
            "abs2"
            , (double ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::abs2 ) )    
        .def( 
            "arg"
            , (double ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::arg ) )    
        .def( 
            "conjugate"
            , (::SireMaths::Complex ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::conjugate ) )    
        .def( 
            "imag"
            , (double ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::imag ) )    
        .def( 
            "inverse"
            , (::SireMaths::Complex ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::inverse ) )    
        .def( 
            "isReal"
            , (bool ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::isReal ) )    
        .def( 
            "isZero"
            , (bool ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::isZero ) )    
        .def( 
            "logAbs"
            , (double ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::logAbs ) )    
        .def( 
            "negative"
            , (::SireMaths::Complex ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::negative ) )    
        .def( bp::self != bp::self )    
        .def( bp::self != bp::other< double >() )    
        .def( bp::self *= bp::self )    
        .def( bp::self *= bp::other< double >() )    
        .def( bp::self += bp::self )    
        .def( bp::self += bp::other< double >() )    
        .def( -bp::self )    
        .def( bp::self -= bp::self )    
        .def( bp::self -= bp::other< double >() )    
        .def( bp::self /= bp::self )    
        .def( bp::self /= bp::other< double >() )    
        .def( bp::self == bp::self )    
        .def( bp::self == bp::other< double >() )    
        .def( 
            "polar"
            , (::SireMaths::Complex (*)( double,double ))( &::SireMaths::Complex::polar )
            , ( bp::arg("r"), bp::arg("theta") ) )    
        .def( 
            "real"
            , (double ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::real ) )    
        .def( 
            "rect"
            , (::SireMaths::Complex (*)( double,double ))( &::SireMaths::Complex::rect )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "setImag"
            , (void ( ::SireMaths::Complex::* )( double ) )( &::SireMaths::Complex::setImag )
            , ( bp::arg("y") ) )    
        .def( 
            "setPolar"
            , (void ( ::SireMaths::Complex::* )( double,double ) )( &::SireMaths::Complex::setPolar )
            , ( bp::arg("r"), bp::arg("theta") ) )    
        .def( 
            "setReal"
            , (void ( ::SireMaths::Complex::* )( double ) )( &::SireMaths::Complex::setReal )
            , ( bp::arg("x") ) )    
        .def( 
            "setRectangular"
            , (void ( ::SireMaths::Complex::* )( double,double ) )( &::SireMaths::Complex::setRectangular )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireMaths::Complex::* )(  ) const)( &::SireMaths::Complex::toString ) )    
        .staticmethod( "polar" )    
        .staticmethod( "rect" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMaths::Complex >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMaths::Complex >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMaths::Complex > );

}

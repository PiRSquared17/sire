// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MajMinVersion.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

void register_MajMinVersion_class(){

    bp::class_< SireBase::MajMinVersion >( "MajMinVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::Incremint * >(( bp::arg("majint") )) )    
        .def( bp::init< SireBase::IDPair const & >(( bp::arg("other") )) )    
        .def( 
            "assertSameMajorVersion"
            , &::SireBase::MajMinVersion::assertSameMajorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameMinorVersion"
            , &::SireBase::MajMinVersion::assertSameMinorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameVersion"
            , &::SireBase::MajMinVersion::assertSameVersion
            , ( bp::arg("other") ) )    
        .def( 
            "incrementMajor"
            , &::SireBase::MajMinVersion::incrementMajor )    
        .def( 
            "incrementMinor"
            , &::SireBase::MajMinVersion::incrementMinor )    
        .def( 
            "major"
            , &::SireBase::MajMinVersion::major )    
        .def( 
            "minor"
            , &::SireBase::MajMinVersion::minor )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "sameMajorVersion"
            , &::SireBase::MajMinVersion::sameMajorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "sameMinorVersion"
            , &::SireBase::MajMinVersion::sameMinorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "sameVersion"
            , &::SireBase::MajMinVersion::sameVersion
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , &::SireBase::MajMinVersion::toString )    
        .def( 
            "version"
            , &::SireBase::MajMinVersion::version
            , bp::return_value_policy< bp::copy_const_reference >() );

}

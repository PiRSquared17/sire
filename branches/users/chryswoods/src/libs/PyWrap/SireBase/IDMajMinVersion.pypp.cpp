// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "IDMajMinVersion.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

void register_IDMajMinVersion_class(){

    bp::class_< SireBase::IDMajMinVersion >( "IDMajMinVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::Incremint * >(( bp::arg("idint") )) )    
        .def( bp::init< SireBase::IDTriple const & >(( bp::arg("other") )) )    
        .def( 
            "ID"
            , &::SireBase::IDMajMinVersion::ID )    
        .def( 
            "assertSameID"
            , &::SireBase::IDMajMinVersion::assertSameID
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameIDAndMajorVersion"
            , &::SireBase::IDMajMinVersion::assertSameIDAndMajorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameIDAndVersion"
            , &::SireBase::IDMajMinVersion::assertSameIDAndVersion
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameMajorVersion"
            , &::SireBase::IDMajMinVersion::assertSameMajorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameMinorVersion"
            , &::SireBase::IDMajMinVersion::assertSameMinorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameVersion"
            , &::SireBase::IDMajMinVersion::assertSameVersion
            , ( bp::arg("other") ) )    
        .def( 
            "incrementID"
            , &::SireBase::IDMajMinVersion::incrementID )    
        .def( 
            "incrementMajor"
            , &::SireBase::IDMajMinVersion::incrementMajor )    
        .def( 
            "incrementMinor"
            , &::SireBase::IDMajMinVersion::incrementMinor )    
        .def( 
            "major"
            , &::SireBase::IDMajMinVersion::major )    
        .def( 
            "minor"
            , &::SireBase::IDMajMinVersion::minor )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "sameID"
            , &::SireBase::IDMajMinVersion::sameID
            , ( bp::arg("other") ) )    
        .def( 
            "sameIDAndMajorVersion"
            , &::SireBase::IDMajMinVersion::sameIDAndMajorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "sameIDAndVersion"
            , &::SireBase::IDMajMinVersion::sameIDAndVersion
            , ( bp::arg("other") ) )    
        .def( 
            "sameMajorVersion"
            , &::SireBase::IDMajMinVersion::sameMajorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "sameMinorVersion"
            , &::SireBase::IDMajMinVersion::sameMinorVersion
            , ( bp::arg("other") ) )    
        .def( 
            "sameVersion"
            , &::SireBase::IDMajMinVersion::sameVersion
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , &::SireBase::IDMajMinVersion::toString )    
        .def( 
            "version"
            , &::SireBase::IDMajMinVersion::version
            , bp::return_value_policy< bp::copy_const_reference >() );

}

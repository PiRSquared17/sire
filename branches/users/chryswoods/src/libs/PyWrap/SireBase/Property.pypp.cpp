// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Property.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

SireBase::Property __copy__(const SireBase::Property &other){ return SireBase::Property(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireBase::Property&){ return "SireBase::Property";}

void register_Property_class(){

    bp::class_< SireBase::Property >( "Property" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::SharedPolyPointer<SireBase::PropertyBase> const & >(( bp::arg("ptr") )) )    
        .def( bp::init< SireBase::PropertyBase const & >(( bp::arg("property") )) )    
        .def( bp::init< SireBase::PropertyBase * >(( bp::arg("property") )) )    
        .def( bp::init< QVariant const & >(( bp::arg("value") )) )    
        .def( 
            "base"
            , (::SireBase::PropertyBase const & ( ::SireBase::Property::* )(  ) const)( &::SireBase::Property::base )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "what"
            , (char const * ( ::SireBase::Property::* )(  ) const)( &::SireBase::Property::what ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireBase::Property >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireBase::Property >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

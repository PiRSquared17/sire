// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterGroupCLJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::InterGroupCLJFF __copy__(const SireMM::InterGroupCLJFF &other){ return SireMM::InterGroupCLJFF(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_InterGroupCLJFF_class(){

    { //::SireMM::InterGroupCLJFF
        typedef bp::class_< SireMM::InterGroupCLJFF, bp::bases< SireMM::CLJFF > > InterGroupCLJFF_exposer_t;
        InterGroupCLJFF_exposer_t InterGroupCLJFF_exposer = InterGroupCLJFF_exposer_t( "InterGroupCLJFF" );
        bp::scope InterGroupCLJFF_scope( InterGroupCLJFF_exposer );
        bp::class_< SireMM::InterGroupCLJFF::Components, bp::bases< SireMM::CLJFF::Components > >( "Components" )    
            .def( bp::init< >() )    
            .def( bp::init< SireFF::FFBase const &, SireCAS::Symbols const & >(( bp::arg("ffbase"), bp::arg("symbols") )) );
        bp::class_< SireMM::InterGroupCLJFF::Groups, bp::bases< SireMM::CLJFF::Groups > >( "Groups" )    
            .def( bp::init< >() )    
            .def( 
                "A"
                , (::SireFF::FFBase::Group ( ::SireMM::InterGroupCLJFF::Groups::* )(  ) const)( &::SireMM::InterGroupCLJFF::Groups::A ) )    
            .def( 
                "B"
                , (::SireFF::FFBase::Group ( ::SireMM::InterGroupCLJFF::Groups::* )(  ) const)( &::SireMM::InterGroupCLJFF::Groups::B ) );
        bp::class_< SireMM::InterGroupCLJFF::Parameters, bp::bases< SireMM::CLJFF::Parameters > >( "Parameters" )    
            .def( bp::init< >() );
        InterGroupCLJFF_exposer.def( bp::init< >() );
        InterGroupCLJFF_exposer.def( bp::init< SireVol::Space const &, SireMM::SwitchingFunction const & >(( bp::arg("space"), bp::arg("switchfunc") )) );
        { //::SireMM::InterGroupCLJFF::add
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*add_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterGroupCLJFF::add )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCLJFF::addTo
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*addTo_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireMM::InterGroupCLJFF::addTo )
                , ( bp::arg("group"), bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCLJFF::addToA
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*addToA_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "addToA"
                , addToA_function_type( &::SireMM::InterGroupCLJFF::addToA )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCLJFF::addToB
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*addToB_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "addToB"
                , addToB_function_type( &::SireMM::InterGroupCLJFF::addToB )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCLJFF::change
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*change_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterGroupCLJFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::contains
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*contains_function_type )( ::SireMol::PartialMolecule const & ) const;
            
            InterGroupCLJFF_exposer.def( 
                "contains"
                , contains_function_type( &::SireMM::InterGroupCLJFF::contains )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::contains
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*contains_function_type )( ::SireMol::PartialMolecule const &,::SireFF::FFBase::Group const & ) const;
            
            InterGroupCLJFF_exposer.def( 
                "contains"
                , contains_function_type( &::SireMM::InterGroupCLJFF::contains )
                , ( bp::arg("molecule"), bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireMM::InterGroupCLJFF::*contents_function_type )(  ) const;
            
            InterGroupCLJFF_exposer.def( 
                "contents"
                , contents_function_type( &::SireMM::InterGroupCLJFF::contents ) );
        
        }
        { //::SireMM::InterGroupCLJFF::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireMM::InterGroupCLJFF::*contents_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            InterGroupCLJFF_exposer.def( 
                "contents"
                , contents_function_type( &::SireMM::InterGroupCLJFF::contents )
                , ( bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::groups
        
            typedef ::SireMM::InterGroupCLJFF::Groups const & ( ::SireMM::InterGroupCLJFF::*groups_function_type )(  ) const;
            
            InterGroupCLJFF_exposer.def( 
                "groups"
                , groups_function_type( &::SireMM::InterGroupCLJFF::groups )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::InterGroupCLJFF::groupsReferringTo
        
            typedef ::QSet<SireFF::FFBase::Group> ( ::SireMM::InterGroupCLJFF::*groupsReferringTo_function_type )( ::SireMol::MoleculeID ) const;
            
            InterGroupCLJFF_exposer.def( 
                "groupsReferringTo"
                , groupsReferringTo_function_type( &::SireMM::InterGroupCLJFF::groupsReferringTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireMM::InterGroupCLJFF::*molecule_function_type )( ::SireMol::MoleculeID ) const;
            
            InterGroupCLJFF_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireMM::InterGroupCLJFF::molecule )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireMM::InterGroupCLJFF::*molecule_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) const;
            
            InterGroupCLJFF_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireMM::InterGroupCLJFF::molecule )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireMM::InterGroupCLJFF::*moleculeIDs_function_type )(  ) const;
            
            InterGroupCLJFF_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireMM::InterGroupCLJFF::moleculeIDs ) );
        
        }
        { //::SireMM::InterGroupCLJFF::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireMM::InterGroupCLJFF::*moleculeIDs_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            InterGroupCLJFF_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireMM::InterGroupCLJFF::moleculeIDs )
                , ( bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::mustNowRecalculateFromScratch
        
            typedef void ( ::SireMM::InterGroupCLJFF::*mustNowRecalculateFromScratch_function_type )(  ) ;
            
            InterGroupCLJFF_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_type( &::SireMM::InterGroupCLJFF::mustNowRecalculateFromScratch ) );
        
        }
        { //::SireMM::InterGroupCLJFF::refersTo
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*refersTo_function_type )( ::SireMol::MoleculeID ) const;
            
            InterGroupCLJFF_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireMM::InterGroupCLJFF::refersTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::refersTo
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*refersTo_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) const;
            
            InterGroupCLJFF_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireMM::InterGroupCLJFF::refersTo )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::remove
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*remove_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterGroupCLJFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::removeFrom
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*removeFrom_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "removeFrom"
                , removeFrom_function_type( &::SireMM::InterGroupCLJFF::removeFrom )
                , ( bp::arg("group"), bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::removeFromA
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*removeFromA_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "removeFromA"
                , removeFromA_function_type( &::SireMM::InterGroupCLJFF::removeFromA )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::removeFromB
        
            typedef bool ( ::SireMM::InterGroupCLJFF::*removeFromB_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCLJFF_exposer.def( 
                "removeFromB"
                , removeFromB_function_type( &::SireMM::InterGroupCLJFF::removeFromB )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCLJFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterGroupCLJFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterGroupCLJFF::typeName ) );
        
        }
        { //::SireMM::InterGroupCLJFF::what
        
            typedef char const * ( ::SireMM::InterGroupCLJFF::*what_function_type )(  ) const;
            
            InterGroupCLJFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterGroupCLJFF::what ) );
        
        }
        InterGroupCLJFF_exposer.staticmethod( "typeName" );
        InterGroupCLJFF_exposer.def( "add", &::SireMM::InterGroupCLJFF::add< QList< ::SireMol::PartialMolecule > >,
                                       ( bp::arg("molecules"),
                                         bp::arg("map")=::SireFF::ParameterMap() ) );
        InterGroupCLJFF_exposer.def( "addTo", &::SireMM::InterGroupCLJFF::addTo< QList< ::SireMol::PartialMolecule > >,
                                       ( bp::arg("group"),
                                         bp::arg("molecules"),
                                         bp::arg("map")=::SireFF::ParameterMap() ) );
        InterGroupCLJFF_exposer.def( "addToA", &::SireMM::InterGroupCLJFF::addToA< QList< ::SireMol::PartialMolecule > >,
                                       ( bp::arg("molecules"),
                                         bp::arg("map")=::SireFF::ParameterMap() ) );
        InterGroupCLJFF_exposer.def( "addToB", &::SireMM::InterGroupCLJFF::addToB< QList< ::SireMol::PartialMolecule > >,
                                       ( bp::arg("molecules"),
                                         bp::arg("map")=::SireFF::ParameterMap() ) );
        InterGroupCLJFF_exposer.def( "__copy__", &__copy__);
        InterGroupCLJFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::InterGroupCLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupCLJFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::InterGroupCLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupCLJFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::InterGroupCLJFF > );
    }

}

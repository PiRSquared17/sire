// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterCoulombFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::InterCoulombFF __copy__(const SireMM::InterCoulombFF &other){ return SireMM::InterCoulombFF(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_InterCoulombFF_class(){

    { //::SireMM::InterCoulombFF
        typedef bp::class_< SireMM::InterCoulombFF, bp::bases< SireMM::CoulombFF > > InterCoulombFF_exposer_t;
        InterCoulombFF_exposer_t InterCoulombFF_exposer = InterCoulombFF_exposer_t( "InterCoulombFF" );
        bp::scope InterCoulombFF_scope( InterCoulombFF_exposer );
        bp::class_< SireMM::InterCoulombFF::Components, bp::bases< SireMM::CoulombFF::Components > >( "Components" )    
            .def( bp::init< >() )    
            .def( bp::init< SireFF::FFBase const &, SireCAS::Symbols const & >(( bp::arg("ffbase"), bp::arg("symbols") )) );
        bp::class_< SireMM::InterCoulombFF::Groups, bp::bases< SireMM::CoulombFF::Groups > >( "Groups" )    
            .def( bp::init< >() );
        bp::class_< SireMM::InterCoulombFF::Parameters, bp::bases< SireMM::CoulombFF::Parameters > >( "Parameters" )    
            .def( bp::init< >() );
        InterCoulombFF_exposer.def( bp::init< >() );
        InterCoulombFF_exposer.def( bp::init< SireVol::Space const &, SireMM::SwitchingFunction const & >(( bp::arg("space"), bp::arg("switchingfunction") )) );
        { //::SireMM::InterCoulombFF::add
        
            typedef bool ( ::SireMM::InterCoulombFF::*add_function_type )( ::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            InterCoulombFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterCoulombFF::add )
                , ( bp::arg("mol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterCoulombFF::add
        
            typedef bool ( ::SireMM::InterCoulombFF::*add_function_type )( ::SireMol::Residue const &,::SireFF::ParameterMap const & ) ;
            
            InterCoulombFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterCoulombFF::add )
                , ( bp::arg("res"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterCoulombFF::add
        
            typedef bool ( ::SireMM::InterCoulombFF::*add_function_type )( ::SireMol::NewAtom const &,::SireFF::ParameterMap const & ) ;
            
            InterCoulombFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterCoulombFF::add )
                , ( bp::arg("atom"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterCoulombFF::add
        
            typedef bool ( ::SireMM::InterCoulombFF::*add_function_type )( ::SireMol::Molecule const &,::SireMol::AtomSelection const &,::SireFF::ParameterMap const & ) ;
            
            InterCoulombFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterCoulombFF::add )
                , ( bp::arg("mol"), bp::arg("selected_atoms"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterCoulombFF::change
        
            typedef bool ( ::SireMM::InterCoulombFF::*change_function_type )( ::SireMol::Molecule const & ) ;
            
            InterCoulombFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterCoulombFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterCoulombFF::change
        
            typedef bool ( ::SireMM::InterCoulombFF::*change_function_type )( ::SireMol::Residue const & ) ;
            
            InterCoulombFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterCoulombFF::change )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterCoulombFF::change
        
            typedef bool ( ::SireMM::InterCoulombFF::*change_function_type )( ::SireMol::NewAtom const & ) ;
            
            InterCoulombFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterCoulombFF::change )
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::InterCoulombFF::remove
        
            typedef bool ( ::SireMM::InterCoulombFF::*remove_function_type )( ::SireMol::Molecule const & ) ;
            
            InterCoulombFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterCoulombFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterCoulombFF::remove
        
            typedef bool ( ::SireMM::InterCoulombFF::*remove_function_type )( ::SireMol::Residue const & ) ;
            
            InterCoulombFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterCoulombFF::remove )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterCoulombFF::remove
        
            typedef bool ( ::SireMM::InterCoulombFF::*remove_function_type )( ::SireMol::NewAtom const & ) ;
            
            InterCoulombFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterCoulombFF::remove )
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::InterCoulombFF::remove
        
            typedef bool ( ::SireMM::InterCoulombFF::*remove_function_type )( ::SireMol::Molecule const &,::SireMol::AtomSelection const & ) ;
            
            InterCoulombFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterCoulombFF::remove )
                , ( bp::arg("mol"), bp::arg("selected_atoms") ) );
        
        }
        { //::SireMM::InterCoulombFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterCoulombFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterCoulombFF::typeName ) );
        
        }
        { //::SireMM::InterCoulombFF::what
        
            typedef char const * ( ::SireMM::InterCoulombFF::*what_function_type )(  ) const;
            
            InterCoulombFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterCoulombFF::what ) );
        
        }
        InterCoulombFF_exposer.staticmethod( "typeName" );
        InterCoulombFF_exposer.def( "__copy__", &__copy__);
        InterCoulombFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::InterCoulombFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterCoulombFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::InterCoulombFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterCoulombFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::InterCoulombFF > );
    }

}

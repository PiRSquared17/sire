// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "GeometricCombiningRules.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::GeometricCombiningRules&){ return "SireMM::GeometricCombiningRules";}

void register_GeometricCombiningRules_class(){

    bp::class_< SireMM::GeometricCombiningRules, bp::bases< SireMM::CombiningRuleBase > >( "GeometricCombiningRules" )    
        .def( bp::init< >() )    
        .def( 
            "combine"
            , (void ( ::SireMM::GeometricCombiningRules::* )( ::QVector<SireMM::ChargeParameter> const &,::QVector<SireMM::LJParameter> const &,::QVector<SireMM::ChargeParameter> const &,::QVector<SireMM::LJParameter> const &,::SireMM::CLJPairMatrix & ) const)( &::SireMM::GeometricCombiningRules::combine )
            , ( bp::arg("chg0"), bp::arg("lj0"), bp::arg("chg1"), bp::arg("lj1"), bp::arg("cljmatrix") ) )    
        .def( 
            "combine"
            , (void ( ::SireMM::GeometricCombiningRules::* )( ::QVector<SireMM::ChargeParameter> const &,::QVector<SireMM::LJParameter> const &,::SireMM::CLJPairMatrix & ) const)( &::SireMM::GeometricCombiningRules::combine )
            , ( bp::arg("chgs"), bp::arg("ljs"), bp::arg("cljmatrix") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::GeometricCombiningRules::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::GeometricCombiningRules::* )(  ) const)( &::SireMM::GeometricCombiningRules::what ) )    
        .staticmethod( "typeName" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::GeometricCombiningRules >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::GeometricCombiningRules >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License


#include "boost/python.hpp"

#include "siremm_headers.h"

#include "SireMol/molecule.h"

#include "SireMol/residue.h"

#include "SireMol/newatom.h"

#include "SireMol/atom.h"

#include "AngleAtomID.pypp.hpp"

#include "AngleDB.pypp.hpp"

#include "AngleGenerator.pypp.hpp"

#include "AngleResID.pypp.hpp"

#include "AngleTable.pypp.hpp"

#include "AngleTable_Expression_.pypp.hpp"

#include "ArithmeticCombiningRules.pypp.hpp"

#include "AtomicCharges.pypp.hpp"

#include "AtomicLJs.pypp.hpp"

#include "BondAtomID.pypp.hpp"

#include "BondDB.pypp.hpp"

#include "BondGenerator.pypp.hpp"

#include "BondResID.pypp.hpp"

#include "BondTable.pypp.hpp"

#include "BondTable_Expression_.pypp.hpp"

#include "CLJFF.pypp.hpp"

#include "CLJPair.pypp.hpp"

#include "CLJParameter.pypp.hpp"

#include "ChargeDB.pypp.hpp"

#include "ChargeParameter.pypp.hpp"

#include "ChargeTable.pypp.hpp"

#include "CombiningRuleBase.pypp.hpp"

#include "CombiningRules.pypp.hpp"

#include "DihedralAtomID.pypp.hpp"

#include "DihedralDB.pypp.hpp"

#include "DihedralGenerator.pypp.hpp"

#include "DihedralResID.pypp.hpp"

#include "DihedralTable.pypp.hpp"

#include "DihedralTable_Expression_.pypp.hpp"

#include "GeometricCombiningRules.pypp.hpp"

#include "HarmonicSwitchingFunction.pypp.hpp"

#include "InterCLJFF.pypp.hpp"

#include "InternalDB_MolAngleInfo_.pypp.hpp"

#include "InternalDB_MolBondInfo_.pypp.hpp"

#include "InternalDB_MolDihedralInfo_.pypp.hpp"

#include "InternalGenerator_MolAngleInfo_.pypp.hpp"

#include "InternalGenerator_MolBondInfo_.pypp.hpp"

#include "InternalGenerator_MolDihedralInfo_.pypp.hpp"

#include "InternalTableBase_MolAngleInfo_.pypp.hpp"

#include "InternalTableBase_MolBondInfo_.pypp.hpp"

#include "InternalTableBase_MolDihedralInfo_.pypp.hpp"

#include "InternalTable_MolAngleInfo_Expression_.pypp.hpp"

#include "InternalTable_MolBondInfo_Expression_.pypp.hpp"

#include "InternalTable_MolDihedralInfo_Expression_.pypp.hpp"

#include "LJDB.pypp.hpp"

#include "LJParameter.pypp.hpp"

#include "LJTable.pypp.hpp"

#include "MolAngleInfo.pypp.hpp"

#include "MolBondInfo.pypp.hpp"

#include "MolDihedralInfo.pypp.hpp"

#include "NoCutoff.pypp.hpp"

#include "ResAngleInfo.pypp.hpp"

#include "ResBondInfo.pypp.hpp"

#include "ResDihedralInfo.pypp.hpp"

#include "SwitchFuncBase.pypp.hpp"

#include "SwitchingFunction.pypp.hpp"

#include "Tip4PFF.pypp.hpp"

#include "UreyBradleyDB.pypp.hpp"

#include "UsePassedAngles.pypp.hpp"

#include "UsePassedBonds.pypp.hpp"

#include "UsePassedDihedrals.pypp.hpp"

#include "QVector_LJParameter_.py.h"

#include "QVector_ChargeParameter_.py.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_MM){
    register_QVector_LJParameter_class();

    register_QVector_ChargeParameter_class();

    register_AngleAtomID_class();

    bp::implicitly_convertible< SireMol::Angle const &, SireMM::AngleAtomID >();

    register_InternalDB_MolAngleInfo__class();

    register_AngleDB_class();

    register_InternalGenerator_MolAngleInfo__class();

    register_AngleGenerator_class();

    register_AngleResID_class();

    bp::implicitly_convertible< SireMol::ResNum, SireMM::AngleResID >();

    bp::implicitly_convertible< SireMol::Angle const &, SireMM::AngleResID >();

    register_InternalTableBase_MolAngleInfo__class();

    register_InternalTable_MolAngleInfo_Expression__class();

    register_AngleTable_Expression__class();

    register_AngleTable_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::AngleTable >();

    bp::implicitly_convertible< SireMM::MolAngleInfo const &, SireMM::AngleTable >();

    register_CombiningRuleBase_class();

    register_ArithmeticCombiningRules_class();

    register_AtomicCharges_class();

    bp::implicitly_convertible< QVector<QVector<SireMM::ChargeParameter> > const &, SireMM::AtomicCharges >();

    bp::implicitly_convertible< QVector<SireMM::ChargeParameter> const &, SireMM::AtomicCharges >();

    bp::implicitly_convertible< SireMol::Property const &, SireMM::AtomicCharges >();

    register_AtomicLJs_class();

    bp::implicitly_convertible< QVector<QVector<SireMM::LJParameter> > const &, SireMM::AtomicLJs >();

    bp::implicitly_convertible< QVector<SireMM::LJParameter> const &, SireMM::AtomicLJs >();

    bp::implicitly_convertible< SireMol::Property const &, SireMM::AtomicLJs >();

    register_BondAtomID_class();

    bp::implicitly_convertible< SireMol::Bond const &, SireMM::BondAtomID >();

    register_InternalDB_MolBondInfo__class();

    register_BondDB_class();

    register_InternalGenerator_MolBondInfo__class();

    register_BondGenerator_class();

    register_BondResID_class();

    bp::implicitly_convertible< SireMol::ResNum, SireMM::BondResID >();

    bp::implicitly_convertible< SireMol::Bond const &, SireMM::BondResID >();

    register_InternalTableBase_MolBondInfo__class();

    register_InternalTable_MolBondInfo_Expression__class();

    register_BondTable_Expression__class();

    register_BondTable_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::BondTable >();

    bp::implicitly_convertible< SireMM::MolBondInfo const &, SireMM::BondTable >();

    register_CLJFF_class();

    register_CLJPair_class();

    bp::implicitly_convertible< SireMM::CLJParameter const &, SireMM::CLJPair >();

    register_ChargeParameter_class();

    bp::implicitly_convertible< double, SireMM::ChargeParameter >();

    register_LJParameter_class();

    register_CLJParameter_class();

    register_ChargeDB_class();

    register_ChargeTable_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::ChargeTable >();

    register_CombiningRules_class();

    bp::implicitly_convertible< SireMM::CombiningRuleBase const &, SireMM::CombiningRules >();

    register_DihedralAtomID_class();

    bp::implicitly_convertible< SireMol::Dihedral const &, SireMM::DihedralAtomID >();

    register_InternalDB_MolDihedralInfo__class();

    register_DihedralDB_class();

    register_InternalGenerator_MolDihedralInfo__class();

    register_DihedralGenerator_class();

    register_DihedralResID_class();

    bp::implicitly_convertible< SireMol::ResNum, SireMM::DihedralResID >();

    bp::implicitly_convertible< SireMol::Dihedral const &, SireMM::DihedralResID >();

    register_InternalTableBase_MolDihedralInfo__class();

    register_InternalTable_MolDihedralInfo_Expression__class();

    register_DihedralTable_Expression__class();

    register_DihedralTable_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::DihedralTable >();

    bp::implicitly_convertible< SireMM::MolDihedralInfo const &, SireMM::DihedralTable >();

    register_GeometricCombiningRules_class();

    register_SwitchFuncBase_class();

    register_HarmonicSwitchingFunction_class();

    bp::implicitly_convertible< double, SireMM::HarmonicSwitchingFunction >();

    register_InterCLJFF_class();

    register_LJDB_class();

    register_LJTable_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::LJTable >();

    register_MolAngleInfo_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::MolAngleInfo >();

    register_MolBondInfo_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::MolBondInfo >();

    register_MolDihedralInfo_class();

    bp::implicitly_convertible< SireMol::MoleculeInfo const &, SireMM::MolDihedralInfo >();

    register_NoCutoff_class();

    register_ResAngleInfo_class();

    bp::implicitly_convertible< SireMM::ResInternalInfo<SireMol::Angle> const &, SireMM::ResAngleInfo >();

    register_ResBondInfo_class();

    bp::implicitly_convertible< SireMM::ResInternalInfo<SireMol::Bond> const &, SireMM::ResBondInfo >();

    register_ResDihedralInfo_class();

    bp::implicitly_convertible< SireMM::ResInternalInfo<SireMol::Dihedral> const &, SireMM::ResDihedralInfo >();

    register_SwitchingFunction_class();

    bp::implicitly_convertible< SireMM::SwitchFuncBase const &, SireMM::SwitchingFunction >();

    register_Tip4PFF_class();

    register_UreyBradleyDB_class();

    register_UsePassedAngles_class();

    bp::implicitly_convertible< QSet<SireMol::Angle> const &, SireMM::UsePassedAngles >();

    register_UsePassedBonds_class();

    bp::implicitly_convertible< QSet<SireMol::Bond> const &, SireMM::UsePassedBonds >();

    register_UsePassedDihedrals_class();

    bp::implicitly_convertible< QSet<SireMol::Dihedral> const &, SireMM::UsePassedDihedrals >();
}


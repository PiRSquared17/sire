// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterGroupLJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::InterGroupLJFF __copy__(const SireMM::InterGroupLJFF &other){ return SireMM::InterGroupLJFF(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_InterGroupLJFF_class(){

    { //::SireMM::InterGroupLJFF
        typedef bp::class_< SireMM::InterGroupLJFF, bp::bases< SireMM::LJFF > > InterGroupLJFF_exposer_t;
        InterGroupLJFF_exposer_t InterGroupLJFF_exposer = InterGroupLJFF_exposer_t( "InterGroupLJFF" );
        bp::scope InterGroupLJFF_scope( InterGroupLJFF_exposer );
        bp::class_< SireMM::InterGroupLJFF::Components, bp::bases< SireMM::LJFF::Components > >( "Components" )    
            .def( bp::init< >() )    
            .def( bp::init< SireFF::FFBase const &, SireCAS::Symbols const & >(( bp::arg("ffbase"), bp::arg("symbols") )) );
        bp::class_< SireMM::InterGroupLJFF::Groups, bp::bases< SireMM::LJFF::Groups > >( "Groups" )    
            .def( bp::init< >() )    
            .def( 
                "A"
                , (::SireFF::FFBase::Group ( ::SireMM::InterGroupLJFF::Groups::* )(  ) const)( &::SireMM::InterGroupLJFF::Groups::A ) )    
            .def( 
                "B"
                , (::SireFF::FFBase::Group ( ::SireMM::InterGroupLJFF::Groups::* )(  ) const)( &::SireMM::InterGroupLJFF::Groups::B ) );
        bp::class_< SireMM::InterGroupLJFF::Parameters, bp::bases< SireMM::LJFF::Parameters > >( "Parameters" )    
            .def( bp::init< >() );
        InterGroupLJFF_exposer.def( bp::init< >() );
        InterGroupLJFF_exposer.def( bp::init< SireVol::Space const &, SireMM::SwitchingFunction const & >(( bp::arg("space"), bp::arg("switchfunc") )) );
        { //::SireMM::InterGroupLJFF::add
        
            typedef bool ( ::SireMM::InterGroupLJFF::*add_function_type )( ::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterGroupLJFF::add )
                , ( bp::arg("mol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::add
        
            typedef bool ( ::SireMM::InterGroupLJFF::*add_function_type )( ::SireMol::Residue const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterGroupLJFF::add )
                , ( bp::arg("res"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::add
        
            typedef bool ( ::SireMM::InterGroupLJFF::*add_function_type )( ::SireMol::NewAtom const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterGroupLJFF::add )
                , ( bp::arg("atom"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::add
        
            typedef bool ( ::SireMM::InterGroupLJFF::*add_function_type )( ::SireMol::Molecule const &,::SireMol::AtomSelection const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterGroupLJFF::add )
                , ( bp::arg("mol"), bp::arg("selected_atoms"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::addTo
        
            typedef bool ( ::SireMM::InterGroupLJFF::*addTo_function_type )( ::SireFF::FFBase::Group,::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireMM::InterGroupLJFF::addTo )
                , ( bp::arg("group"), bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::addTo
        
            typedef bool ( ::SireMM::InterGroupLJFF::*addTo_function_type )( ::SireFF::FFBase::Group,::SireMol::Residue const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireMM::InterGroupLJFF::addTo )
                , ( bp::arg("group"), bp::arg("residue"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::addTo
        
            typedef bool ( ::SireMM::InterGroupLJFF::*addTo_function_type )( ::SireFF::FFBase::Group,::SireMol::NewAtom const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireMM::InterGroupLJFF::addTo )
                , ( bp::arg("group"), bp::arg("atom"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::addTo
        
            typedef bool ( ::SireMM::InterGroupLJFF::*addTo_function_type )( ::SireFF::FFBase::Group,::SireMol::Molecule const &,::SireMol::AtomSelection const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireMM::InterGroupLJFF::addTo )
                , ( bp::arg("group"), bp::arg("molecule"), bp::arg("selected_atoms"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupLJFF::change
        
            typedef bool ( ::SireMM::InterGroupLJFF::*change_function_type )( ::SireMol::Molecule const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterGroupLJFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupLJFF::change
        
            typedef bool ( ::SireMM::InterGroupLJFF::*change_function_type )( ::SireMol::Residue const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterGroupLJFF::change )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterGroupLJFF::change
        
            typedef bool ( ::SireMM::InterGroupLJFF::*change_function_type )( ::SireMol::NewAtom const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterGroupLJFF::change )
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::InterGroupLJFF::groups
        
            typedef ::SireMM::InterGroupLJFF::Groups const & ( ::SireMM::InterGroupLJFF::*groups_function_type )(  ) const;
            
            InterGroupLJFF_exposer.def( 
                "groups"
                , groups_function_type( &::SireMM::InterGroupLJFF::groups )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::InterGroupLJFF::remove
        
            typedef bool ( ::SireMM::InterGroupLJFF::*remove_function_type )( ::SireMol::Molecule const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterGroupLJFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupLJFF::remove
        
            typedef bool ( ::SireMM::InterGroupLJFF::*remove_function_type )( ::SireMol::Residue const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterGroupLJFF::remove )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterGroupLJFF::remove
        
            typedef bool ( ::SireMM::InterGroupLJFF::*remove_function_type )( ::SireMol::NewAtom const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterGroupLJFF::remove )
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::InterGroupLJFF::remove
        
            typedef bool ( ::SireMM::InterGroupLJFF::*remove_function_type )( ::SireMol::Molecule const &,::SireMol::AtomSelection const & ) ;
            
            InterGroupLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterGroupLJFF::remove )
                , ( bp::arg("mol"), bp::arg("selected_atoms") ) );
        
        }
        { //::SireMM::InterGroupLJFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterGroupLJFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterGroupLJFF::typeName ) );
        
        }
        { //::SireMM::InterGroupLJFF::what
        
            typedef char const * ( ::SireMM::InterGroupLJFF::*what_function_type )(  ) const;
            
            InterGroupLJFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterGroupLJFF::what ) );
        
        }
        InterGroupLJFF_exposer.staticmethod( "typeName" );
        InterGroupLJFF_exposer.def( "__copy__", &__copy__);
        InterGroupLJFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::InterGroupLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupLJFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::InterGroupLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupLJFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::InterGroupLJFF > );
    }

}

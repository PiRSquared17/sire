// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AngleAtomID.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

void register_AngleAtomID_class(){

    bp::class_< SireMM::AngleAtomID >( "AngleAtomID" )    
        .def( bp::init< >() )    
        .def( bp::init< QString const &, QString const &, QString const & >(( bp::arg("atom0"), bp::arg("atom1"), bp::arg("atom2") )) )    
        .def( bp::init< SireMol::Angle const & >(( bp::arg("angle") )) )    
        .def( 
            "atom0"
            , (::QString const & ( ::SireMM::AngleAtomID::* )(  ) const)( &::SireMM::AngleAtomID::atom0 )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "atom1"
            , (::QString const & ( ::SireMM::AngleAtomID::* )(  ) const)( &::SireMM::AngleAtomID::atom1 )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "atom2"
            , (::QString const & ( ::SireMM::AngleAtomID::* )(  ) const)( &::SireMM::AngleAtomID::atom2 )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , (::QString const & ( ::SireMM::AngleAtomID::* )( int ) const)( &::SireMM::AngleAtomID::operator[] )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "size"
            , (int ( ::SireMM::AngleAtomID::* )(  ) const)( &::SireMM::AngleAtomID::size ) );

}

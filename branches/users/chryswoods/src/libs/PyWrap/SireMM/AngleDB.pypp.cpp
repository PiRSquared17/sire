// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AngleDB.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

void register_AngleDB_class(){

    bp::class_< SireMM::AngleDB >( "AngleDB" )    
        .def( bp::init< >() )    
        .def( 
            "addAngle"
            , (void ( ::SireMM::AngleDB::* )( ::QString const &,::SireCAS::Expression const & ) )( &::SireMM::AngleDB::addAngle )
            , ( bp::arg("userid"), bp::arg("anglefunc") ) )    
        .def( 
            "assignParameter"
            , (bool ( ::SireMM::AngleDB::* )( ::SireMol::Angle const &,::SireDB::RelateIDMap const &,::SireDB::ParameterTable & ) )( &::SireMM::AngleDB::assignParameter )
            , ( bp::arg("angle"), bp::arg("relateids"), bp::arg("param_table") ) )    
        .def( 
            "getAngle"
            , (::SireCAS::Expression ( ::SireMM::AngleDB::* )( ::QString const &,bool * ) )( &::SireMM::AngleDB::getAngle )
            , ( bp::arg("userid"), bp::arg("foundangle")=bp::object() ) )    
        .def( 
            "getAngle"
            , (::SireCAS::Expression ( ::SireMM::AngleDB::* )( ::SireDB::RelateID,bool * ) )( &::SireMM::AngleDB::getAngle )
            , ( bp::arg("relateid"), bp::arg("foundangle")=bp::object() ) )    
        .def( 
            "getAngle"
            , (::SireCAS::Expression ( ::SireMM::AngleDB::* )( ::SireDB::RelateIDMap const &,bool * ) )( &::SireMM::AngleDB::getAngle )
            , ( bp::arg("relateids"), bp::arg("foundangle")=bp::object() ) )    
        .def( 
            "r"
            , (::SireCAS::Symbol const & ( ::SireMM::AngleDB::* )(  ) const)( &::SireMM::AngleDB::r )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "relateAngle"
            , (void ( ::SireMM::AngleDB::* )( ::SireDB::AssertMatch<3> const &,::QString const & ) )( &::SireMM::AngleDB::relateAngle )
            , ( bp::arg("matchangle"), bp::arg("userid") ) )    
        .def( 
            "relateAngle"
            , (void ( ::SireMM::AngleDB::* )( ::SireDB::AssertMatch<3> const &,::SireCAS::Expression const & ) )( &::SireMM::AngleDB::relateAngle )
            , ( bp::arg("matchangle"), bp::arg("anglefunc") ) )    
        .def( 
            "relateAngle"
            , (void ( ::SireMM::AngleDB::* )( ::SireDB::RelateID,::QString const & ) )( &::SireMM::AngleDB::relateAngle )
            , ( bp::arg("relateid"), bp::arg("userid") ) )    
        .def( 
            "relateAngle"
            , (void ( ::SireMM::AngleDB::* )( ::SireDB::RelateID,::SireCAS::Expression const & ) )( &::SireMM::AngleDB::relateAngle )
            , ( bp::arg("relateid"), bp::arg("anglefunc") ) )    
        .def( 
            "theta"
            , (::SireCAS::Symbol const & ( ::SireMM::AngleDB::* )(  ) const)( &::SireMM::AngleDB::theta )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::AngleDB::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::AngleDB::* )(  ) const)( &::SireMM::AngleDB::what ) )    
        .staticmethod( "typeName" );

}

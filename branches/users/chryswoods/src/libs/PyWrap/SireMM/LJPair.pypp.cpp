// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "LJPair.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_LJPair_class(){

    bp::class_< SireMM::LJPair >( "LJPair" )    
        .def( bp::init< >() )    
        .def( bp::init< double, double >(( bp::arg("sigma"), bp::arg("epsilon") )) )    
        .def( bp::init< SireMM::LJParameter const & >(( bp::arg("ljparam") )) )    
        .def( 
            "A"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::A ) )    
        .def( 
            "B"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::B ) )    
        .def( 
            "arithmetic"
            , (::SireMM::LJPair (*)( ::SireMM::LJParameter const &,::SireMM::LJParameter const & ))( &::SireMM::LJPair::arithmetic )
            , ( bp::arg("lj0"), bp::arg("lj1") ) )    
        .def( 
            "dummy"
            , (::SireMM::LJPair (*)(  ))( &::SireMM::LJPair::dummy ) )    
        .def( 
            "epsilon"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::epsilon ) )    
        .def( 
            "fromAAndB"
            , (::SireMM::LJPair (*)( double,double ))( &::SireMM::LJPair::fromAAndB )
            , ( bp::arg("a"), bp::arg("b") ) )    
        .def( 
            "fromRMinAndEpsilon"
            , (::SireMM::LJPair (*)( double,double ))( &::SireMM::LJPair::fromRMinAndEpsilon )
            , ( bp::arg("rmin"), bp::arg("epsilon") ) )    
        .def( 
            "fromSigmaAndEpsilon"
            , (::SireMM::LJPair (*)( double,double ))( &::SireMM::LJPair::fromSigmaAndEpsilon )
            , ( bp::arg("sigma"), bp::arg("epsilon") ) )    
        .def( 
            "geometric"
            , (::SireMM::LJPair (*)( ::SireMM::LJParameter const &,::SireMM::LJParameter const & ))( &::SireMM::LJPair::geometric )
            , ( bp::arg("lj0"), bp::arg("lj1") ) )    
        .def( 
            "isDummy"
            , (bool ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::isDummy ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "rmin"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::rmin ) )    
        .def( 
            "sigma"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::sigma ) )    
        .def( 
            "sqrtEpsilon"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::sqrtEpsilon ) )    
        .def( 
            "sqrtSigma"
            , (double ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::sqrtSigma ) )    
        .def( 
            "toString"
            , (::QString ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::toString ) )    
        .def( 
            "zeroLJ"
            , (bool ( ::SireMM::LJPair::* )(  ) const)( &::SireMM::LJPair::zeroLJ ) )    
        .staticmethod( "arithmetic" )    
        .staticmethod( "dummy" )    
        .staticmethod( "fromAAndB" )    
        .staticmethod( "fromRMinAndEpsilon" )    
        .staticmethod( "fromSigmaAndEpsilon" )    
        .staticmethod( "geometric" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::LJPair >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::LJPair >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMM::LJPair > );

}

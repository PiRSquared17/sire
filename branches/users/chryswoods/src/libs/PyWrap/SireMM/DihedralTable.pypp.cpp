// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "DihedralTable.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::DihedralTable&){ return "SireMM::DihedralTable";}

void register_DihedralTable_class(){

    bp::class_< SireMM::DihedralTable, bp::bases< SireMM::DihedralTableT<SireCAS::Expression> > >( "DihedralTable" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::MoleculeInfo const & >(( bp::arg("mol") )) )    
        .def( bp::init< SireMol::Molecule const &, SireMM::DihedralGeneratorBase const & >(( bp::arg("mol"), bp::arg("dihedralgenerator") )) )    
        .def( bp::init< SireMM::MolDihedralInfo const & >(( bp::arg("dihedralinfo") )) )    
        .def( 
            "add"
            , (void ( ::SireMM::DihedralTable::* )( ::SireDB::TableBase const & ) )( &::SireMM::DihedralTable::add )
            , ( bp::arg("other") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::DihedralTable::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::DihedralTable::* )(  ) const)( &::SireMM::DihedralTable::what ) )    
        .staticmethod( "typeName" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::DihedralTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::DihedralTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "HarmonicFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/molecules.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_HarmonicFF_class(){

    { //::SireMM::HarmonicFF
        typedef bp::class_< SireMM::HarmonicFF, bp::bases< SireFF::FFBase >, boost::noncopyable > HarmonicFF_exposer_t;
        HarmonicFF_exposer_t HarmonicFF_exposer = HarmonicFF_exposer_t( "HarmonicFF" );
        bp::scope HarmonicFF_scope( HarmonicFF_exposer );
        bp::class_< SireMM::HarmonicFF::HarmonicMolecule >( "HarmonicMolecule" )    
            .def( 
                "change"
                , (void ( ::SireMM::HarmonicFF::HarmonicMolecule::* )( ::SireMol::PartialMolecule const & ) )( &::SireMM::HarmonicFF::HarmonicMolecule::change )
                , ( bp::arg("molecule") ) )    
            .def( 
                "energy"
                , (double ( ::SireMM::HarmonicFF::HarmonicMolecule::* )( ::SireVol::Space const & ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::energy )
                , ( bp::arg("space") ) )    
            .def( 
                "isEmpty"
                , (bool ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::isEmpty ) )    
            .def( 
                "isWholeMolecule"
                , (bool ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::isWholeMolecule ) )    
            .def( 
                "k"
                , (double ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::k ) )    
            .def( 
                "molecule"
                , (::SireMol::PartialMolecule const & ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::molecule )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( bp::self != bp::self )    
            .def( bp::self == bp::self )    
            .def( 
                "r"
                , (::SireMaths::Vector const & ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::r )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "r0"
                , (::SireMaths::Vector const & ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::r0 )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "version"
                , (::SireBase::Version const & ( ::SireMM::HarmonicFF::HarmonicMolecule::* )(  ) const)( &::SireMM::HarmonicFF::HarmonicMolecule::version )
                , bp::return_value_policy< bp::copy_const_reference >() );
        bp::class_< SireMM::HarmonicFF::Parameters, bp::bases< SireFF::FFBase::Parameters > >( "Parameters" )    
            .def( 
                "center"
                , (::SireFF::ParameterName const & ( ::SireMM::HarmonicFF::Parameters::* )(  ) const)( &::SireMM::HarmonicFF::Parameters::center )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "forceConstant"
                , (::SireFF::ParameterName const & ( ::SireMM::HarmonicFF::Parameters::* )(  ) const)( &::SireMM::HarmonicFF::Parameters::forceConstant )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "k"
                , (::SireFF::ParameterName const & ( ::SireMM::HarmonicFF::Parameters::* )(  ) const)( &::SireMM::HarmonicFF::Parameters::k )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "r0"
                , (::SireFF::ParameterName const ( ::SireMM::HarmonicFF::Parameters::* )(  ) const)( &::SireMM::HarmonicFF::Parameters::r0 ) )    
            .def_readonly( "default_sources", SireMM::HarmonicFF::Parameters::default_sources );
        { //::SireMM::HarmonicFF::add
        
            typedef bool ( ::SireMM::HarmonicFF::*add_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            HarmonicFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::HarmonicFF::add )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::HarmonicFF::add
        
            typedef bool ( ::SireMM::HarmonicFF::*add_function_type )( ::SireMol::Molecules const &,::SireFF::ParameterMap const & ) ;
            
            HarmonicFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::HarmonicFF::add )
                , ( bp::arg("molecules"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::HarmonicFF::change
        
            typedef bool ( ::SireMM::HarmonicFF::*change_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            HarmonicFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::HarmonicFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::HarmonicFF::change
        
            typedef bool ( ::SireMM::HarmonicFF::*change_function_type )( ::SireMol::Molecules const & ) ;
            
            HarmonicFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::HarmonicFF::change )
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMM::HarmonicFF::contains
        
            typedef bool ( ::SireMM::HarmonicFF::*contains_function_type )( ::SireMol::PartialMolecule const & ) const;
            
            HarmonicFF_exposer.def( 
                "contains"
                , contains_function_type( &::SireMM::HarmonicFF::contains )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::HarmonicFF::containsProperty
        
            typedef bool ( ::SireMM::HarmonicFF::*containsProperty_function_type )( ::QString const & ) const;
            
            HarmonicFF_exposer.def( 
                "containsProperty"
                , containsProperty_function_type( &::SireMM::HarmonicFF::containsProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireMM::HarmonicFF::contents
        
            typedef ::SireMol::Molecules ( ::SireMM::HarmonicFF::*contents_function_type )(  ) const;
            
            HarmonicFF_exposer.def( 
                "contents"
                , contents_function_type( &::SireMM::HarmonicFF::contents ) );
        
        }
        { //::SireMM::HarmonicFF::getProperty
        
            typedef ::SireBase::Property ( ::SireMM::HarmonicFF::*getProperty_function_type )( ::QString const & ) const;
            
            HarmonicFF_exposer.def( 
                "getProperty"
                , getProperty_function_type( &::SireMM::HarmonicFF::getProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireMM::HarmonicFF::groupsReferringTo
        
            typedef ::QSet<SireFF::FFBase::Group> ( ::SireMM::HarmonicFF::*groupsReferringTo_function_type )( ::SireMol::MoleculeID ) const;
            
            HarmonicFF_exposer.def( 
                "groupsReferringTo"
                , groupsReferringTo_function_type( &::SireMM::HarmonicFF::groupsReferringTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::HarmonicFF::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireMM::HarmonicFF::*molecule_function_type )( ::SireMol::MoleculeID ) const;
            
            HarmonicFF_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireMM::HarmonicFF::molecule )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::HarmonicFF::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireMM::HarmonicFF::*moleculeIDs_function_type )(  ) const;
            
            HarmonicFF_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireMM::HarmonicFF::moleculeIDs ) );
        
        }
        { //::SireMM::HarmonicFF::mustNowRecalculateFromScratch
        
            typedef void ( ::SireMM::HarmonicFF::*mustNowRecalculateFromScratch_function_type )(  ) ;
            
            HarmonicFF_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_type( &::SireMM::HarmonicFF::mustNowRecalculateFromScratch ) );
        
        }
        { //::SireMM::HarmonicFF::parameters
        
            typedef ::SireMM::HarmonicFF::Parameters const & ( ::SireMM::HarmonicFF::*parameters_function_type )(  ) const;
            
            HarmonicFF_exposer.def( 
                "parameters"
                , parameters_function_type( &::SireMM::HarmonicFF::parameters )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::HarmonicFF::properties
        
            typedef ::QHash<QString,SireBase::Property> ( ::SireMM::HarmonicFF::*properties_function_type )(  ) const;
            
            HarmonicFF_exposer.def( 
                "properties"
                , properties_function_type( &::SireMM::HarmonicFF::properties ) );
        
        }
        { //::SireMM::HarmonicFF::refersTo
        
            typedef bool ( ::SireMM::HarmonicFF::*refersTo_function_type )( ::SireMol::MoleculeID ) const;
            
            HarmonicFF_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireMM::HarmonicFF::refersTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::HarmonicFF::remove
        
            typedef bool ( ::SireMM::HarmonicFF::*remove_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            HarmonicFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::HarmonicFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::HarmonicFF::remove
        
            typedef bool ( ::SireMM::HarmonicFF::*remove_function_type )( ::SireMol::Molecules const & ) ;
            
            HarmonicFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::HarmonicFF::remove )
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMM::HarmonicFF::setProperty
        
            typedef bool ( ::SireMM::HarmonicFF::*setProperty_function_type )( ::QString const &,::SireBase::Property const & ) ;
            
            HarmonicFF_exposer.def( 
                "setProperty"
                , setProperty_function_type( &::SireMM::HarmonicFF::setProperty )
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireMM::HarmonicFF::setSpace
        
            typedef bool ( ::SireMM::HarmonicFF::*setSpace_function_type )( ::SireVol::Space const & ) ;
            
            HarmonicFF_exposer.def( 
                "setSpace"
                , setSpace_function_type( &::SireMM::HarmonicFF::setSpace )
                , ( bp::arg("space") ) );
        
        }
        { //::SireMM::HarmonicFF::space
        
            typedef ::SireVol::Space const & ( ::SireMM::HarmonicFF::*space_function_type )(  ) const;
            
            HarmonicFF_exposer.def( 
                "space"
                , space_function_type( &::SireMM::HarmonicFF::space )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::HarmonicFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            HarmonicFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::HarmonicFF::typeName ) );
        
        }
        { //::SireMM::HarmonicFF::what
        
            typedef char const * ( ::SireMM::HarmonicFF::*what_function_type )(  ) const;
            
            HarmonicFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::HarmonicFF::what ) );
        
        }
        HarmonicFF_exposer.staticmethod( "typeName" );
        HarmonicFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::HarmonicFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        HarmonicFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::HarmonicFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        HarmonicFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::HarmonicFF > );
    }

}

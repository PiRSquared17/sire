// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CLJPair.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_CLJPair_class(){

    bp::class_< SireMM::CLJPair >( "CLJPair" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMM::CLJParameter const & >(( bp::arg("cljparam") )) )    
        .def( bp::init< double, double, double >(( bp::arg("chg2"), bp::arg("sig"), bp::arg("eps") )) )    
        .def( 
            "A"
            , (double ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::A ) )    
        .def( 
            "B"
            , (double ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::B ) )    
        .def( 
            "arithmetic"
            , (::SireMM::CLJPair (*)( ::SireMM::CLJParameter const &,::SireMM::CLJParameter const & ))( &::SireMM::CLJPair::arithmetic )
            , ( bp::arg("clj0"), bp::arg("clj1") ) )    
        .def( 
            "charge2"
            , (double ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::charge2 ) )    
        .def( 
            "epsilon"
            , (double ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::epsilon ) )    
        .def( 
            "geometric"
            , (::SireMM::CLJPair (*)( ::SireMM::CLJParameter const &,::SireMM::CLJParameter const & ))( &::SireMM::CLJPair::geometric )
            , ( bp::arg("clj0"), bp::arg("clj1") ) )    
        .def( 
            "rmin"
            , (double ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::rmin ) )    
        .def( 
            "sigma"
            , (double ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::sigma ) )    
        .def( 
            "toString"
            , (::QString ( ::SireMM::CLJPair::* )(  ) const)( &::SireMM::CLJPair::toString ) )    
        .staticmethod( "arithmetic" )    
        .staticmethod( "geometric" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::CLJPair >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::CLJPair >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMM::CLJPair > );

}

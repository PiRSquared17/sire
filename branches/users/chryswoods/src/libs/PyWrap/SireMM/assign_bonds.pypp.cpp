// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "assign_bonds.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireDB/using_database.h"

using namespace SireMM;

void register_assign_bonds_class(){

    bp::class_< SireMM::assign_bonds, bp::bases< SireMM::assign_internals<SireMM::MolBondInfo> > >( "assign_bonds", bp::init< bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("db7"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("db7"), bp::arg("db8"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("db7"), bp::arg("db8"), bp::arg("db9"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("db7"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("db7"), bp::arg("db8"), bp::arg("generator")=BondGenerator() )) )    
        .def( bp::init< QSet<SireMol::Bond> const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, SireDB::using_database const &, bp::optional< SireMM::BondGeneratorBase const & > >(( bp::arg("bonds"), bp::arg("db0"), bp::arg("db1"), bp::arg("db2"), bp::arg("db3"), bp::arg("db4"), bp::arg("db5"), bp::arg("db6"), bp::arg("db7"), bp::arg("db8"), bp::arg("db9"), bp::arg("generator")=BondGenerator() )) )    
        .def( 
            "assignParameters"
            , (void ( ::SireMM::assign_bonds::* )( ::SireMol::Molecule const &,::SireDB::ParameterTable &,::SireDB::ParameterDB &,::SireDB::MatchMRData const & ) const)( &::SireMM::assign_bonds::assignParameters )
            , ( bp::arg("molecule"), bp::arg("param_table"), bp::arg("database"), bp::arg("matchmr")=::SireDB::MatchMRData( ) ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::assign_bonds::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::assign_bonds::* )(  ) const)( &::SireMM::assign_bonds::what ) )    
        .staticmethod( "typeName" );

}

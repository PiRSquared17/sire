// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterCLJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

void register_InterCLJFF_class(){

    { //::SireMM::InterCLJFF
        typedef bp::class_< SireMM::InterCLJFF, bp::bases< SireMM::CLJFF >, boost::noncopyable > InterCLJFF_exposer_t;
        InterCLJFF_exposer_t InterCLJFF_exposer = InterCLJFF_exposer_t( "InterCLJFF" );
        bp::scope InterCLJFF_scope( InterCLJFF_exposer );
        bp::class_< SireMM::InterCLJFF::Components, bp::bases< SireMM::CLJFF::Components > >( "Components" );
        bp::class_< SireMM::InterCLJFF::Groups, bp::bases< SireMM::CLJFF::Groups > >( "Groups" );
        bp::class_< SireMM::InterCLJFF::Parameters, bp::bases< SireMM::CLJFF::Parameters > >( "Parameters" );
        { //::SireMM::InterCLJFF::add
        
            typedef bool ( ::SireMM::InterCLJFF::*add_function_type )( ::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            InterCLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterCLJFF::add )
                , ( bp::arg("mol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterCLJFF::change
        
            typedef bool ( ::SireMM::InterCLJFF::*change_function_type )( ::SireMol::Molecule const & ) ;
            
            InterCLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterCLJFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterCLJFF::change
        
            typedef bool ( ::SireMM::InterCLJFF::*change_function_type )( ::SireMol::Residue const & ) ;
            
            InterCLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterCLJFF::change )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterCLJFF::remove
        
            typedef bool ( ::SireMM::InterCLJFF::*remove_function_type )( ::SireMol::Molecule const & ) ;
            
            InterCLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterCLJFF::remove )
                , ( bp::arg("mol") ) );
        
        }
        { //::SireMM::InterCLJFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterCLJFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterCLJFF::typeName ) );
        
        }
        { //::SireMM::InterCLJFF::what
        
            typedef char const * ( ::SireMM::InterCLJFF::*what_function_type )(  ) const;
            
            InterCLJFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterCLJFF::what ) );
        
        }
        InterCLJFF_exposer.staticmethod( "typeName" );
    }

}

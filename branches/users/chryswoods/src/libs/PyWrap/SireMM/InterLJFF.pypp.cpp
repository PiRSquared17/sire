// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterLJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_InterLJFF_class(){

    { //::SireMM::InterLJFF
        typedef bp::class_< SireMM::InterLJFF, bp::bases< SireMM::LJFF >, boost::noncopyable > InterLJFF_exposer_t;
        InterLJFF_exposer_t InterLJFF_exposer = InterLJFF_exposer_t( "InterLJFF" );
        bp::scope InterLJFF_scope( InterLJFF_exposer );
        bp::class_< SireMM::InterLJFF::Components, bp::bases< SireMM::LJFF::Components > >( "Components" );
        bp::class_< SireMM::InterLJFF::Groups, bp::bases< SireMM::LJFF::Groups > >( "Groups" );
        bp::class_< SireMM::InterLJFF::Parameters, bp::bases< SireMM::LJFF::Parameters > >( "Parameters" );
        { //::SireMM::InterLJFF::add
        
            typedef bool ( ::SireMM::InterLJFF::*add_function_type )( ::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            InterLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterLJFF::add )
                , ( bp::arg("mol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterLJFF::add
        
            typedef bool ( ::SireMM::InterLJFF::*add_function_type )( ::SireMol::Residue const &,::SireFF::ParameterMap const & ) ;
            
            InterLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterLJFF::add )
                , ( bp::arg("res"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterLJFF::add
        
            typedef bool ( ::SireMM::InterLJFF::*add_function_type )( ::SireMol::NewAtom const &,::SireFF::ParameterMap const & ) ;
            
            InterLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterLJFF::add )
                , ( bp::arg("atom"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterLJFF::add
        
            typedef bool ( ::SireMM::InterLJFF::*add_function_type )( ::SireMol::Molecule const &,::SireMol::AtomSelection const &,::SireFF::ParameterMap const & ) ;
            
            InterLJFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterLJFF::add )
                , ( bp::arg("mol"), bp::arg("selected_atoms"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterLJFF::change
        
            typedef bool ( ::SireMM::InterLJFF::*change_function_type )( ::SireMol::Molecule const & ) ;
            
            InterLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterLJFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterLJFF::change
        
            typedef bool ( ::SireMM::InterLJFF::*change_function_type )( ::SireMol::Residue const & ) ;
            
            InterLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterLJFF::change )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterLJFF::change
        
            typedef bool ( ::SireMM::InterLJFF::*change_function_type )( ::SireMol::NewAtom const & ) ;
            
            InterLJFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterLJFF::change )
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::InterLJFF::remove
        
            typedef bool ( ::SireMM::InterLJFF::*remove_function_type )( ::SireMol::Molecule const & ) ;
            
            InterLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterLJFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterLJFF::remove
        
            typedef bool ( ::SireMM::InterLJFF::*remove_function_type )( ::SireMol::Residue const & ) ;
            
            InterLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterLJFF::remove )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireMM::InterLJFF::remove
        
            typedef bool ( ::SireMM::InterLJFF::*remove_function_type )( ::SireMol::NewAtom const & ) ;
            
            InterLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterLJFF::remove )
                , ( bp::arg("atom") ) );
        
        }
        { //::SireMM::InterLJFF::remove
        
            typedef bool ( ::SireMM::InterLJFF::*remove_function_type )( ::SireMol::Molecule const &,::SireMol::AtomSelection const & ) ;
            
            InterLJFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterLJFF::remove )
                , ( bp::arg("mol"), bp::arg("selected_atoms") ) );
        
        }
        { //::SireMM::InterLJFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterLJFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterLJFF::typeName ) );
        
        }
        { //::SireMM::InterLJFF::what
        
            typedef char const * ( ::SireMM::InterLJFF::*what_function_type )(  ) const;
            
            InterLJFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterLJFF::what ) );
        
        }
        InterLJFF_exposer.staticmethod( "typeName" );
        InterLJFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::InterLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterLJFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::InterLJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterLJFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::InterLJFF > );
    }

}

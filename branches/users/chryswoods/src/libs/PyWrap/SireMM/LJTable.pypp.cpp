// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "LJTable.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::LJTable&){ return "SireMM::LJTable";}

void register_LJTable_class(){

    bp::class_< SireMM::LJTable, bp::bases< SireDB::AtomTableT<SireMM::LJParameter> > >( "LJTable" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMol::MoleculeInfo const & >(( bp::arg("molinfo") )) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::LJTable::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::LJTable::* )(  ) const)( &::SireMM::LJTable::what ) )    
        .staticmethod( "typeName" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::LJTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::LJTable >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

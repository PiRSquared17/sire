// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "LJFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_LJFF_class(){

    { //::SireMM::LJFF
        typedef bp::class_< SireMM::LJFF, bp::bases< SireFF::FFBase >, boost::noncopyable > LJFF_exposer_t;
        LJFF_exposer_t LJFF_exposer = LJFF_exposer_t( "LJFF", bp::no_init );
        bp::scope LJFF_scope( LJFF_exposer );
        bp::class_< SireMM::LJFF::Components, bp::bases< SireFF::FFBase::Components > >( "Components" )    
            .def( 
                "describe_lj"
                , (::QString (*)(  ))( &::SireMM::LJFF::Components::describe_lj ) )    
            .def( 
                "lj"
                , (::SireFF::FFComponent const & ( ::SireMM::LJFF::Components::* )(  ) const)( &::SireMM::LJFF::Components::lj )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .staticmethod( "describe_lj" );
        bp::class_< SireMM::LJFF::Groups, bp::bases< SireFF::FFBase::Groups > >( "Groups" );
        bp::class_< SireMM::LJFF::Parameters, bp::bases< SireFF::FFBase::Parameters > >( "Parameters" )    
            .def( 
                "lj"
                , (::SireFF::ParameterName const & ( ::SireMM::LJFF::Parameters::* )(  ) const)( &::SireMM::LJFF::Parameters::lj )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def_readonly( "default_sources", SireMM::LJFF::Parameters::default_sources );
        { //::SireMM::LJFF::components
        
            typedef ::SireMM::LJFF::Components const & ( ::SireMM::LJFF::*components_function_type )(  ) const;
            
            LJFF_exposer.def( 
                "components"
                , components_function_type( &::SireMM::LJFF::components )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::LJFF::parameters
        
            typedef ::SireMM::LJFF::Parameters const & ( ::SireMM::LJFF::*parameters_function_type )(  ) const;
            
            LJFF_exposer.def( 
                "parameters"
                , parameters_function_type( &::SireMM::LJFF::parameters )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::LJFF::space
        
            typedef ::SireVol::Space const & ( ::SireMM::LJFF::*space_function_type )(  ) const;
            
            LJFF_exposer.def( 
                "space"
                , space_function_type( &::SireMM::LJFF::space )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::LJFF::switchingFunction
        
            typedef ::SireMM::SwitchingFunction const & ( ::SireMM::LJFF::*switchingFunction_function_type )(  ) const;
            
            LJFF_exposer.def( 
                "switchingFunction"
                , switchingFunction_function_type( &::SireMM::LJFF::switchingFunction )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        LJFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::LJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        LJFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::LJFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        LJFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::LJFF > );
    }

}

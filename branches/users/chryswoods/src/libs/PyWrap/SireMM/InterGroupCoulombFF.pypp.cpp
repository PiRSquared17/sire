// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "InterGroupCoulombFF.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::InterGroupCoulombFF __copy__(const SireMM::InterGroupCoulombFF &other){ return SireMM::InterGroupCoulombFF(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_InterGroupCoulombFF_class(){

    { //::SireMM::InterGroupCoulombFF
        typedef bp::class_< SireMM::InterGroupCoulombFF, bp::bases< SireMM::CoulombFF > > InterGroupCoulombFF_exposer_t;
        InterGroupCoulombFF_exposer_t InterGroupCoulombFF_exposer = InterGroupCoulombFF_exposer_t( "InterGroupCoulombFF" );
        bp::scope InterGroupCoulombFF_scope( InterGroupCoulombFF_exposer );
        bp::class_< SireMM::InterGroupCoulombFF::Components, bp::bases< SireMM::CoulombFF::Components > >( "Components" )    
            .def( bp::init< >() )    
            .def( bp::init< SireFF::FFBase const &, SireCAS::Symbols const & >(( bp::arg("ffbase"), bp::arg("symbols") )) );
        bp::class_< SireMM::InterGroupCoulombFF::Groups, bp::bases< SireMM::CoulombFF::Groups > >( "Groups" )    
            .def( bp::init< >() )    
            .def( 
                "A"
                , (::SireFF::FFBase::Group ( ::SireMM::InterGroupCoulombFF::Groups::* )(  ) const)( &::SireMM::InterGroupCoulombFF::Groups::A ) )    
            .def( 
                "B"
                , (::SireFF::FFBase::Group ( ::SireMM::InterGroupCoulombFF::Groups::* )(  ) const)( &::SireMM::InterGroupCoulombFF::Groups::B ) );
        bp::class_< SireMM::InterGroupCoulombFF::Parameters, bp::bases< SireMM::CoulombFF::Parameters > >( "Parameters" )    
            .def( bp::init< >() );
        InterGroupCoulombFF_exposer.def( bp::init< >() );
        InterGroupCoulombFF_exposer.def( bp::init< SireVol::Space const &, SireMM::SwitchingFunction const & >(( bp::arg("space"), bp::arg("switchfunc") )) );
        { //::SireMM::InterGroupCoulombFF::add
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*add_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "add"
                , add_function_type( &::SireMM::InterGroupCoulombFF::add )
                , ( bp::arg("mol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::addTo
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*addTo_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireMM::InterGroupCoulombFF::addTo )
                , ( bp::arg("group"), bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::addToA
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*addToA_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "addToA"
                , addToA_function_type( &::SireMM::InterGroupCoulombFF::addToA )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::addToB
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*addToB_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "addToB"
                , addToB_function_type( &::SireMM::InterGroupCoulombFF::addToB )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::change
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*change_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "change"
                , change_function_type( &::SireMM::InterGroupCoulombFF::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::contains
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*contains_function_type )( ::SireMol::PartialMolecule const & ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "contains"
                , contains_function_type( &::SireMM::InterGroupCoulombFF::contains )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::contains
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*contains_function_type )( ::SireMol::PartialMolecule const &,::SireFF::FFBase::Group const & ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "contains"
                , contains_function_type( &::SireMM::InterGroupCoulombFF::contains )
                , ( bp::arg("molecule"), bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireMM::InterGroupCoulombFF::*contents_function_type )(  ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "contents"
                , contents_function_type( &::SireMM::InterGroupCoulombFF::contents ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireMM::InterGroupCoulombFF::*contents_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "contents"
                , contents_function_type( &::SireMM::InterGroupCoulombFF::contents )
                , ( bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::groups
        
            typedef ::SireMM::InterGroupCoulombFF::Groups const & ( ::SireMM::InterGroupCoulombFF::*groups_function_type )(  ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "groups"
                , groups_function_type( &::SireMM::InterGroupCoulombFF::groups )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMM::InterGroupCoulombFF::groupsReferringTo
        
            typedef ::QSet<SireFF::FFBase::Group> ( ::SireMM::InterGroupCoulombFF::*groupsReferringTo_function_type )( ::SireMol::MoleculeID ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "groupsReferringTo"
                , groupsReferringTo_function_type( &::SireMM::InterGroupCoulombFF::groupsReferringTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireMM::InterGroupCoulombFF::*molecule_function_type )( ::SireMol::MoleculeID ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireMM::InterGroupCoulombFF::molecule )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireMM::InterGroupCoulombFF::*molecule_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireMM::InterGroupCoulombFF::molecule )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireMM::InterGroupCoulombFF::*moleculeIDs_function_type )(  ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireMM::InterGroupCoulombFF::moleculeIDs ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireMM::InterGroupCoulombFF::*moleculeIDs_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireMM::InterGroupCoulombFF::moleculeIDs )
                , ( bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::mustNowRecalculateFromScratch
        
            typedef void ( ::SireMM::InterGroupCoulombFF::*mustNowRecalculateFromScratch_function_type )(  ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "mustNowRecalculateFromScratch"
                , mustNowRecalculateFromScratch_function_type( &::SireMM::InterGroupCoulombFF::mustNowRecalculateFromScratch ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::refersTo
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*refersTo_function_type )( ::SireMol::MoleculeID ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireMM::InterGroupCoulombFF::refersTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::refersTo
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*refersTo_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireMM::InterGroupCoulombFF::refersTo )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::remove
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*remove_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "remove"
                , remove_function_type( &::SireMM::InterGroupCoulombFF::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::removeFrom
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*removeFrom_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "removeFrom"
                , removeFrom_function_type( &::SireMM::InterGroupCoulombFF::removeFrom )
                , ( bp::arg("group"), bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::removeFromA
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*removeFromA_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "removeFromA"
                , removeFromA_function_type( &::SireMM::InterGroupCoulombFF::removeFromA )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::removeFromB
        
            typedef bool ( ::SireMM::InterGroupCoulombFF::*removeFromB_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            InterGroupCoulombFF_exposer.def( 
                "removeFromB"
                , removeFromB_function_type( &::SireMM::InterGroupCoulombFF::removeFromB )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            InterGroupCoulombFF_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireMM::InterGroupCoulombFF::typeName ) );
        
        }
        { //::SireMM::InterGroupCoulombFF::what
        
            typedef char const * ( ::SireMM::InterGroupCoulombFF::*what_function_type )(  ) const;
            
            InterGroupCoulombFF_exposer.def( 
                "what"
                , what_function_type( &::SireMM::InterGroupCoulombFF::what ) );
        
        }
        InterGroupCoulombFF_exposer.staticmethod( "typeName" );
        InterGroupCoulombFF_exposer.def( "__copy__", &__copy__);
        InterGroupCoulombFF_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::InterGroupCoulombFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupCoulombFF_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::InterGroupCoulombFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        InterGroupCoulombFF_exposer.def( "__str__", &SirePy::__str__< ::SireMM::InterGroupCoulombFF > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "SimSystem.pypp.hpp"
#include "boost/python.hpp"
#include "siresystem_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"

namespace bp = boost::python;

void register_SimSystem_class(){

    bp::class_< SireSystem::SimSystem, boost::noncopyable >( "SimSystem", bp::no_init )    
        .def( 
            "ID"
            , (::SireSystem::SystemID ( ::SireSystem::SimSystem::* )(  ) const)( &::SireSystem::SimSystem::ID ) )    
        .def( 
            "change"
            , (void ( ::SireSystem::SimSystem::* )( ::SireMol::Molecule const & ) )( &::SireSystem::SimSystem::change )
            , ( bp::arg("molecule") ) )    
        .def( 
            "change"
            , (void ( ::SireSystem::SimSystem::* )( ::SireMol::Residue const & ) )( &::SireSystem::SimSystem::change )
            , ( bp::arg("residue") ) )    
        .def( 
            "change"
            , (void ( ::SireSystem::SimSystem::* )( ::SireMol::NewAtom const & ) )( &::SireSystem::SimSystem::change )
            , ( bp::arg("atom") ) )    
        .def( 
            "checkpoint"
            , (::SireSystem::System ( ::SireSystem::SimSystem::* )(  ) const)( &::SireSystem::SimSystem::checkpoint ) )    
        .def( 
            "energy"
            , (double ( ::SireSystem::SimSystem::* )( ::SireCAS::Function const & ) )( &::SireSystem::SimSystem::energy )
            , ( bp::arg("component") ) )    
        .def( 
            "energy"
            , (double ( ::SireSystem::SimSystem::* )( ::SireFF::FFComponent const & ) )( &::SireSystem::SimSystem::energy )
            , ( bp::arg("component") ) )    
        .def( 
            "forceFields"
            , (::SireFF::ForceFieldsBase const & ( ::SireSystem::SimSystem::* )(  ) const)( &::SireSystem::SimSystem::forceFields )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "group"
            , (::SireMol::MoleculeGroup const & ( ::SireSystem::SimSystem::* )( ::SireMol::MoleculeGroupID ) const)( &::SireSystem::SimSystem::group )
            , ( bp::arg("id") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "group"
            , (::SireMol::MoleculeGroup const & ( ::SireSystem::SimSystem::* )( ::SireMol::MoleculeGroup const & ) const)( &::SireSystem::SimSystem::group )
            , ( bp::arg("group") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "groups"
            , (::SireMol::MoleculeGroups const & ( ::SireSystem::SimSystem::* )(  ) const)( &::SireSystem::SimSystem::groups )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "info"
            , (::SireSystem::SystemData const & ( ::SireSystem::SimSystem::* )(  ) const)( &::SireSystem::SimSystem::info )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "remove"
            , (void ( ::SireSystem::SimSystem::* )( ::SireMol::Molecule const & ) )( &::SireSystem::SimSystem::remove )
            , ( bp::arg("molecule") ) )    
        .def( 
            "setSystem"
            , (void ( ::SireSystem::SimSystem::* )( ::SireSystem::System & ) )( &::SireSystem::SimSystem::setSystem )
            , ( bp::arg("newsystem") ) )    
        .def( 
            "updateStatistics"
            , (void ( ::SireSystem::SimSystem::* )(  ) )( &::SireSystem::SimSystem::updateStatistics ) )    
        .def( 
            "version"
            , (::SireBase::Version const & ( ::SireSystem::SimSystem::* )(  ) const)( &::SireSystem::SimSystem::version )
            , bp::return_value_policy< bp::copy_const_reference >() );

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "ExBase.pypp.hpp"
#include "boost/python.hpp"
#include "sirecas_headers.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_ExBase_class(){

    bp::class_< SireCAS::ExBase, boost::noncopyable >( "ExBase", bp::no_init )    
        .def( 
            "children"
            , (::SireCAS::Expressions ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::children ) )    
        .def( 
            "collapse"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::collapse ) )    
        .def( 
            "conjugate"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::conjugate ) )    
        .def( 
            "differentiate"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::ExBase::differentiate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "evaluate"
            , (double ( ::SireCAS::ExBase::* )( ::SireCAS::Values const & ) const)( &::SireCAS::ExBase::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "evaluate"
            , (::SireMaths::Complex ( ::SireCAS::ExBase::* )( ::SireCAS::ComplexValues const & ) const)( &::SireCAS::ExBase::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "expand"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::expand ) )    
        .def( 
            "functions"
            , (::SireCAS::Functions ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::functions ) )    
        .def( 
            "hash"
            , (::uint ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::hash ) )    
        .def( 
            "integrate"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::ExBase::integrate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "isComplex"
            , (bool ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::isComplex ) )    
        .def( 
            "isCompound"
            , (bool ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::isCompound ) )    
        .def( 
            "isConstant"
            , (bool ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::isConstant ) )    
        .def( 
            "isFunction"
            , (bool ( ::SireCAS::ExBase::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::ExBase::isFunction )
            , ( bp::arg("arg0") ) )    
        .def( bp::self != bp::self )    
        .def( -bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "series"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )( ::SireCAS::Symbol const &,int ) const)( &::SireCAS::ExBase::series )
            , ( bp::arg("symbol"), bp::arg("n") ) )    
        .def( 
            "simplify"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )( int ) const)( &::SireCAS::ExBase::simplify )
            , ( bp::arg("options")=(int)(0) ) )    
        .def( 
            "substitute"
            , (::SireCAS::Expression ( ::SireCAS::ExBase::* )( ::SireCAS::Identities const & ) const)( &::SireCAS::ExBase::substitute )
            , ( bp::arg("identities") ) )    
        .def( 
            "symbols"
            , (::SireCAS::Symbols ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::symbols ) )    
        .def( 
            "toString"
            , (::QString ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::toString ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireCAS::ExBase::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireCAS::ExBase::* )(  ) const)( &::SireCAS::ExBase::what ) )    
        .staticmethod( "typeName" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireCAS::ExBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireCAS::ExBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireCAS::ExBase > );

}

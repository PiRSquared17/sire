// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Symbol.pypp.hpp"
#include "boost/python.hpp"
#include "sirecas_headers.h"

namespace bp = boost::python;

void register_Symbol_class(){

    bp::class_< SireCAS::Symbol, bp::bases< SireCAS::ExBase > >( "Symbol" )    
        .def( bp::init< >() )    
        .def( bp::init< QString const & >(( bp::arg("rep") )) )    
        .def( 
            "ID"
            , (::SireCAS::SymbolID ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::ID ) )    
        .def( 
            "children"
            , (::SireCAS::Expressions ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::children ) )    
        .def( 
            "differentiate"
            , (::SireCAS::Expression ( ::SireCAS::Symbol::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::Symbol::differentiate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "evaluate"
            , (double ( ::SireCAS::Symbol::* )( ::SireCAS::Values const & ) const)( &::SireCAS::Symbol::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "evaluate"
            , (::SireMaths::Complex ( ::SireCAS::Symbol::* )( ::SireCAS::ComplexValues const & ) const)( &::SireCAS::Symbol::evaluate )
            , ( bp::arg("values") ) )    
        .def( 
            "functions"
            , (::SireCAS::Functions ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::functions ) )    
        .def( 
            "hash"
            , (::uint ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::hash ) )    
        .def( 
            "integrate"
            , (::SireCAS::Expression ( ::SireCAS::Symbol::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::Symbol::integrate )
            , ( bp::arg("symbol") ) )    
        .def( 
            "isConstant"
            , (bool ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::isConstant ) )    
        .def( 
            "isFunction"
            , (bool ( ::SireCAS::Symbol::* )( ::SireCAS::Symbol const & ) const)( &::SireCAS::Symbol::isFunction )
            , ( bp::arg("arg0") ) )    
        .def( bp::self == bp::other< double >() )    
        .def( bp::self == bp::other< int >() )    
        .def( bp::self == bp::other< SireMaths::Complex >() )    
        .def( bp::self == bp::other< SireCAS::Expression >() )    
        .def( bp::self == bp::other< SireCAS::ExBase >() )    
        .def( 
            "substitute"
            , (::SireCAS::Expression ( ::SireCAS::Symbol::* )( ::SireCAS::Identities const & ) const)( &::SireCAS::Symbol::substitute )
            , ( bp::arg("identities") ) )    
        .def( 
            "symbols"
            , (::SireCAS::Symbols ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::symbols ) )    
        .def( 
            "toString"
            , (::QString ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::toString ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireCAS::Symbol::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireCAS::Symbol::* )(  ) const)( &::SireCAS::Symbol::what ) )    
        .staticmethod( "typeName" );

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QByteArray.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

void register_QByteArray_class(){

    bp::class_< QByteArray >( "QByteArray" )    
        .def( bp::init< char const * >(( bp::arg("arg0") )) )    
        .def( bp::init< char const *, int >(( bp::arg("arg0"), bp::arg("size") )) )    
        .def( bp::init< int, char >(( bp::arg("size"), bp::arg("c") )) )    
        .def( bp::init< >() )    
        .def( 
            "at"
            , (char const ( ::QByteArray::* )( int ) const)( &::QByteArray::at )
            , ( bp::arg("i") ) )    
        .def( 
            "capacity"
            , (int ( ::QByteArray::* )(  ) const)( &::QByteArray::capacity ) )    
        .def( 
            "chop"
            , (void ( ::QByteArray::* )( int ) )( &::QByteArray::chop )
            , ( bp::arg("n") ) )    
        .def( 
            "clear"
            , (void ( ::QByteArray::* )(  ) )( &::QByteArray::clear ) )    
        .def( 
            "constData"
            , (char const * ( ::QByteArray::* )(  ) const)( &::QByteArray::constData ) )    
        .def( 
            "contains"
            , (::QBool ( ::QByteArray::* )( char ) const)( &::QByteArray::contains )
            , ( bp::arg("c") ) )    
        .def( 
            "contains"
            , (::QBool ( ::QByteArray::* )( char const * ) const)( &::QByteArray::contains )
            , ( bp::arg("c") ) )    
        .def( 
            "contains"
            , (::QBool ( ::QByteArray::* )( ::QByteArray const & ) const)( &::QByteArray::contains )
            , ( bp::arg("a") ) )    
        .def( 
            "count"
            , (int ( ::QByteArray::* )( char ) const)( &::QByteArray::count )
            , ( bp::arg("c") ) )    
        .def( 
            "count"
            , (int ( ::QByteArray::* )( char const * ) const)( &::QByteArray::count )
            , ( bp::arg("a") ) )    
        .def( 
            "count"
            , (int ( ::QByteArray::* )( ::QByteArray const & ) const)( &::QByteArray::count )
            , ( bp::arg("a") ) )    
        .def( 
            "count"
            , (int ( ::QByteArray::* )(  ) const)( &::QByteArray::count ) )    
        .def( 
            "endsWith"
            , (bool ( ::QByteArray::* )( ::QByteArray const & ) const)( &::QByteArray::endsWith )
            , ( bp::arg("a") ) )    
        .def( 
            "endsWith"
            , (bool ( ::QByteArray::* )( char ) const)( &::QByteArray::endsWith )
            , ( bp::arg("c") ) )    
        .def( 
            "endsWith"
            , (bool ( ::QByteArray::* )( char const * ) const)( &::QByteArray::endsWith )
            , ( bp::arg("c") ) )    
        .def( 
            "fromBase64"
            , (::QByteArray (*)( ::QByteArray const & ))( &::QByteArray::fromBase64 )
            , ( bp::arg("base64") ) )    
        .def( 
            "fromRawData"
            , (::QByteArray (*)( char const *,int ))( &::QByteArray::fromRawData )
            , ( bp::arg("arg0"), bp::arg("size") ) )    
        .def( 
            "indexOf"
            , (int ( ::QByteArray::* )( char,int ) const)( &::QByteArray::indexOf )
            , ( bp::arg("c"), bp::arg("from")=(int)(0) ) )    
        .def( 
            "indexOf"
            , (int ( ::QByteArray::* )( char const *,int ) const)( &::QByteArray::indexOf )
            , ( bp::arg("c"), bp::arg("i")=(int)(0) ) )    
        .def( 
            "indexOf"
            , (int ( ::QByteArray::* )( ::QByteArray const &,int ) const)( &::QByteArray::indexOf )
            , ( bp::arg("a"), bp::arg("from")=(int)(0) ) )    
        .def( 
            "indexOf"
            , (int ( ::QByteArray::* )( ::QString const &,int ) const)( &::QByteArray::indexOf )
            , ( bp::arg("s"), bp::arg("from")=(int)(0) ) )    
        .def( 
            "isEmpty"
            , (bool ( ::QByteArray::* )(  ) const)( &::QByteArray::isEmpty ) )    
        .def( 
            "isNull"
            , (bool ( ::QByteArray::* )(  ) const)( &::QByteArray::isNull ) )    
        .def( 
            "lastIndexOf"
            , (int ( ::QByteArray::* )( char,int ) const)( &::QByteArray::lastIndexOf )
            , ( bp::arg("c"), bp::arg("from")=(int)(-1) ) )    
        .def( 
            "lastIndexOf"
            , (int ( ::QByteArray::* )( char const *,int ) const)( &::QByteArray::lastIndexOf )
            , ( bp::arg("c"), bp::arg("i")=(int)(-1) ) )    
        .def( 
            "lastIndexOf"
            , (int ( ::QByteArray::* )( ::QByteArray const &,int ) const)( &::QByteArray::lastIndexOf )
            , ( bp::arg("a"), bp::arg("from")=(int)(-1) ) )    
        .def( 
            "lastIndexOf"
            , (int ( ::QByteArray::* )( ::QString const &,int ) const)( &::QByteArray::lastIndexOf )
            , ( bp::arg("s"), bp::arg("from")=(int)(-1) ) )    
        .def( 
            "left"
            , (::QByteArray ( ::QByteArray::* )( int ) const)( &::QByteArray::left )
            , ( bp::arg("len") ) )    
        .def( 
            "leftJustified"
            , (::QByteArray ( ::QByteArray::* )( int,char,bool ) const)( &::QByteArray::leftJustified )
            , ( bp::arg("width"), bp::arg("fill")=(char)(' '), bp::arg("truncate")=(bool)(false) ) )    
        .def( 
            "length"
            , (int ( ::QByteArray::* )(  ) const)( &::QByteArray::length ) )    
        .def( 
            "mid"
            , (::QByteArray ( ::QByteArray::* )( int,int ) const)( &::QByteArray::mid )
            , ( bp::arg("index"), bp::arg("len")=(int)(-1) ) )    
        .def( 
            "number"
            , (::QByteArray (*)( int,int ))( &::QByteArray::number )
            , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) )    
        .def( 
            "number"
            , (::QByteArray (*)( ::uint,int ))( &::QByteArray::number )
            , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) )    
        .def( 
            "number"
            , (::QByteArray (*)( ::qlonglong,int ))( &::QByteArray::number )
            , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) )    
        .def( 
            "number"
            , (::QByteArray (*)( ::qulonglong,int ))( &::QByteArray::number )
            , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) )    
        .def( 
            "number"
            , (::QByteArray (*)( double,char,int ))( &::QByteArray::number )
            , ( bp::arg("arg0"), bp::arg("f")=(char)('g'), bp::arg("prec")=(int)(6) ) )    
        .def( bp::self != bp::other< QString >() )    
        .def( bp::self += bp::other< char >() )    
        .def( bp::self += bp::other< char const * >() )    
        .def( bp::self += bp::self )    
        .def( bp::self += bp::other< QString >() )    
        .def( bp::self < bp::other< QString >() )    
        .def( bp::self <= bp::other< QString >() )    
        .def( bp::self == bp::other< QString >() )    
        .def( bp::self > bp::other< QString >() )    
        .def( bp::self >= bp::other< QString >() )    
        .def( 
            "__getitem__"
            , (char const ( ::QByteArray::* )( int ) const)( &::QByteArray::operator[] )
            , ( bp::arg("i") ) )    
        .def( 
            "__getitem__"
            , (::QByteRef ( ::QByteArray::* )( int ) )( &::QByteArray::operator[] )
            , ( bp::arg("i") ) )    
        .def( 
            "__getitem__"
            , (char const ( ::QByteArray::* )( ::uint ) const)( &::QByteArray::operator[] )
            , ( bp::arg("i") ) )    
        .def( 
            "__getitem__"
            , (::QByteRef ( ::QByteArray::* )( ::uint ) )( &::QByteArray::operator[] )
            , ( bp::arg("i") ) )    
        .def( 
            "push_back"
            , (void ( ::QByteArray::* )( char ) )( &::QByteArray::push_back )
            , ( bp::arg("c") ) )    
        .def( 
            "push_back"
            , (void ( ::QByteArray::* )( char const * ) )( &::QByteArray::push_back )
            , ( bp::arg("c") ) )    
        .def( 
            "push_back"
            , (void ( ::QByteArray::* )( ::QByteArray const & ) )( &::QByteArray::push_back )
            , ( bp::arg("a") ) )    
        .def( 
            "push_front"
            , (void ( ::QByteArray::* )( char ) )( &::QByteArray::push_front )
            , ( bp::arg("c") ) )    
        .def( 
            "push_front"
            , (void ( ::QByteArray::* )( char const * ) )( &::QByteArray::push_front )
            , ( bp::arg("c") ) )    
        .def( 
            "push_front"
            , (void ( ::QByteArray::* )( ::QByteArray const & ) )( &::QByteArray::push_front )
            , ( bp::arg("a") ) )    
        .def( 
            "reserve"
            , (void ( ::QByteArray::* )( int ) )( &::QByteArray::reserve )
            , ( bp::arg("asize") ) )    
        .def( 
            "resize"
            , (void ( ::QByteArray::* )( int ) )( &::QByteArray::resize )
            , ( bp::arg("size") ) )    
        .def( 
            "right"
            , (::QByteArray ( ::QByteArray::* )( int ) const)( &::QByteArray::right )
            , ( bp::arg("len") ) )    
        .def( 
            "rightJustified"
            , (::QByteArray ( ::QByteArray::* )( int,char,bool ) const)( &::QByteArray::rightJustified )
            , ( bp::arg("width"), bp::arg("fill")=(char)(' '), bp::arg("truncate")=(bool)(false) ) )    
        .def( 
            "simplified"
            , (::QByteArray ( ::QByteArray::* )(  ) const)( &::QByteArray::simplified ) )    
        .def( 
            "size"
            , (int ( ::QByteArray::* )(  ) const)( &::QByteArray::size ) )    
        .def( 
            "split"
            , (::QList<QByteArray> ( ::QByteArray::* )( char ) const)( &::QByteArray::split )
            , ( bp::arg("sep") ) )    
        .def( 
            "squeeze"
            , (void ( ::QByteArray::* )(  ) )( &::QByteArray::squeeze ) )    
        .def( 
            "startsWith"
            , (bool ( ::QByteArray::* )( ::QByteArray const & ) const)( &::QByteArray::startsWith )
            , ( bp::arg("a") ) )    
        .def( 
            "startsWith"
            , (bool ( ::QByteArray::* )( char ) const)( &::QByteArray::startsWith )
            , ( bp::arg("c") ) )    
        .def( 
            "startsWith"
            , (bool ( ::QByteArray::* )( char const * ) const)( &::QByteArray::startsWith )
            , ( bp::arg("c") ) )    
        .def( 
            "toBase64"
            , (::QByteArray ( ::QByteArray::* )(  ) const)( &::QByteArray::toBase64 ) )    
        .def( 
            "toDouble"
            , (double ( ::QByteArray::* )( bool * ) const)( &::QByteArray::toDouble )
            , ( bp::arg("ok")=bp::object() ) )    
        .def( 
            "toFloat"
            , (float ( ::QByteArray::* )( bool * ) const)( &::QByteArray::toFloat )
            , ( bp::arg("ok")=bp::object() ) )    
        .def( 
            "toInt"
            , (int ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toInt )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toLong"
            , (long int ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toLong )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toLongLong"
            , (::qlonglong ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toLongLong )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toLower"
            , (::QByteArray ( ::QByteArray::* )(  ) const)( &::QByteArray::toLower ) )    
        .def( 
            "toShort"
            , (short int ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toShort )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toUInt"
            , (::uint ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toUInt )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toULong"
            , (::ulong ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toULong )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toULongLong"
            , (::qulonglong ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toULongLong )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toUShort"
            , (::ushort ( ::QByteArray::* )( bool *,int ) const)( &::QByteArray::toUShort )
            , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) )    
        .def( 
            "toUpper"
            , (::QByteArray ( ::QByteArray::* )(  ) const)( &::QByteArray::toUpper ) )    
        .def( 
            "trimmed"
            , (::QByteArray ( ::QByteArray::* )(  ) const)( &::QByteArray::trimmed ) )    
        .def( 
            "truncate"
            , (void ( ::QByteArray::* )( int ) )( &::QByteArray::truncate )
            , ( bp::arg("pos") ) )    
        .staticmethod( "fromBase64" )    
        .staticmethod( "fromRawData" )    
        .staticmethod( "number" );

}

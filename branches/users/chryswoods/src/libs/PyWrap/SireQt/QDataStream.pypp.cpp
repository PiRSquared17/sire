// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QDataStream.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

void register_QDataStream_class(){

    { //::QDataStream
        typedef bp::class_< QDataStream, boost::noncopyable > QDataStream_exposer_t;
        QDataStream_exposer_t QDataStream_exposer = QDataStream_exposer_t( "QDataStream" );
        bp::scope QDataStream_scope( QDataStream_exposer );
        bp::enum_< QDataStream::ByteOrder>("ByteOrder")
            .value("BigEndian", QDataStream::BigEndian)
            .value("LittleEndian", QDataStream::LittleEndian)
            .export_values()
            ;
        bp::enum_< QDataStream::Status>("Status")
            .value("Ok", QDataStream::Ok)
            .value("ReadPastEnd", QDataStream::ReadPastEnd)
            .value("ReadCorruptData", QDataStream::ReadCorruptData)
            .export_values()
            ;
        bp::enum_< QDataStream::Version>("Version")
            .value("Qt_1_0", QDataStream::Qt_1_0)
            .value("Qt_2_0", QDataStream::Qt_2_0)
            .value("Qt_2_1", QDataStream::Qt_2_1)
            .value("Qt_3_0", QDataStream::Qt_3_0)
            .value("Qt_3_1", QDataStream::Qt_3_1)
            .value("Qt_3_3", QDataStream::Qt_3_3)
            .value("Qt_4_0", QDataStream::Qt_4_0)
            .value("Qt_4_1", QDataStream::Qt_4_1)
            .value("Qt_4_2", QDataStream::Qt_4_2)
            .export_values()
            ;
        { //::QDataStream::atEnd
        
            typedef bool ( ::QDataStream::*atEnd_function_type )(  ) const;
            
            QDataStream_exposer.def( 
                "atEnd"
                , atEnd_function_type( &::QDataStream::atEnd ) );
        
        }
        { //::QDataStream::byteOrder
        
            typedef ::QDataStream::ByteOrder ( ::QDataStream::*byteOrder_function_type )(  ) const;
            
            QDataStream_exposer.def( 
                "byteOrder"
                , byteOrder_function_type( &::QDataStream::byteOrder ) );
        
        }
        { //::QDataStream::readRawData
        
            typedef int ( ::QDataStream::*readRawData_function_type )( char *,int ) ;
            
            QDataStream_exposer.def( 
                "readRawData"
                , readRawData_function_type( &::QDataStream::readRawData )
                , ( bp::arg("arg0"), bp::arg("len") ) );
        
        }
        { //::QDataStream::resetStatus
        
            typedef void ( ::QDataStream::*resetStatus_function_type )(  ) ;
            
            QDataStream_exposer.def( 
                "resetStatus"
                , resetStatus_function_type( &::QDataStream::resetStatus ) );
        
        }
        { //::QDataStream::setByteOrder
        
            typedef void ( ::QDataStream::*setByteOrder_function_type )( ::QDataStream::ByteOrder ) ;
            
            QDataStream_exposer.def( 
                "setByteOrder"
                , setByteOrder_function_type( &::QDataStream::setByteOrder )
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDataStream::setDevice
        
            typedef void ( ::QDataStream::*setDevice_function_type )( ::QIODevice * ) ;
            
            QDataStream_exposer.def( 
                "setDevice"
                , setDevice_function_type( &::QDataStream::setDevice )
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDataStream::setStatus
        
            typedef void ( ::QDataStream::*setStatus_function_type )( ::QDataStream::Status ) ;
            
            QDataStream_exposer.def( 
                "setStatus"
                , setStatus_function_type( &::QDataStream::setStatus )
                , ( bp::arg("status") ) );
        
        }
        { //::QDataStream::setVersion
        
            typedef void ( ::QDataStream::*setVersion_function_type )( int ) ;
            
            QDataStream_exposer.def( 
                "setVersion"
                , setVersion_function_type( &::QDataStream::setVersion )
                , ( bp::arg("v") ) );
        
        }
        { //::QDataStream::skipRawData
        
            typedef int ( ::QDataStream::*skipRawData_function_type )( int ) ;
            
            QDataStream_exposer.def( 
                "skipRawData"
                , skipRawData_function_type( &::QDataStream::skipRawData )
                , ( bp::arg("len") ) );
        
        }
        { //::QDataStream::status
        
            typedef ::QDataStream::Status ( ::QDataStream::*status_function_type )(  ) const;
            
            QDataStream_exposer.def( 
                "status"
                , status_function_type( &::QDataStream::status ) );
        
        }
        { //::QDataStream::unsetDevice
        
            typedef void ( ::QDataStream::*unsetDevice_function_type )(  ) ;
            
            QDataStream_exposer.def( 
                "unsetDevice"
                , unsetDevice_function_type( &::QDataStream::unsetDevice ) );
        
        }
        { //::QDataStream::version
        
            typedef int ( ::QDataStream::*version_function_type )(  ) const;
            
            QDataStream_exposer.def( 
                "version"
                , version_function_type( &::QDataStream::version ) );
        
        }
    }

}

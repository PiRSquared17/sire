// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QDate.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

void register_QDate_class(){

    bp::class_< QDate >( "QDate" )    
        .def( bp::init< >() )    
        .def( bp::init< int, int, int >(( bp::arg("y"), bp::arg("m"), bp::arg("d") )) )    
        .def( 
            "addDays"
            , (::QDate ( ::QDate::* )( int ) const)( &::QDate::addDays )
            , ( bp::arg("days") ) )    
        .def( 
            "addMonths"
            , (::QDate ( ::QDate::* )( int ) const)( &::QDate::addMonths )
            , ( bp::arg("months") ) )    
        .def( 
            "addYears"
            , (::QDate ( ::QDate::* )( int ) const)( &::QDate::addYears )
            , ( bp::arg("years") ) )    
        .def( 
            "currentDate"
            , (::QDate (*)(  ))( &::QDate::currentDate ) )    
        .def( 
            "day"
            , (int ( ::QDate::* )(  ) const)( &::QDate::day ) )    
        .def( 
            "dayOfWeek"
            , (int ( ::QDate::* )(  ) const)( &::QDate::dayOfWeek ) )    
        .def( 
            "dayOfYear"
            , (int ( ::QDate::* )(  ) const)( &::QDate::dayOfYear ) )    
        .def( 
            "daysInMonth"
            , (int ( ::QDate::* )(  ) const)( &::QDate::daysInMonth ) )    
        .def( 
            "daysInYear"
            , (int ( ::QDate::* )(  ) const)( &::QDate::daysInYear ) )    
        .def( 
            "daysTo"
            , (int ( ::QDate::* )( ::QDate const & ) const)( &::QDate::daysTo )
            , ( bp::arg("arg0") ) )    
        .def( 
            "fromJulianDay"
            , (::QDate (*)( int ))( &::QDate::fromJulianDay )
            , ( bp::arg("jd") ) )    
        .def( 
            "fromString"
            , (::QDate (*)( ::QString const &,::Qt::DateFormat ))( &::QDate::fromString )
            , ( bp::arg("s"), bp::arg("f")=::Qt::TextDate ) )    
        .def( 
            "fromString"
            , (::QDate (*)( ::QString const &,::QString const & ))( &::QDate::fromString )
            , ( bp::arg("s"), bp::arg("format") ) )    
        .def( 
            "isLeapYear"
            , (bool (*)( int ))( &::QDate::isLeapYear )
            , ( bp::arg("year") ) )    
        .def( 
            "isNull"
            , (bool ( ::QDate::* )(  ) const)( &::QDate::isNull ) )    
        .def( 
            "isValid"
            , (bool ( ::QDate::* )(  ) const)( &::QDate::isValid ) )    
        .def( 
            "isValid"
            , (bool (*)( int,int,int ))( &::QDate::isValid )
            , ( bp::arg("y"), bp::arg("m"), bp::arg("d") ) )    
        .def( 
            "longDayName"
            , (::QString (*)( int ))( &::QDate::longDayName )
            , ( bp::arg("weekday") ) )    
        .def( 
            "longMonthName"
            , (::QString (*)( int ))( &::QDate::longMonthName )
            , ( bp::arg("month") ) )    
        .def( 
            "month"
            , (int ( ::QDate::* )(  ) const)( &::QDate::month ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self >= bp::self )    
        .def( 
            "setDate"
            , (bool ( ::QDate::* )( int,int,int ) )( &::QDate::setDate )
            , ( bp::arg("year"), bp::arg("month"), bp::arg("date") ) )    
        .def( 
            "shortDayName"
            , (::QString (*)( int ))( &::QDate::shortDayName )
            , ( bp::arg("weekday") ) )    
        .def( 
            "shortMonthName"
            , (::QString (*)( int ))( &::QDate::shortMonthName )
            , ( bp::arg("month") ) )    
        .def( 
            "toJulianDay"
            , (int ( ::QDate::* )(  ) const)( &::QDate::toJulianDay ) )    
        .def( 
            "toString"
            , (::QString ( ::QDate::* )( ::Qt::DateFormat ) const)( &::QDate::toString )
            , ( bp::arg("f")=::Qt::TextDate ) )    
        .def( 
            "toString"
            , (::QString ( ::QDate::* )( ::QString const & ) const)( &::QDate::toString )
            , ( bp::arg("format") ) )    
        .def( 
            "weekNumber"
            , (int ( ::QDate::* )( int * ) const)( &::QDate::weekNumber )
            , ( bp::arg("yearNum")=bp::object() ) )    
        .def( 
            "year"
            , (int ( ::QDate::* )(  ) const)( &::QDate::year ) )    
        .staticmethod( "currentDate" )    
        .staticmethod( "fromJulianDay" )    
        .staticmethod( "fromString" )    
        .staticmethod( "isLeapYear" )    
        .staticmethod( "isValid" )    
        .staticmethod( "longDayName" )    
        .staticmethod( "longMonthName" )    
        .staticmethod( "shortDayName" )    
        .staticmethod( "shortMonthName" );

}

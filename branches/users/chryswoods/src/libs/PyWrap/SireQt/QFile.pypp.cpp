// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QFile.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

void register_QFile_class(){

    { //::QFile
        typedef bp::class_< QFile, bp::bases< QIODevice >, boost::noncopyable > QFile_exposer_t;
        QFile_exposer_t QFile_exposer = QFile_exposer_t( "QFile" );
        bp::scope QFile_scope( QFile_exposer );
        bp::enum_< QFile::FileError>("FileError")
            .value("NoError", QFile::NoError)
            .value("ReadError", QFile::ReadError)
            .value("WriteError", QFile::WriteError)
            .value("FatalError", QFile::FatalError)
            .value("ResourceError", QFile::ResourceError)
            .value("OpenError", QFile::OpenError)
            .value("AbortError", QFile::AbortError)
            .value("TimeOutError", QFile::TimeOutError)
            .value("UnspecifiedError", QFile::UnspecifiedError)
            .value("RemoveError", QFile::RemoveError)
            .value("RenameError", QFile::RenameError)
            .value("PositionError", QFile::PositionError)
            .value("ResizeError", QFile::ResizeError)
            .value("PermissionsError", QFile::PermissionsError)
            .value("CopyError", QFile::CopyError)
            .export_values()
            ;
        bp::enum_< QFile::Permission>("Permission")
            .value("ReadOwner", QFile::ReadOwner)
            .value("WriteOwner", QFile::WriteOwner)
            .value("ExeOwner", QFile::ExeOwner)
            .value("ReadUser", QFile::ReadUser)
            .value("WriteUser", QFile::WriteUser)
            .value("ExeUser", QFile::ExeUser)
            .value("ReadGroup", QFile::ReadGroup)
            .value("WriteGroup", QFile::WriteGroup)
            .value("ExeGroup", QFile::ExeGroup)
            .value("ReadOther", QFile::ReadOther)
            .value("WriteOther", QFile::WriteOther)
            .value("ExeOther", QFile::ExeOther)
            .export_values()
            ;
        { //::QFile::atEnd
        
            typedef bool ( ::QFile::*atEnd_function_type )(  ) const;
            
            QFile_exposer.def( 
                "atEnd"
                , atEnd_function_type( &::QFile::atEnd ) );
        
        }
        { //::QFile::copy
        
            typedef bool ( ::QFile::*copy_function_type )( ::QString const & ) ;
            
            QFile_exposer.def( 
                "copy"
                , copy_function_type( &::QFile::copy )
                , ( bp::arg("newName") ) );
        
        }
        { //::QFile::copy
        
            typedef bool ( *copy_function_type )( ::QString const &,::QString const & );
            
            QFile_exposer.def( 
                "copy"
                , copy_function_type( &::QFile::copy )
                , ( bp::arg("fileName"), bp::arg("newName") ) );
        
        }
        { //::QFile::decodeName
        
            typedef ::QString ( *decodeName_function_type )( ::QByteArray const & );
            
            QFile_exposer.def( 
                "decodeName"
                , decodeName_function_type( &::QFile::decodeName )
                , ( bp::arg("localFileName") ) );
        
        }
        { //::QFile::decodeName
        
            typedef ::QString ( *decodeName_function_type )( char const * );
            
            QFile_exposer.def( 
                "decodeName"
                , decodeName_function_type( &::QFile::decodeName )
                , ( bp::arg("localFileName") ) );
        
        }
        { //::QFile::encodeName
        
            typedef ::QByteArray ( *encodeName_function_type )( ::QString const & );
            
            QFile_exposer.def( 
                "encodeName"
                , encodeName_function_type( &::QFile::encodeName )
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::error
        
            typedef ::QFile::FileError ( ::QFile::*error_function_type )(  ) const;
            
            QFile_exposer.def( 
                "error"
                , error_function_type( &::QFile::error ) );
        
        }
        { //::QFile::exists
        
            typedef bool ( ::QFile::*exists_function_type )(  ) const;
            
            QFile_exposer.def( 
                "exists"
                , exists_function_type( &::QFile::exists ) );
        
        }
        { //::QFile::exists
        
            typedef bool ( *exists_function_type )( ::QString const & );
            
            QFile_exposer.def( 
                "exists"
                , exists_function_type( &::QFile::exists )
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::fileName
        
            typedef ::QString ( ::QFile::*fileName_function_type )(  ) const;
            
            QFile_exposer.def( 
                "fileName"
                , fileName_function_type( &::QFile::fileName ) );
        
        }
        { //::QFile::flush
        
            typedef bool ( ::QFile::*flush_function_type )(  ) ;
            
            QFile_exposer.def( 
                "flush"
                , flush_function_type( &::QFile::flush ) );
        
        }
        { //::QFile::handle
        
            typedef int ( ::QFile::*handle_function_type )(  ) const;
            
            QFile_exposer.def( 
                "handle"
                , handle_function_type( &::QFile::handle ) );
        
        }
        { //::QFile::isSequential
        
            typedef bool ( ::QFile::*isSequential_function_type )(  ) const;
            
            QFile_exposer.def( 
                "isSequential"
                , isSequential_function_type( &::QFile::isSequential ) );
        
        }
        { //::QFile::link
        
            typedef bool ( ::QFile::*link_function_type )( ::QString const & ) ;
            
            QFile_exposer.def( 
                "link"
                , link_function_type( &::QFile::link )
                , ( bp::arg("newName") ) );
        
        }
        { //::QFile::link
        
            typedef bool ( *link_function_type )( ::QString const &,::QString const & );
            
            QFile_exposer.def( 
                "link"
                , link_function_type( &::QFile::link )
                , ( bp::arg("oldname"), bp::arg("newName") ) );
        
        }
        { //::QFile::open
        
            typedef bool ( ::QFile::*open_function_type )( ::QFlags<QIODevice::OpenModeFlag> ) ;
            
            QFile_exposer.def( 
                "open"
                , open_function_type( &::QFile::open )
                , ( bp::arg("flags") ) );
        
        }
        { //::QFile::open
        
            typedef bool ( ::QFile::*open_function_type )( ::FILE *,::QFlags<QIODevice::OpenModeFlag> ) ;
            
            QFile_exposer.def( 
                "open"
                , open_function_type( &::QFile::open )
                , ( bp::arg("f"), bp::arg("flags") ) );
        
        }
        { //::QFile::open
        
            typedef bool ( ::QFile::*open_function_type )( int,::QFlags<QIODevice::OpenModeFlag> ) ;
            
            QFile_exposer.def( 
                "open"
                , open_function_type( &::QFile::open )
                , ( bp::arg("fd"), bp::arg("flags") ) );
        
        }
        { //::QFile::permissions
        
            typedef ::QFlags<QFile::Permission> ( ::QFile::*permissions_function_type )(  ) const;
            
            QFile_exposer.def( 
                "permissions"
                , permissions_function_type( &::QFile::permissions ) );
        
        }
        { //::QFile::permissions
        
            typedef ::QFlags<QFile::Permission> ( *permissions_function_type )( ::QString const & );
            
            QFile_exposer.def( 
                "permissions"
                , permissions_function_type( &::QFile::permissions )
                , ( bp::arg("filename") ) );
        
        }
        { //::QFile::remove
        
            typedef bool ( ::QFile::*remove_function_type )(  ) ;
            
            QFile_exposer.def( 
                "remove"
                , remove_function_type( &::QFile::remove ) );
        
        }
        { //::QFile::remove
        
            typedef bool ( *remove_function_type )( ::QString const & );
            
            QFile_exposer.def( 
                "remove"
                , remove_function_type( &::QFile::remove )
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::rename
        
            typedef bool ( ::QFile::*rename_function_type )( ::QString const & ) ;
            
            QFile_exposer.def( 
                "rename"
                , rename_function_type( &::QFile::rename )
                , ( bp::arg("newName") ) );
        
        }
        { //::QFile::rename
        
            typedef bool ( *rename_function_type )( ::QString const &,::QString const & );
            
            QFile_exposer.def( 
                "rename"
                , rename_function_type( &::QFile::rename )
                , ( bp::arg("oldName"), bp::arg("newName") ) );
        
        }
        { //::QFile::resize
        
            typedef bool ( ::QFile::*resize_function_type )( ::qint64 ) ;
            
            QFile_exposer.def( 
                "resize"
                , resize_function_type( &::QFile::resize )
                , ( bp::arg("sz") ) );
        
        }
        { //::QFile::resize
        
            typedef bool ( *resize_function_type )( ::QString const &,::qint64 );
            
            QFile_exposer.def( 
                "resize"
                , resize_function_type( &::QFile::resize )
                , ( bp::arg("filename"), bp::arg("sz") ) );
        
        }
        { //::QFile::setFileName
        
            typedef void ( ::QFile::*setFileName_function_type )( ::QString const & ) ;
            
            QFile_exposer.def( 
                "setFileName"
                , setFileName_function_type( &::QFile::setFileName )
                , ( bp::arg("name") ) );
        
        }
        { //::QFile::setPermissions
        
            typedef bool ( ::QFile::*setPermissions_function_type )( ::QFlags<QFile::Permission> ) ;
            
            QFile_exposer.def( 
                "setPermissions"
                , setPermissions_function_type( &::QFile::setPermissions )
                , ( bp::arg("permissionSpec") ) );
        
        }
        { //::QFile::setPermissions
        
            typedef bool ( *setPermissions_function_type )( ::QString const &,::QFlags<QFile::Permission> );
            
            QFile_exposer.def( 
                "setPermissions"
                , setPermissions_function_type( &::QFile::setPermissions )
                , ( bp::arg("filename"), bp::arg("permissionSpec") ) );
        
        }
        { //::QFile::size
        
            typedef ::qint64 ( ::QFile::*size_function_type )(  ) const;
            
            QFile_exposer.def( 
                "size"
                , size_function_type( &::QFile::size ) );
        
        }
        { //::QFile::symLinkTarget
        
            typedef ::QString ( ::QFile::*symLinkTarget_function_type )(  ) const;
            
            QFile_exposer.def( 
                "symLinkTarget"
                , symLinkTarget_function_type( &::QFile::symLinkTarget ) );
        
        }
        { //::QFile::symLinkTarget
        
            typedef ::QString ( *symLinkTarget_function_type )( ::QString const & );
            
            QFile_exposer.def( 
                "symLinkTarget"
                , symLinkTarget_function_type( &::QFile::symLinkTarget )
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::unsetError
        
            typedef void ( ::QFile::*unsetError_function_type )(  ) ;
            
            QFile_exposer.def( 
                "unsetError"
                , unsetError_function_type( &::QFile::unsetError ) );
        
        }
        QFile_exposer.staticmethod( "copy" );
        QFile_exposer.staticmethod( "decodeName" );
        QFile_exposer.staticmethod( "encodeName" );
        QFile_exposer.staticmethod( "exists" );
        QFile_exposer.staticmethod( "link" );
        QFile_exposer.staticmethod( "permissions" );
        QFile_exposer.staticmethod( "remove" );
        QFile_exposer.staticmethod( "rename" );
        QFile_exposer.staticmethod( "resize" );
        QFile_exposer.staticmethod( "setPermissions" );
        QFile_exposer.staticmethod( "symLinkTarget" );
    }

}

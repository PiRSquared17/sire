// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QTime.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

void register_QTime_class(){

    bp::class_< QTime >( "QTime" )    
        .def( bp::init< >() )    
        .def( bp::init< int, int, bp::optional< int, int > >(( bp::arg("h"), bp::arg("m"), bp::arg("s")=(int)(0), bp::arg("ms")=(int)(0) )) )    
        .def( 
            "addMSecs"
            , (::QTime ( ::QTime::* )( int ) const)( &::QTime::addMSecs )
            , ( bp::arg("ms") ) )    
        .def( 
            "addSecs"
            , (::QTime ( ::QTime::* )( int ) const)( &::QTime::addSecs )
            , ( bp::arg("secs") ) )    
        .def( 
            "currentTime"
            , (::QTime (*)(  ))( &::QTime::currentTime ) )    
        .def( 
            "elapsed"
            , (int ( ::QTime::* )(  ) const)( &::QTime::elapsed ) )    
        .def( 
            "fromString"
            , (::QTime (*)( ::QString const &,::Qt::DateFormat ))( &::QTime::fromString )
            , ( bp::arg("s"), bp::arg("f")=::Qt::TextDate ) )    
        .def( 
            "fromString"
            , (::QTime (*)( ::QString const &,::QString const & ))( &::QTime::fromString )
            , ( bp::arg("s"), bp::arg("format") ) )    
        .def( 
            "hour"
            , (int ( ::QTime::* )(  ) const)( &::QTime::hour ) )    
        .def( 
            "isNull"
            , (bool ( ::QTime::* )(  ) const)( &::QTime::isNull ) )    
        .def( 
            "isValid"
            , (bool ( ::QTime::* )(  ) const)( &::QTime::isValid ) )    
        .def( 
            "isValid"
            , (bool (*)( int,int,int,int ))( &::QTime::isValid )
            , ( bp::arg("h"), bp::arg("m"), bp::arg("s"), bp::arg("ms")=(int)(0) ) )    
        .def( 
            "minute"
            , (int ( ::QTime::* )(  ) const)( &::QTime::minute ) )    
        .def( 
            "msec"
            , (int ( ::QTime::* )(  ) const)( &::QTime::msec ) )    
        .def( 
            "msecsTo"
            , (int ( ::QTime::* )( ::QTime const & ) const)( &::QTime::msecsTo )
            , ( bp::arg("arg0") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self >= bp::self )    
        .def( 
            "restart"
            , (int ( ::QTime::* )(  ) )( &::QTime::restart ) )    
        .def( 
            "second"
            , (int ( ::QTime::* )(  ) const)( &::QTime::second ) )    
        .def( 
            "secsTo"
            , (int ( ::QTime::* )( ::QTime const & ) const)( &::QTime::secsTo )
            , ( bp::arg("arg0") ) )    
        .def( 
            "setHMS"
            , (bool ( ::QTime::* )( int,int,int,int ) )( &::QTime::setHMS )
            , ( bp::arg("h"), bp::arg("m"), bp::arg("s"), bp::arg("ms")=(int)(0) ) )    
        .def( 
            "start"
            , (void ( ::QTime::* )(  ) )( &::QTime::start ) )    
        .def( 
            "toString"
            , (::QString ( ::QTime::* )( ::Qt::DateFormat ) const)( &::QTime::toString )
            , ( bp::arg("f")=::Qt::TextDate ) )    
        .def( 
            "toString"
            , (::QString ( ::QTime::* )( ::QString const & ) const)( &::QTime::toString )
            , ( bp::arg("format") ) )    
        .staticmethod( "currentTime" )    
        .staticmethod( "fromString" )    
        .staticmethod( "isValid" );

}

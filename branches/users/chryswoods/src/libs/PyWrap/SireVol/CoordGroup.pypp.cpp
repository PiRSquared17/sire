// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CoordGroup.pypp.hpp"
#include "boost/python.hpp"
#include "sirevol_headers.h"
#include "SireMaths/vector.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"

namespace bp = boost::python;

SireVol::CoordGroup __copy__(const SireVol::CoordGroup &other){ return SireVol::CoordGroup(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireVol::CoordGroup&){ return "SireVol::CoordGroup";}

void register_CoordGroup_class(){

    bp::class_< SireVol::CoordGroup, bp::bases< SireVol::CoordGroupBase > >( "CoordGroup" )    
        .def( bp::init< >() )    
        .def( bp::init< int >(( bp::arg("size") )) )    
        .def( bp::init< int, SireMaths::Vector const & >(( bp::arg("size"), bp::arg("value") )) )    
        .def( bp::init< QVector<SireMaths::Vector> const & >(( bp::arg("points") )) )    
        .def( bp::init< SireVol::CoordGroupBase const & >(( bp::arg("other") )) )    
        .def( 
            "edit"
            , (::SireVol::CoordGroupEditor ( ::SireVol::CoordGroup::* )(  ) const)( &::SireVol::CoordGroup::edit ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireVol::CoordGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireVol::CoordGroup >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

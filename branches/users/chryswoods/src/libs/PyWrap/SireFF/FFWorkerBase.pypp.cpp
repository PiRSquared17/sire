// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "FFWorkerBase.pypp.hpp"
#include "boost/python.hpp"
#include "sireff_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"
#include "SireMol/cgatomid.h"
#include "SireMol/cutgroupnum.h"
#include "SireMol/resnumatomid.h"
#include "SireMol/resid.h"
#include "SireMol/moleculeid.h"

namespace bp = boost::python;

const char* pvt_get_name(const SireFF::FFWorkerBase&){ return "SireFF::FFWorkerBase";}

void register_FFWorkerBase_class(){

    { //::SireFF::FFWorkerBase
        typedef bp::class_< SireFF::FFWorkerBase, boost::noncopyable > FFWorkerBase_exposer_t;
        FFWorkerBase_exposer_t FFWorkerBase_exposer = FFWorkerBase_exposer_t( "FFWorkerBase", bp::no_init );
        bp::scope FFWorkerBase_scope( FFWorkerBase_exposer );
        { //::SireFF::FFWorkerBase::ID
        
            typedef ::SireFF::ForceFieldID ( ::SireFF::FFWorkerBase::*ID_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "ID"
                , ID_function_type( &::SireFF::FFWorkerBase::ID ) );
        
        }
        { //::SireFF::FFWorkerBase::add
        
            typedef bool ( ::SireFF::FFWorkerBase::*add_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "add"
                , add_function_type( &::SireFF::FFWorkerBase::add )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::add
        
            typedef bool ( ::SireFF::FFWorkerBase::*add_function_type )( ::QList<SireMol::PartialMolecule> const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "add"
                , add_function_type( &::SireFF::FFWorkerBase::add )
                , ( bp::arg("molecules"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::addTo
        
            typedef bool ( ::SireFF::FFWorkerBase::*addTo_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireFF::FFWorkerBase::addTo )
                , ( bp::arg("group"), bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::addTo
        
            typedef bool ( ::SireFF::FFWorkerBase::*addTo_function_type )( ::SireFF::FFBase::Group const &,::QList<SireMol::PartialMolecule> const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireFF::FFWorkerBase::addTo )
                , ( bp::arg("group"), bp::arg("molecules"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::assertContains
        
            typedef void ( ::SireFF::FFWorkerBase::*assertContains_function_type )( ::SireFF::FFComponent const & ) const;
            
            FFWorkerBase_exposer.def( 
                "assertContains"
                , assertContains_function_type( &::SireFF::FFWorkerBase::assertContains )
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::FFWorkerBase::change
        
            typedef bool ( ::SireFF::FFWorkerBase::*change_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            FFWorkerBase_exposer.def( 
                "change"
                , change_function_type( &::SireFF::FFWorkerBase::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFWorkerBase::change
        
            typedef bool ( ::SireFF::FFWorkerBase::*change_function_type )( ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> const & ) ;
            
            FFWorkerBase_exposer.def( 
                "change"
                , change_function_type( &::SireFF::FFWorkerBase::change )
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireFF::FFWorkerBase::contains
        
            typedef bool ( ::SireFF::FFWorkerBase::*contains_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            FFWorkerBase_exposer.def( 
                "contains"
                , contains_function_type( &::SireFF::FFWorkerBase::contains )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFWorkerBase::contains
        
            typedef bool ( ::SireFF::FFWorkerBase::*contains_function_type )( ::SireMol::PartialMolecule const &,::SireFF::FFBase::Group const & ) ;
            
            FFWorkerBase_exposer.def( 
                "contains"
                , contains_function_type( &::SireFF::FFWorkerBase::contains )
                , ( bp::arg("molecule"), bp::arg("group") ) );
        
        }
        { //::SireFF::FFWorkerBase::containsProperty
        
            typedef bool ( ::SireFF::FFWorkerBase::*containsProperty_function_type )( ::QString const & ) ;
            
            FFWorkerBase_exposer.def( 
                "containsProperty"
                , containsProperty_function_type( &::SireFF::FFWorkerBase::containsProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::FFWorkerBase::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFWorkerBase::*contents_function_type )( ::SireFF::FFBase::Group const ) ;
            
            FFWorkerBase_exposer.def( 
                "contents"
                , contents_function_type( &::SireFF::FFWorkerBase::contents )
                , ( bp::arg("group") ) );
        
        }
        { //::SireFF::FFWorkerBase::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFWorkerBase::*contents_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "contents"
                , contents_function_type( &::SireFF::FFWorkerBase::contents ) );
        
        }
        { //::SireFF::FFWorkerBase::energies
        
            typedef ::SireCAS::Values ( ::SireFF::FFWorkerBase::*energies_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "energies"
                , energies_function_type( &::SireFF::FFWorkerBase::energies ) );
        
        }
        { //::SireFF::FFWorkerBase::energy
        
            typedef double ( ::SireFF::FFWorkerBase::*energy_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "energy"
                , energy_function_type( &::SireFF::FFWorkerBase::energy ) );
        
        }
        { //::SireFF::FFWorkerBase::energy
        
            typedef double ( ::SireFF::FFWorkerBase::*energy_function_type )( ::SireFF::FFComponent const & ) ;
            
            FFWorkerBase_exposer.def( 
                "energy"
                , energy_function_type( &::SireFF::FFWorkerBase::energy )
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::FFWorkerBase::forcefield
        
            typedef ::SireFF::ForceField ( ::SireFF::FFWorkerBase::*forcefield_function_type )(  ) const;
            
            FFWorkerBase_exposer.def( 
                "forcefield"
                , forcefield_function_type( &::SireFF::FFWorkerBase::forcefield ) );
        
        }
        { //::SireFF::FFWorkerBase::getProperty
        
            typedef ::SireBase::Property ( ::SireFF::FFWorkerBase::*getProperty_function_type )( ::QString const & ) ;
            
            FFWorkerBase_exposer.def( 
                "getProperty"
                , getProperty_function_type( &::SireFF::FFWorkerBase::getProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::FFWorkerBase::isClean
        
            typedef bool ( ::SireFF::FFWorkerBase::*isClean_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "isClean"
                , isClean_function_type( &::SireFF::FFWorkerBase::isClean ) );
        
        }
        { //::SireFF::FFWorkerBase::isDirty
        
            typedef bool ( ::SireFF::FFWorkerBase::*isDirty_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "isDirty"
                , isDirty_function_type( &::SireFF::FFWorkerBase::isDirty ) );
        
        }
        { //::SireFF::FFWorkerBase::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireFF::FFWorkerBase::*molecule_function_type )( ::SireMol::MoleculeID ) ;
            
            FFWorkerBase_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireFF::FFWorkerBase::molecule )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireFF::FFWorkerBase::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireFF::FFWorkerBase::*moleculeIDs_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireFF::FFWorkerBase::moleculeIDs ) );
        
        }
        { //::SireFF::FFWorkerBase::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireFF::FFWorkerBase::*moleculeIDs_function_type )( ::SireFF::FFBase::Group const & ) ;
            
            FFWorkerBase_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireFF::FFWorkerBase::moleculeIDs )
                , ( bp::arg("group") ) );
        
        }
        { //::SireFF::FFWorkerBase::recalculateEnergy
        
            typedef void ( ::SireFF::FFWorkerBase::*recalculateEnergy_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "recalculateEnergy"
                , recalculateEnergy_function_type( &::SireFF::FFWorkerBase::recalculateEnergy ) );
        
        }
        { //::SireFF::FFWorkerBase::refersTo
        
            typedef bool ( ::SireFF::FFWorkerBase::*refersTo_function_type )( ::SireMol::MoleculeID ) ;
            
            FFWorkerBase_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireFF::FFWorkerBase::refersTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireFF::FFWorkerBase::refersTo
        
            typedef bool ( ::SireFF::FFWorkerBase::*refersTo_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) ;
            
            FFWorkerBase_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireFF::FFWorkerBase::refersTo )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireFF::FFWorkerBase::remove
        
            typedef bool ( ::SireFF::FFWorkerBase::*remove_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            FFWorkerBase_exposer.def( 
                "remove"
                , remove_function_type( &::SireFF::FFWorkerBase::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFWorkerBase::remove
        
            typedef bool ( ::SireFF::FFWorkerBase::*remove_function_type )( ::QList<SireMol::PartialMolecule> const & ) ;
            
            FFWorkerBase_exposer.def( 
                "remove"
                , remove_function_type( &::SireFF::FFWorkerBase::remove )
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireFF::FFWorkerBase::removeFrom
        
            typedef bool ( ::SireFF::FFWorkerBase::*removeFrom_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const & ) ;
            
            FFWorkerBase_exposer.def( 
                "removeFrom"
                , removeFrom_function_type( &::SireFF::FFWorkerBase::removeFrom )
                , ( bp::arg("group"), bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFWorkerBase::removeFrom
        
            typedef bool ( ::SireFF::FFWorkerBase::*removeFrom_function_type )( ::SireFF::FFBase::Group const &,::QList<SireMol::PartialMolecule> const & ) ;
            
            FFWorkerBase_exposer.def( 
                "removeFrom"
                , removeFrom_function_type( &::SireFF::FFWorkerBase::removeFrom )
                , ( bp::arg("group"), bp::arg("molecules") ) );
        
        }
        { //::SireFF::FFWorkerBase::setForceField
        
            typedef void ( ::SireFF::FFWorkerBase::*setForceField_function_type )( ::SireFF::ForceField const & ) ;
            
            FFWorkerBase_exposer.def( 
                "setForceField"
                , setForceField_function_type( &::SireFF::FFWorkerBase::setForceField )
                , ( bp::arg("forcefield") ) );
        
        }
        { //::SireFF::FFWorkerBase::setProperty
        
            typedef bool ( ::SireFF::FFWorkerBase::*setProperty_function_type )( ::QString const &,::SireBase::Property const & ) ;
            
            FFWorkerBase_exposer.def( 
                "setProperty"
                , setProperty_function_type( &::SireFF::FFWorkerBase::setProperty )
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireFF::FFWorkerBase::version
        
            typedef ::SireBase::Version ( ::SireFF::FFWorkerBase::*version_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "version"
                , version_function_type( &::SireFF::FFWorkerBase::version ) );
        
        }
        { //::SireFF::FFWorkerBase::waitUntilReady
        
            typedef void ( ::SireFF::FFWorkerBase::*waitUntilReady_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "waitUntilReady"
                , waitUntilReady_function_type( &::SireFF::FFWorkerBase::waitUntilReady ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< SireFF::FFWorkerBase > >();
        FFWorkerBase_exposer.def( "__str__", &pvt_get_name);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "FFBase.pypp.hpp"
#include "boost/python.hpp"
#include "sireff_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"
#include "SireMol/cgatomid.h"
#include "SireMol/cutgroupnum.h"
#include "SireMol/resnumatomid.h"
#include "SireMol/resid.h"
#include "SireMol/moleculeid.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_FFBase_class(){

    { //::SireFF::FFBase
        typedef bp::class_< SireFF::FFBase, boost::noncopyable > FFBase_exposer_t;
        FFBase_exposer_t FFBase_exposer = FFBase_exposer_t( "FFBase", bp::no_init );
        bp::scope FFBase_scope( FFBase_exposer );
        bp::class_< SireFF::FFBase::Components >( "Components" )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3"), bp::arg("sym4") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3"), bp::arg("sym4"), bp::arg("sym5") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3"), bp::arg("sym4"), bp::arg("sym5"), bp::arg("sym6") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3"), bp::arg("sym4"), bp::arg("sym5"), bp::arg("sym6"), bp::arg("sym7") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3"), bp::arg("sym4"), bp::arg("sym5"), bp::arg("sym6"), bp::arg("sym7"), bp::arg("sym8") ) )    
            .def( 
                "addToSymbols"
                , (::SireCAS::Symbols (*)( ::SireCAS::Symbols,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const &,::SireCAS::Symbol const & ))( &::SireFF::FFBase::Components::addToSymbols )
                , ( bp::arg("symbols"), bp::arg("sym0"), bp::arg("sym1"), bp::arg("sym2"), bp::arg("sym3"), bp::arg("sym4"), bp::arg("sym5"), bp::arg("sym6"), bp::arg("sym7"), bp::arg("sym8"), bp::arg("sym9") ) )    
            .def( 
                "assertContains"
                , (void ( ::SireFF::FFBase::Components::* )( ::SireFF::FFComponent const & ) const)( &::SireFF::FFBase::Components::assertContains )
                , ( bp::arg("component") ) )    
            .def( 
                "contains"
                , (bool ( ::SireFF::FFBase::Components::* )( ::SireFF::FFComponent const & ) const)( &::SireFF::FFBase::Components::contains )
                , ( bp::arg("component") ) )    
            .def( 
                "describe_total"
                , (::QString (*)(  ))( &::SireFF::FFBase::Components::describe_total ) )    
            .def( 
                "total"
                , (::SireFF::FFComponent const & ( ::SireFF::FFBase::Components::* )(  ) const)( &::SireFF::FFBase::Components::total )
                , bp::return_value_policy< bp::copy_const_reference >() )    
            .def( 
                "x"
                , (::SireCAS::Symbol (*)(  ))( &::SireFF::FFBase::Components::x ) )    
            .def( 
                "y"
                , (::SireCAS::Symbol (*)(  ))( &::SireFF::FFBase::Components::y ) )    
            .def( 
                "z"
                , (::SireCAS::Symbol (*)(  ))( &::SireFF::FFBase::Components::z ) )    
            .staticmethod( "addToSymbols" )    
            .staticmethod( "describe_total" )    
            .staticmethod( "x" )    
            .staticmethod( "y" )    
            .staticmethod( "z" );
        bp::class_< SireFF::FFBase::Group >( "Group", bp::no_init )    
            .def( "__int__", &SireFF::FFBase::Group::operator ::quint32  );
        bp::class_< SireFF::FFBase::Groups >( "Groups" )    
            .def( 
                "count"
                , (::quint32 ( ::SireFF::FFBase::Groups::* )(  ) const)( &::SireFF::FFBase::Groups::count ) )    
            .def( 
                "main"
                , (::SireFF::FFBase::Group (*)(  ))( &::SireFF::FFBase::Groups::main ) )    
            .staticmethod( "main" );
        bp::class_< SireFF::FFBase::Parameters >( "Parameters" );
        { //::SireFF::FFBase::ID
        
            typedef ::SireFF::ForceFieldID ( ::SireFF::FFBase::*ID_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "ID"
                , ID_function_type( &::SireFF::FFBase::ID ) );
        
        }
        { //::SireFF::FFBase::add
        
            typedef bool ( ::SireFF::FFBase::*add_function_type )( ::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            FFBase_exposer.def( 
                "add"
                , add_function_type( &::SireFF::FFBase::add )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFBase::add
        
            typedef bool ( ::SireFF::FFBase::*add_function_type )( ::QList<SireMol::PartialMolecule> const &,::SireFF::ParameterMap const & ) ;
            
            FFBase_exposer.def( 
                "add"
                , add_function_type( &::SireFF::FFBase::add )
                , ( bp::arg("molecules"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFBase::addTo
        
            typedef bool ( ::SireFF::FFBase::*addTo_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const &,::SireFF::ParameterMap const & ) ;
            
            FFBase_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireFF::FFBase::addTo )
                , ( bp::arg("group"), bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFBase::addTo
        
            typedef bool ( ::SireFF::FFBase::*addTo_function_type )( ::SireFF::FFBase::Group const &,::QList<SireMol::PartialMolecule> const &,::SireFF::ParameterMap const & ) ;
            
            FFBase_exposer.def( 
                "addTo"
                , addTo_function_type( &::SireFF::FFBase::addTo )
                , ( bp::arg("group"), bp::arg("molecules"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFBase::assertContains
        
            typedef void ( ::SireFF::FFBase::*assertContains_function_type )( ::SireFF::FFComponent const & ) const;
            
            FFBase_exposer.def( 
                "assertContains"
                , assertContains_function_type( &::SireFF::FFBase::assertContains )
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::FFBase::change
        
            typedef bool ( ::SireFF::FFBase::*change_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            FFBase_exposer.def( 
                "change"
                , change_function_type( &::SireFF::FFBase::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFBase::change
        
            typedef bool ( ::SireFF::FFBase::*change_function_type )( ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> const & ) ;
            
            FFBase_exposer.def( 
                "change"
                , change_function_type( &::SireFF::FFBase::change )
                , ( bp::arg("mols") ) );
        
        }
        { //::SireFF::FFBase::components
        
            typedef ::SireFF::FFBase::Components const & ( ::SireFF::FFBase::*components_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "components"
                , components_function_type( &::SireFF::FFBase::components )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::FFBase::contains
        
            typedef bool ( ::SireFF::FFBase::*contains_function_type )( ::SireMol::PartialMolecule const & ) const;
            
            FFBase_exposer.def( 
                "contains"
                , contains_function_type( &::SireFF::FFBase::contains )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFBase::contains
        
            typedef bool ( ::SireFF::FFBase::*contains_function_type )( ::SireMol::PartialMolecule const &,::SireFF::FFBase::Group const & ) const;
            
            FFBase_exposer.def( 
                "contains"
                , contains_function_type( &::SireFF::FFBase::contains )
                , ( bp::arg("molecule"), bp::arg("group") ) );
        
        }
        { //::SireFF::FFBase::containsProperty
        
            typedef bool ( ::SireFF::FFBase::*containsProperty_function_type )( ::QString const & ) const;
            
            FFBase_exposer.def( 
                "containsProperty"
                , containsProperty_function_type( &::SireFF::FFBase::containsProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::FFBase::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFBase::*contents_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "contents"
                , contents_function_type( &::SireFF::FFBase::contents ) );
        
        }
        { //::SireFF::FFBase::contents
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFBase::*contents_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            FFBase_exposer.def( 
                "contents"
                , contents_function_type( &::SireFF::FFBase::contents )
                , ( bp::arg("group") ) );
        
        }
        { //::SireFF::FFBase::energies
        
            typedef ::SireCAS::Values ( ::SireFF::FFBase::*energies_function_type )( ::QSet<SireFF::FFComponent> const & ) ;
            
            FFBase_exposer.def( 
                "energies"
                , energies_function_type( &::SireFF::FFBase::energies )
                , ( bp::arg("components") ) );
        
        }
        { //::SireFF::FFBase::energies
        
            typedef ::SireCAS::Values ( ::SireFF::FFBase::*energies_function_type )(  ) ;
            
            FFBase_exposer.def( 
                "energies"
                , energies_function_type( &::SireFF::FFBase::energies ) );
        
        }
        { //::SireFF::FFBase::energy
        
            typedef double ( ::SireFF::FFBase::*energy_function_type )(  ) ;
            
            FFBase_exposer.def( 
                "energy"
                , energy_function_type( &::SireFF::FFBase::energy ) );
        
        }
        { //::SireFF::FFBase::energy
        
            typedef double ( ::SireFF::FFBase::*energy_function_type )( ::SireCAS::Function const & ) ;
            
            FFBase_exposer.def( 
                "energy"
                , energy_function_type( &::SireFF::FFBase::energy )
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::FFBase::getProperty
        
            typedef ::SireBase::Property ( ::SireFF::FFBase::*getProperty_function_type )( ::QString const & ) const;
            
            FFBase_exposer.def( 
                "getProperty"
                , getProperty_function_type( &::SireFF::FFBase::getProperty )
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::FFBase::groups
        
            typedef ::SireFF::FFBase::Groups const & ( ::SireFF::FFBase::*groups_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "groups"
                , groups_function_type( &::SireFF::FFBase::groups )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::FFBase::isClean
        
            typedef bool ( ::SireFF::FFBase::*isClean_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "isClean"
                , isClean_function_type( &::SireFF::FFBase::isClean ) );
        
        }
        { //::SireFF::FFBase::isDirty
        
            typedef bool ( ::SireFF::FFBase::*isDirty_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "isDirty"
                , isDirty_function_type( &::SireFF::FFBase::isDirty ) );
        
        }
        { //::SireFF::FFBase::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireFF::FFBase::*molecule_function_type )( ::SireMol::MoleculeID ) const;
            
            FFBase_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireFF::FFBase::molecule )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireFF::FFBase::molecule
        
            typedef ::SireMol::PartialMolecule ( ::SireFF::FFBase::*molecule_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) const;
            
            FFBase_exposer.def( 
                "molecule"
                , molecule_function_type( &::SireFF::FFBase::molecule )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireFF::FFBase::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireFF::FFBase::*moleculeIDs_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireFF::FFBase::moleculeIDs ) );
        
        }
        { //::SireFF::FFBase::moleculeIDs
        
            typedef ::QSet<SireMol::MoleculeID> ( ::SireFF::FFBase::*moleculeIDs_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            FFBase_exposer.def( 
                "moleculeIDs"
                , moleculeIDs_function_type( &::SireFF::FFBase::moleculeIDs )
                , ( bp::arg("group") ) );
        
        }
        { //::SireFF::FFBase::molecules
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFBase::*molecules_function_type )( ::QSet<SireMol::MoleculeID> const & ) const;
            
            FFBase_exposer.def( 
                "molecules"
                , molecules_function_type( &::SireFF::FFBase::molecules )
                , ( bp::arg("molids") ) );
        
        }
        { //::SireFF::FFBase::molecules
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFBase::*molecules_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "molecules"
                , molecules_function_type( &::SireFF::FFBase::molecules ) );
        
        }
        { //::SireFF::FFBase::molecules
        
            typedef ::QHash<SireMol::MoleculeID,SireMol::PartialMolecule> ( ::SireFF::FFBase::*molecules_function_type )( ::SireFF::FFBase::Group const & ) const;
            
            FFBase_exposer.def( 
                "molecules"
                , molecules_function_type( &::SireFF::FFBase::molecules )
                , ( bp::arg("group") ) );
        
        }
        { //::SireFF::FFBase::name
        
            typedef ::QString const & ( ::SireFF::FFBase::*name_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "name"
                , name_function_type( &::SireFF::FFBase::name )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        FFBase_exposer.def( bp::self != bp::self );
        FFBase_exposer.def( bp::self == bp::self );
        { //::SireFF::FFBase::parameters
        
            typedef ::SireFF::FFBase::Parameters const & ( ::SireFF::FFBase::*parameters_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "parameters"
                , parameters_function_type( &::SireFF::FFBase::parameters )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::FFBase::properties
        
            typedef ::QHash<QString,SireBase::Property> ( ::SireFF::FFBase::*properties_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "properties"
                , properties_function_type( &::SireFF::FFBase::properties ) );
        
        }
        { //::SireFF::FFBase::refersTo
        
            typedef bool ( ::SireFF::FFBase::*refersTo_function_type )( ::SireMol::MoleculeID ) const;
            
            FFBase_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireFF::FFBase::refersTo )
                , ( bp::arg("molid") ) );
        
        }
        { //::SireFF::FFBase::refersTo
        
            typedef bool ( ::SireFF::FFBase::*refersTo_function_type )( ::SireMol::MoleculeID,::SireFF::FFBase::Group const & ) const;
            
            FFBase_exposer.def( 
                "refersTo"
                , refersTo_function_type( &::SireFF::FFBase::refersTo )
                , ( bp::arg("molid"), bp::arg("group") ) );
        
        }
        { //::SireFF::FFBase::remove
        
            typedef bool ( ::SireFF::FFBase::*remove_function_type )( ::SireMol::PartialMolecule const & ) ;
            
            FFBase_exposer.def( 
                "remove"
                , remove_function_type( &::SireFF::FFBase::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFBase::remove
        
            typedef bool ( ::SireFF::FFBase::*remove_function_type )( ::QList<SireMol::PartialMolecule> const & ) ;
            
            FFBase_exposer.def( 
                "remove"
                , remove_function_type( &::SireFF::FFBase::remove )
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireFF::FFBase::removeFrom
        
            typedef bool ( ::SireFF::FFBase::*removeFrom_function_type )( ::SireFF::FFBase::Group const &,::SireMol::PartialMolecule const & ) ;
            
            FFBase_exposer.def( 
                "removeFrom"
                , removeFrom_function_type( &::SireFF::FFBase::removeFrom )
                , ( bp::arg("group"), bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFBase::removeFrom
        
            typedef bool ( ::SireFF::FFBase::*removeFrom_function_type )( ::SireFF::FFBase::Group const &,::QList<SireMol::PartialMolecule> const & ) ;
            
            FFBase_exposer.def( 
                "removeFrom"
                , removeFrom_function_type( &::SireFF::FFBase::removeFrom )
                , ( bp::arg("group"), bp::arg("molecules") ) );
        
        }
        { //::SireFF::FFBase::setName
        
            typedef void ( ::SireFF::FFBase::*setName_function_type )( ::QString const & ) ;
            
            FFBase_exposer.def( 
                "setName"
                , setName_function_type( &::SireFF::FFBase::setName )
                , ( bp::arg("name") ) );
        
        }
        { //::SireFF::FFBase::setProperty
        
            typedef bool ( ::SireFF::FFBase::*setProperty_function_type )( ::QString const &,::SireBase::Property const & ) ;
            
            FFBase_exposer.def( 
                "setProperty"
                , setProperty_function_type( &::SireFF::FFBase::setProperty )
                , ( bp::arg("name"), bp::arg("value") ) );
        
        }
        { //::SireFF::FFBase::toString
        
            typedef ::QString ( ::SireFF::FFBase::*toString_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "toString"
                , toString_function_type( &::SireFF::FFBase::toString ) );
        
        }
        { //::SireFF::FFBase::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            
            FFBase_exposer.def( 
                "typeName"
                , typeName_function_type( &::SireFF::FFBase::typeName ) );
        
        }
        { //::SireFF::FFBase::version
        
            typedef ::SireBase::Version const & ( ::SireFF::FFBase::*version_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "version"
                , version_function_type( &::SireFF::FFBase::version )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireFF::FFBase::what
        
            typedef char const * ( ::SireFF::FFBase::*what_function_type )(  ) const;
            
            FFBase_exposer.def( 
                "what"
                , what_function_type( &::SireFF::FFBase::what ) );
        
        }
        FFBase_exposer.staticmethod( "typeName" );
        FFBase_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireFF::FFBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FFBase_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireFF::FFBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FFBase_exposer.def( "__str__", &SirePy::__str__< ::SireFF::FFBase > );
    }

}

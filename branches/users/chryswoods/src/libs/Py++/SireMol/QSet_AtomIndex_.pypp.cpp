// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QSet_AtomIndex_.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_QSet_AtomIndex__class(){

    { //::QSet<SireMol::AtomIndex>
        typedef bp::class_< QSet<SireMol::AtomIndex> > QSet_AtomIndex__exposer_t;
        QSet_AtomIndex__exposer_t QSet_AtomIndex__exposer = QSet_AtomIndex__exposer_t( "QSet_AtomIndex_" );
        bp::scope QSet_AtomIndex__scope( QSet_AtomIndex__exposer );
        bp::class_< QSet<SireMol::AtomIndex>::const_iterator >( "const_iterator" )    
            .def( bp::init< >() )    
            .def( bp::init< QHash<SireMol::AtomIndex, QHashDummyValue>::const_iterator >(( bp::arg("o") )) )    
            .def( bp::init< QSet<SireMol::AtomIndex>::iterator const & >(( bp::arg("o") )) )    
            .def( bp::self != bp::self )    
            .def( bp::self + bp::other< int >() )    
            .def( bp::self += bp::other< int >() )    
            .def( bp::self - bp::other< int >() )    
            .def( bp::self -= bp::other< int >() )    
            .def( bp::self == bp::self );
        bp::class_< QSet<SireMol::AtomIndex>::iterator >( "iterator" )    
            .def( bp::init< >() )    
            .def( bp::init< QHash<SireMol::AtomIndex, QHashDummyValue>::iterator >(( bp::arg("o") )) )    
            .def( bp::self != bp::self )    
            .def( bp::self != bp::other< QSet<SireMol::AtomIndex>::const_iterator >() )    
            .def( bp::self + bp::other< int >() )    
            .def( bp::self += bp::other< int >() )    
            .def( bp::self - bp::other< int >() )    
            .def( bp::self -= bp::other< int >() )    
            .def( bp::self == bp::self )    
            .def( bp::self == bp::other< QSet<SireMol::AtomIndex>::const_iterator >() );
        QSet_AtomIndex__exposer.def( bp::init< >() );
        { //::QSet<SireMol::AtomIndex>::begin
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::iterator ( exported_class_t::*begin_function_type )(  ) ;
            
            QSet_AtomIndex__exposer.def( 
                "begin"
                , begin_function_type( &::QSet<SireMol::AtomIndex>::begin ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::begin
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*begin_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "begin"
                , begin_function_type( &::QSet<SireMol::AtomIndex>::begin ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::capacity
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef int ( exported_class_t::*capacity_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "capacity"
                , capacity_function_type( &::QSet<SireMol::AtomIndex>::capacity ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::clear
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef void ( exported_class_t::*clear_function_type )(  ) ;
            
            QSet_AtomIndex__exposer.def( 
                "clear"
                , clear_function_type( &::QSet<SireMol::AtomIndex>::clear ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::constBegin
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*constBegin_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "constBegin"
                , constBegin_function_type( &::QSet<SireMol::AtomIndex>::constBegin ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::constEnd
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*constEnd_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "constEnd"
                , constEnd_function_type( &::QSet<SireMol::AtomIndex>::constEnd ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::constFind
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*constFind_function_type )( ::SireMol::AtomIndex const & ) const;
            
            QSet_AtomIndex__exposer.def( 
                "constFind"
                , constFind_function_type( &::QSet<SireMol::AtomIndex>::constFind )
                , ( bp::arg("value") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::contains
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef bool ( exported_class_t::*contains_function_type )( ::SireMol::AtomIndex const & ) const;
            
            QSet_AtomIndex__exposer.def( 
                "contains"
                , contains_function_type( &::QSet<SireMol::AtomIndex>::contains )
                , ( bp::arg("value") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::count
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef int ( exported_class_t::*count_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "count"
                , count_function_type( &::QSet<SireMol::AtomIndex>::count ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::detach
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef void ( exported_class_t::*detach_function_type )(  ) ;
            
            QSet_AtomIndex__exposer.def( 
                "detach"
                , detach_function_type( &::QSet<SireMol::AtomIndex>::detach ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::empty
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef bool ( exported_class_t::*empty_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "empty"
                , empty_function_type( &::QSet<SireMol::AtomIndex>::empty ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::end
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::iterator ( exported_class_t::*end_function_type )(  ) ;
            
            QSet_AtomIndex__exposer.def( 
                "end"
                , end_function_type( &::QSet<SireMol::AtomIndex>::end ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::end
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*end_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "end"
                , end_function_type( &::QSet<SireMol::AtomIndex>::end ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::erase
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::iterator ( exported_class_t::*erase_function_type )( ::QSet<SireMol::AtomIndex>::iterator ) ;
            
            QSet_AtomIndex__exposer.def( 
                "erase"
                , erase_function_type( &::QSet<SireMol::AtomIndex>::erase )
                , ( bp::arg("i") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::find
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::iterator ( exported_class_t::*find_function_type )( ::SireMol::AtomIndex const & ) ;
            
            QSet_AtomIndex__exposer.def( 
                "find"
                , find_function_type( &::QSet<SireMol::AtomIndex>::find )
                , ( bp::arg("value") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::find
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*find_function_type )( ::SireMol::AtomIndex const & ) const;
            
            QSet_AtomIndex__exposer.def( 
                "find"
                , find_function_type( &::QSet<SireMol::AtomIndex>::find )
                , ( bp::arg("value") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::fromList
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex> ( *fromList_function_type )( ::QList<SireMol::AtomIndex> const & );
            
            QSet_AtomIndex__exposer.def( 
                "fromList"
                , fromList_function_type( &::QSet<SireMol::AtomIndex>::fromList )
                , ( bp::arg("list") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::insert
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex>::const_iterator ( exported_class_t::*insert_function_type )( ::SireMol::AtomIndex const & ) ;
            
            QSet_AtomIndex__exposer.def( 
                "insert"
                , insert_function_type( &::QSet<SireMol::AtomIndex>::insert )
                , ( bp::arg("value") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::intersect
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex> & ( exported_class_t::*intersect_function_type )( ::QSet<SireMol::AtomIndex> const & ) ;
            
            QSet_AtomIndex__exposer.def( 
                "intersect"
                , intersect_function_type( &::QSet<SireMol::AtomIndex>::intersect )
                , ( bp::arg("other") )
                    /* undefined call policies */ );
        
        }
        { //::QSet<SireMol::AtomIndex>::isDetached
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef bool ( exported_class_t::*isDetached_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "isDetached"
                , isDetached_function_type( &::QSet<SireMol::AtomIndex>::isDetached ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::isEmpty
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef bool ( exported_class_t::*isEmpty_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "isEmpty"
                , isEmpty_function_type( &::QSet<SireMol::AtomIndex>::isEmpty ) );
        
        }
        QSet_AtomIndex__exposer.def( bp::self != bp::self );
        QSet_AtomIndex__exposer.def( bp::self & bp::self );
        QSet_AtomIndex__exposer.def( bp::self &= bp::self );
        QSet_AtomIndex__exposer.def( bp::self &= bp::other< SireMol::AtomIndex >() );
        QSet_AtomIndex__exposer.def( bp::self + bp::self );
        QSet_AtomIndex__exposer.def( bp::self += bp::self );
        QSet_AtomIndex__exposer.def( bp::self += bp::other< SireMol::AtomIndex >() );
        QSet_AtomIndex__exposer.def( bp::self - bp::self );
        QSet_AtomIndex__exposer.def( bp::self -= bp::self );
        QSet_AtomIndex__exposer.def( bp::self -= bp::other< SireMol::AtomIndex >() );
        QSet_AtomIndex__exposer.def( bp::self == bp::self );
        QSet_AtomIndex__exposer.def( bp::self | bp::self );
        QSet_AtomIndex__exposer.def( bp::self |= bp::self );
        QSet_AtomIndex__exposer.def( bp::self |= bp::other< SireMol::AtomIndex >() );
        { //::QSet<SireMol::AtomIndex>::remove
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef bool ( exported_class_t::*remove_function_type )( ::SireMol::AtomIndex const & ) ;
            
            QSet_AtomIndex__exposer.def( 
                "remove"
                , remove_function_type( &::QSet<SireMol::AtomIndex>::remove )
                , ( bp::arg("value") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::reserve
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef void ( exported_class_t::*reserve_function_type )( int ) ;
            
            QSet_AtomIndex__exposer.def( 
                "reserve"
                , reserve_function_type( &::QSet<SireMol::AtomIndex>::reserve )
                , ( bp::arg("asize") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::setSharable
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef void ( exported_class_t::*setSharable_function_type )( bool ) ;
            
            QSet_AtomIndex__exposer.def( 
                "setSharable"
                , setSharable_function_type( &::QSet<SireMol::AtomIndex>::setSharable )
                , ( bp::arg("sharable") ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::size
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef int ( exported_class_t::*size_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "size"
                , size_function_type( &::QSet<SireMol::AtomIndex>::size ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::squeeze
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef void ( exported_class_t::*squeeze_function_type )(  ) ;
            
            QSet_AtomIndex__exposer.def( 
                "squeeze"
                , squeeze_function_type( &::QSet<SireMol::AtomIndex>::squeeze ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::subtract
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex> & ( exported_class_t::*subtract_function_type )( ::QSet<SireMol::AtomIndex> const & ) ;
            
            QSet_AtomIndex__exposer.def( 
                "subtract"
                , subtract_function_type( &::QSet<SireMol::AtomIndex>::subtract )
                , ( bp::arg("other") )
                    /* undefined call policies */ );
        
        }
        { //::QSet<SireMol::AtomIndex>::toList
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QList<SireMol::AtomIndex> ( exported_class_t::*toList_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "toList"
                , toList_function_type( &::QSet<SireMol::AtomIndex>::toList ) );
        
        }
        { //::QSet<SireMol::AtomIndex>::unite
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QSet<SireMol::AtomIndex> & ( exported_class_t::*unite_function_type )( ::QSet<SireMol::AtomIndex> const & ) ;
            
            QSet_AtomIndex__exposer.def( 
                "unite"
                , unite_function_type( &::QSet<SireMol::AtomIndex>::unite )
                , ( bp::arg("other") )
                    /* undefined call policies */ );
        
        }
        { //::QSet<SireMol::AtomIndex>::values
        
            typedef QSet<SireMol::AtomIndex> exported_class_t;
            typedef ::QList<SireMol::AtomIndex> ( exported_class_t::*values_function_type )(  ) const;
            
            QSet_AtomIndex__exposer.def( 
                "values"
                , values_function_type( &::QSet<SireMol::AtomIndex>::values ) );
        
        }
        QSet_AtomIndex__exposer.staticmethod( "fromList" );
    }

}

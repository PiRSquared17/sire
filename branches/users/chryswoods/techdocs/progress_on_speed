
TIP4PFF

Cumalative changes...

Same as InterCLJFF Speed == 5171ms

Copy CLJFF functions into Tip4PFF  Speed = 5333 ms

Explicitly calculate CLJPairMatrix Speed = 5307 ms

Only get CLJ for one molecule Speed = 5027

Use double nrg return for accumalating energies  Speed = 5121 ms

Use only a single scale factor  Speed = 5207 ms

Skip mol with mol (just do cutgroup with cutgroup)  Speed = 4973

Fully skipping mol with mol  Speed = 4915

Using .constData()[i]  Speed = 4876

Inline energy calculation  Speed = 4958

Hard-coded cutoff distance  Speed = 4866

Hard-coded switching function  Speed = 4831

Switching over to Cartesian Space. Compare InterCLJFF with Tip4PFF
and recording the difference in time;

Benchmark:  2681 vs. 2405,  Tip4PFF is 276 ms faster

Moving array access for mol0 outside inner loop:
            2701 vs. 2355, Tip4PFF is 346 ms faster
            
Not calling workspace and switchingFunction() in the loop
            2830 vs. 2452, Tip4PFF is 378 ms faster

Compiling with -O2 rather than without any optimisation (woops!)
             809 vs. 643, Tip4PFF is 163 ms faster

Compiling with -O2 on my laptop (Pentium M 1.4 GHz)
            1304 vs. 1139, Tip4PFF is 165 ms faster

This compiles to Sire(480) taking 565 ms. I thus need to improve the
speed of Sire by at least two times!

Moving cutgroup beyond() test out of function into pair loop
            1304 vs. 1107, Tip4PFF is 197 ms faster

Only storing CoordGroups and only one copy of parameters...
            1348 vs. 1082, Tip4PFF is 266 ms faster

Changing CoordGroup to have inline access to coordinate pointer (by exposing CoordGroupPvt)
            1266 vs. 1042, Tip4PFF is 224 ms faster

There is still quite a lot of work still to do...



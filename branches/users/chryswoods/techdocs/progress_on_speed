
TIP4PFF

Cumalative changes...

Same as InterCLJFF Speed == 5171ms

Copy CLJFF functions into Tip4PFF  Speed = 5333 ms

Explicitly calculate CLJPairMatrix Speed = 5307 ms

Only get CLJ for one molecule Speed = 5027

Use double nrg return for accumalating energies  Speed = 5121 ms

Use only a single scale factor  Speed = 5207 ms

Skip mol with mol (just do cutgroup with cutgroup)  Speed = 4973

Fully skipping mol with mol  Speed = 4915

Using .constData()[i]  Speed = 4876

Inline energy calculation  Speed = 4958

Hard-coded cutoff distance  Speed = 4866

Hard-coded switching function  Speed = 4831

Switching over to Cartesian Space. Compare InterCLJFF with Tip4PFF
and recording the difference in time;

Benchmark:  2681 vs. 2405,  Tip4PFF is 276 ms faster

Moving array access for mol0 outside inner loop:
            2701 vs. 2355, Tip4PFF is 346 ms faster
            
Not calling workspace and switchingFunction() in the loop
            2830 vs. 2452, Tip4PFF is 378 ms faster

Compiling with -O2 rather than without any optimisation (woops!)
             809 vs. 643, Tip4PFF is 163 ms faster

Compiling with -O2 on my laptop (Pentium M 1.4 GHz)
            1304 vs. 1139, Tip4PFF is 165 ms faster

This compiles to Sire(480) taking 565 ms. I thus need to improve the
speed of Sire by at least two times!

Moving cutgroup beyond() test out of function into pair loop
            1304 vs. 1107, Tip4PFF is 197 ms faster

Only storing CoordGroups and only one copy of parameters...
            1348 vs. 1082, Tip4PFF is 266 ms faster

Changing CoordGroup to have inline access to coordinate pointer (by exposing CoordGroupPvt)
            1266 vs. 1042, Tip4PFF is 224 ms faster

There is still quite a lot of work still to do...

Working back on my work computer again...

Optimising placement of conditions...
            838 vs. 594, Tip4PFF is 244 ms faster

Optimising placement of feather factor
            752 vs. 718, Tip4PFF is 34 ms faster

Using SharedPolyPointer
            746 vs. 709, Tip4PFF is 37 ms faster

Making energy function into a static member function of Tip4PFF
            749 vs. 653, Tip4PFF is 96 ms faster

Dropping the switching function from Tip4PFF (as it is now all explicit)
            772 vs. 562, Tip4PFF is 210 ms faster

Cleaning up referencing of CLJPairMatrix
            782 vs. 564, Tip4PFF is 218 ms faster

Giving a pointer to Coordinate array in CoordGroupBase
            725 vs. 626, Tip4PFF is 99 ms faster

Giving an AABox directly to the CoordGroupBase
            727 vs. 625, Tip4PFF is 102 ms faster

Performing AABox test directly
            772 vs. 582, Tip4PFF is 190 ms faster

Copying AABoxes into their own Vector (so contiguous in memory)
            718 vs. 513, Tip4PFF is 205 ms faster

Performing all distance calculations explicitly
            732 vs. 504, Tip4PFF is 228 ms faster

Performing calculation using local copy of coordinates in a QVector
            732 vs. 510, Tip4PFF is 222 ms faster

No redimension of distmat and cljmat
            734 vs. 485, Tip4PFF is 249 ms faster

Redimension pairmatrix all of the time
            776 vs. 541, Tip4PFF is 235 ms faster

Calculate distances explicitly
            782 vs. 502, Tip4PFF is 280 ms faster

Getting rid of extraneous energy
            782 vs. 503, Tip4PFF is 279 ms faster

Calculating CLJ parameters in main pair loop
            710 vs. 431, Tip4PFF is 279 ms faster

Removed now unnecessary workspace
            783 vs. 540, Tip4PFF is 243 ms faster

Passing direct pointers to the coordinates and clj parameters
            713 vs. 516, Tip4PFF is 197 ms faster

Reverted CoordGroup back to its original state
            734 vs. 434, Tip4PFF is 300 ms faster

Added single-cutgroup block to CLJFF
            783 vs. 515, Tip4PFF is 268 ms faster

Reverted PairMatrix
            715 vs. 517, Tip4PFF is 198 ms faster

Skipping multi-cutgroup for single cutgroup
            672 vs. 433, Tip4PFF is 239 ms faster

Moving sphere cut test further up the call chain in InterCLJFF
            682 vs. 433, Tip4PFF is 249 ms faster

Reverted CLJFF and InterCLJFF
            737 vs. 434, Tip4PFF is 303 ms faster

Adding a single cutgroup block to CLJFF thus appears to be sensible
            697 vs. 432, Tip4PFF is 265 ms faster
            (so adding single CutGroup block has knocked ~40ms off the time)

Switching both CombiningRules and SwitchingFunction over to use SharedPolyPointer
            684 vs. 434, Tip4PFF is 250 ms faster


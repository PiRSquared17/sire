
class AtomID
   virtual CGAtomIdx index(const MoleculeInfo &molinfo) const=0;
   
   template<class T>
   bool isA() const;
   
   template<class T>
   const T& asA() const;

class AtomIndex : public AtomID
class CGAtomIdx : public AtomID
 
class AtomIdx : public AtomID  - no auto conversion from int

class AtomIdxAllowImpl : public AtomIdx  - allow auto conversion from int

class AtomIndentifier - holds AtomID boost::shared_ptr

now all classes that need to ID atoms can use;

.move(const AtomID &atomid0, const AtomID &atomid1)

and classes that return a generic atom ID can return AtomIdentifier

This removes the need to have IDMolAtom

Can also do the same thing for CutGroup, Residue, Segment, Molecule and MoleculeGroup,

e.g. MolGroupIdentifier, MolGroupID, MolGroupIdx, MolGroupNum, MolGroupName
     MoleculeIdentifier, MoleculeID, MoleculeIdx, MoleculeNum, MoleculeName
     SegmentIdentifier,  SegmentID,  SegmentIdx,  SegmentNum,  SegmentName
     CutGroupIdentifier, CutGroupID, CutGroupIdx, CutGroupNum, CutGroupName
     ResidueIdentifier,  ResidueID,  ResidueIdx,  ResidueNum,  ResidueName
     
     Identifier = shared_ptr holder class
     ID = generic ID base class
     Idx = index class - index into a list or array
     Num = user- or program-supplied number (takes over from MoleculeID and MoleculeGroupID,
                                             not use MoleculeNum and MoleculeGroupNum) 

If an ID is not unique, then the first matching object is returned, (e.g. first residue
that matches ResidueName).

Derived ID types also exist...

MolAtomIdentifier, tuple holding a MoleculeIdentifier with an AtomIdentifier
       - this identifies an Atom in an identified Molecule
       

Can also short circuit,

CGAtomID takes CutGroupID and AtomID in constructor, but can also create class that
is a specific overload

Only guaranteed unique ID is the Idx, e.g. AtomIdx is always unique as it is the
index of the atom in whatever container it is in.

Mapping the IDs from one molecule to another is performed by functions - normally
python supplied functions. Function takes two AtomSelections and returns a hash
mapping the CGAtomIdxs from one molecule to the other.

class MappingFunction;
   virtual Hash<CGAtomIdx,CGAtomIdx> operator()(AtomSelection a, AtomSelection b) const=0;

Allow python to overload this, so that the python implementation of this class can
accept a python function as an argument, and it will then pass the two atom selections
to that function (which will do type checking) and will then type check the return value.
This will also (somehow) save the python code in the MappingFunction object, thereby 
allowing it to be saved and restored.


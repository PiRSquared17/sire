// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "Triangle.pypp.hpp"
#include "boost/python.hpp"
#include "siremaths_headers.h"

namespace bp = boost::python;

SireMaths::Triangle __copy__(const SireMaths::Triangle &other){ return SireMaths::Triangle(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_Triangle_class(){

    bp::class_< SireMaths::Triangle >( "Triangle" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMaths::Vector const &, SireMaths::Vector const &, SireMaths::Vector const & >(( bp::arg("point0"), bp::arg("point1"), bp::arg("point2") )) )    
        .def( 
            "angle"
            , (::SireMaths::Angle ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::angle ) )    
        .def( 
            "angle0"
            , (::SireMaths::Angle ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::angle0 ) )    
        .def( 
            "angle1"
            , (::SireMaths::Angle ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::angle1 ) )    
        .def( 
            "angle2"
            , (::SireMaths::Angle ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::angle2 ) )    
        .def( 
            "at"
            , (::SireMaths::Vector const & ( ::SireMaths::Triangle::* )( int ) const)( &::SireMaths::Triangle::at )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "count"
            , (int ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::count ) )    
        .def( 
            "line0"
            , (::SireMaths::Line ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::line0 ) )    
        .def( 
            "line1"
            , (::SireMaths::Line ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::line1 ) )    
        .def( 
            "line2"
            , (::SireMaths::Line ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::line2 ) )    
        .def( 
            "__getitem__"
            , (::SireMaths::Vector const & ( ::SireMaths::Triangle::* )( int ) const)( &::SireMaths::Triangle::operator[] )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "point"
            , (::SireMaths::Vector const & ( ::SireMaths::Triangle::* )( int ) const)( &::SireMaths::Triangle::point )
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "toString"
            , (::QString ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::toString ) )    
        .def( 
            "vector"
            , (::SireMaths::Vector ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::vector ) )    
        .def( 
            "vector0"
            , (::SireMaths::Vector ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::vector0 ) )    
        .def( 
            "vector1"
            , (::SireMaths::Vector ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::vector1 ) )    
        .def( 
            "vector2"
            , (::SireMaths::Vector ( ::SireMaths::Triangle::* )(  ) const)( &::SireMaths::Triangle::vector2 ) )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMaths::Triangle >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMaths::Triangle >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMaths::Triangle > );

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "MolproProcessor.pypp.hpp"
#include "boost/python.hpp"
#include "squire_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"

namespace bp = boost::python;

const char* pvt_get_name(const Squire::MolproProcessor&){ return "Squire::MolproProcessor";}

void register_MolproProcessor_class(){

    bp::class_< Squire::MolproProcessor, bp::bases< SireFF::FFThreadProcessor > >( "MolproProcessor" )    
        .def( bp::init< >() )    
        .def( bp::init< SireFF::ForceField const &, bp::optional< QString const &, QDir const & > >(( bp::arg("forcefield"), bp::arg("molpro_exe")="molpro", bp::arg("temp_dir")=QDir::temp( ) )) )    
        .def( 
            "setMolpro"
            , (void ( ::Squire::MolproProcessor::* )( ::QString const & ) )( &::Squire::MolproProcessor::setMolpro )
            , ( bp::arg("molpro_exe") ) )    
        .def( 
            "setTempDir"
            , (void ( ::Squire::MolproProcessor::* )( ::QDir const & ) )( &::Squire::MolproProcessor::setTempDir )
            , ( bp::arg("tmpdir") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::Squire::MolproProcessor::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::Squire::MolproProcessor::* )(  ) const)( &::Squire::MolproProcessor::what ) )    
        .staticmethod( "typeName" )    
        .def( "__str__", &pvt_get_name);

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "FFWorkerBase.pypp.hpp"
#include "boost/python.hpp"
#include "sireff_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"
#include "SireMol/cgatomid.h"
#include "SireMol/cutgroupnum.h"
#include "SireMol/resnumatomid.h"
#include "SireMol/resid.h"
#include "SireMol/moleculeid.h"

namespace bp = boost::python;

void register_FFWorkerBase_class(){

    { //::SireFF::FFWorkerBase
        typedef bp::class_< SireFF::FFWorkerBase, boost::noncopyable > FFWorkerBase_exposer_t;
        FFWorkerBase_exposer_t FFWorkerBase_exposer = FFWorkerBase_exposer_t( "FFWorkerBase", bp::no_init );
        bp::scope FFWorkerBase_scope( FFWorkerBase_exposer );
        { //::SireFF::FFWorkerBase::add
        
            typedef void ( ::SireFF::FFWorkerBase::*add_function_type )( ::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "add"
                , add_function_type( &::SireFF::FFWorkerBase::add )
                , ( bp::arg("molecule"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::add
        
            typedef void ( ::SireFF::FFWorkerBase::*add_function_type )( ::SireMol::Residue const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "add"
                , add_function_type( &::SireFF::FFWorkerBase::add )
                , ( bp::arg("residue"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::assertContains
        
            typedef void ( ::SireFF::FFWorkerBase::*assertContains_function_type )( ::SireFF::FFComponent const & ) const;
            
            FFWorkerBase_exposer.def( 
                "assertContains"
                , assertContains_function_type( &::SireFF::FFWorkerBase::assertContains )
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::FFWorkerBase::change
        
            typedef void ( ::SireFF::FFWorkerBase::*change_function_type )( ::SireMol::Molecule const & ) ;
            
            FFWorkerBase_exposer.def( 
                "change"
                , change_function_type( &::SireFF::FFWorkerBase::change )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFWorkerBase::change
        
            typedef void ( ::SireFF::FFWorkerBase::*change_function_type )( ::SireMol::Residue const & ) ;
            
            FFWorkerBase_exposer.def( 
                "change"
                , change_function_type( &::SireFF::FFWorkerBase::change )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireFF::FFWorkerBase::energies
        
            typedef ::SireCAS::Values ( ::SireFF::FFWorkerBase::*energies_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "energies"
                , energies_function_type( &::SireFF::FFWorkerBase::energies ) );
        
        }
        { //::SireFF::FFWorkerBase::energy
        
            typedef double ( ::SireFF::FFWorkerBase::*energy_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "energy"
                , energy_function_type( &::SireFF::FFWorkerBase::energy ) );
        
        }
        { //::SireFF::FFWorkerBase::energy
        
            typedef double ( ::SireFF::FFWorkerBase::*energy_function_type )( ::SireFF::FFComponent const & ) ;
            
            FFWorkerBase_exposer.def( 
                "energy"
                , energy_function_type( &::SireFF::FFWorkerBase::energy )
                , ( bp::arg("component") ) );
        
        }
        { //::SireFF::FFWorkerBase::forcefield
        
            typedef ::SireFF::ForceField ( ::SireFF::FFWorkerBase::*forcefield_function_type )(  ) const;
            
            FFWorkerBase_exposer.def( 
                "forcefield"
                , forcefield_function_type( &::SireFF::FFWorkerBase::forcefield ) );
        
        }
        { //::SireFF::FFWorkerBase::recalculateEnergy
        
            typedef void ( ::SireFF::FFWorkerBase::*recalculateEnergy_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "recalculateEnergy"
                , recalculateEnergy_function_type( &::SireFF::FFWorkerBase::recalculateEnergy ) );
        
        }
        { //::SireFF::FFWorkerBase::remove
        
            typedef void ( ::SireFF::FFWorkerBase::*remove_function_type )( ::SireMol::Molecule const & ) ;
            
            FFWorkerBase_exposer.def( 
                "remove"
                , remove_function_type( &::SireFF::FFWorkerBase::remove )
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireFF::FFWorkerBase::remove
        
            typedef void ( ::SireFF::FFWorkerBase::*remove_function_type )( ::SireMol::Residue const & ) ;
            
            FFWorkerBase_exposer.def( 
                "remove"
                , remove_function_type( &::SireFF::FFWorkerBase::remove )
                , ( bp::arg("residue") ) );
        
        }
        { //::SireFF::FFWorkerBase::replace
        
            typedef void ( ::SireFF::FFWorkerBase::*replace_function_type )( ::SireMol::Molecule const &,::SireMol::Molecule const &,::SireFF::ParameterMap const & ) ;
            
            FFWorkerBase_exposer.def( 
                "replace"
                , replace_function_type( &::SireFF::FFWorkerBase::replace )
                , ( bp::arg("oldmol"), bp::arg("newmol"), bp::arg("map")=::SireFF::ParameterMap( ) ) );
        
        }
        { //::SireFF::FFWorkerBase::setForceField
        
            typedef void ( ::SireFF::FFWorkerBase::*setForceField_function_type )( ::SireFF::ForceField const & ) ;
            
            FFWorkerBase_exposer.def( 
                "setForceField"
                , setForceField_function_type( &::SireFF::FFWorkerBase::setForceField )
                , ( bp::arg("forcefield") ) );
        
        }
        { //::SireFF::FFWorkerBase::waitUntilReady
        
            typedef void ( ::SireFF::FFWorkerBase::*waitUntilReady_function_type )(  ) ;
            
            FFWorkerBase_exposer.def( 
                "waitUntilReady"
                , waitUntilReady_function_type( &::SireFF::FFWorkerBase::waitUntilReady ) );
        
        }
        bp::register_ptr_to_python< boost::shared_ptr< SireFF::FFWorkerBase > >();
    }

}

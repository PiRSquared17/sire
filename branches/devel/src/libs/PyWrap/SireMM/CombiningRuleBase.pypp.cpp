// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CombiningRuleBase.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::CombiningRuleBase&){ return "SireMM::CombiningRuleBase";}

void register_CombiningRuleBase_class(){

    bp::class_< SireMM::CombiningRuleBase, bp::bases< SireBase::PropertyBase >, boost::noncopyable >( "CombiningRuleBase", bp::no_init )    
        .def( 
            "combine"
            , (void ( ::SireMM::CombiningRuleBase::* )( ::QVector<SireMM::CLJParameter> const &,::QVector<SireMM::CLJParameter> const &,::SireMM::CLJPairMatrix & ) const)( &::SireMM::CombiningRuleBase::combine )
            , ( bp::arg("clj0"), bp::arg("clj1"), bp::arg("cljmatrix") ) )    
        .def( 
            "combine"
            , (void ( ::SireMM::CombiningRuleBase::* )( ::QVector<SireMM::CLJParameter> const &,::SireMM::CLJPairMatrix & ) const)( &::SireMM::CombiningRuleBase::combine )
            , ( bp::arg("cljs"), bp::arg("cljmatrix") ) )    
        .def( 
            "combine"
            , (void ( ::SireMM::CombiningRuleBase::* )( ::QVector<SireMM::ChargeParameter> const &,::QVector<SireMM::LJParameter> const &,::QVector<SireMM::ChargeParameter> const &,::QVector<SireMM::LJParameter> const &,::SireMM::CLJPairMatrix & ) const)( &::SireMM::CombiningRuleBase::combine )
            , ( bp::arg("chg0"), bp::arg("lj0"), bp::arg("chg1"), bp::arg("lj1"), bp::arg("cljmatrix") ) )    
        .def( 
            "combine"
            , (void ( ::SireMM::CombiningRuleBase::* )( ::QVector<SireMM::ChargeParameter> const &,::QVector<SireMM::LJParameter> const &,::SireMM::CLJPairMatrix & ) const)( &::SireMM::CombiningRuleBase::combine )
            , ( bp::arg("chgs"), bp::arg("ljs"), bp::arg("cljmatrix") ) )    
        .def( 
            "combine"
            , (void ( ::SireMM::CombiningRuleBase::* )( ::QVector<SireMM::LJParameter> const &,::QVector<SireMM::LJParameter> const &,::SireMM::LJPairMatrix & ) const)( &::SireMM::CombiningRuleBase::combine )
            , ( bp::arg("lj0"), bp::arg("lj1"), bp::arg("ljmatrix") ) )    
        .def( 
            "combine"
            , (void ( ::SireMM::CombiningRuleBase::* )( ::QVector<SireMM::LJParameter> const &,::SireMM::LJPairMatrix & ) const)( &::SireMM::CombiningRuleBase::combine )
            , ( bp::arg("ljs"), bp::arg("ljmatrix") ) )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::CombiningRuleBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::CombiningRuleBase >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

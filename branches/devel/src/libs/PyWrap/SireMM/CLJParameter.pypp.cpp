// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "CLJParameter.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::CLJParameter __copy__(const SireMM::CLJParameter &other){ return SireMM::CLJParameter(other); }

#include "SireQt/qdatastream.hpp"

#include "SirePy/str.hpp"

void register_CLJParameter_class(){

    bp::class_< SireMM::CLJParameter, bp::bases< SireMM::ChargeParameter, SireMM::LJParameter > >( "CLJParameter" )    
        .def( bp::init< >() )    
        .def( bp::init< SireMM::ChargeParameter const &, SireMM::LJParameter const & >(( bp::arg("charge"), bp::arg("lj") )) )    
        .def( bp::init< SireMM::ChargeParameter const &, double, double >(( bp::arg("charge"), bp::arg("sigma"), bp::arg("epsilon") )) )    
        .def( 
            "dummy"
            , (::SireMM::CLJParameter (*)(  ))( &::SireMM::CLJParameter::dummy ) )    
        .def( 
            "isDummy"
            , (bool ( ::SireMM::CLJParameter::* )(  ) const)( &::SireMM::CLJParameter::isDummy ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "toString"
            , (::QString ( ::SireMM::CLJParameter::* )(  ) const)( &::SireMM::CLJParameter::toString ) )    
        .staticmethod( "dummy" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::CLJParameter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::CLJParameter >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &SirePy::__str__< ::SireMM::CLJParameter > );

}

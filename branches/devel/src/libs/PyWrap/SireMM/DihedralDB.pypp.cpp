// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "DihedralDB.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::DihedralDB __copy__(const SireMM::DihedralDB &other){ return SireMM::DihedralDB(other); }

#include "SirePy/str.hpp"

void register_DihedralDB_class(){

    bp::class_< SireMM::DihedralDB, bp::bases< SireDB::Term14DB, SireMM::InternalDB<SireMM::MolDihedralInfo> > >( "DihedralDB" )    
        .def( bp::init< >() )    
        .def( 
            "addDihedral"
            , (void ( ::SireMM::DihedralDB::* )( ::QString const &,::SireCAS::Expression const & ) )( &::SireMM::DihedralDB::addDihedral )
            , ( bp::arg("userid"), bp::arg("dihfunc") ) )    
        .def( 
            "addDihedral"
            , (void ( ::SireMM::DihedralDB::* )( ::SireCAS::Function const &,::SireCAS::Expression const & ) )( &::SireMM::DihedralDB::addDihedral )
            , ( bp::arg("function"), bp::arg("expression") ) )    
        .def( 
            "assignParameter"
            , (bool ( ::SireMM::DihedralDB::* )( ::SireMol::Dihedral const &,::SireDB::RelateIDMap const &,::SireDB::ParameterTable & ) )( &::SireMM::DihedralDB::assignParameter )
            , ( bp::arg("dihedral"), bp::arg("relateids"), bp::arg("param_table") ) )    
        .def( 
            "createTable"
            , (void ( ::SireMM::DihedralDB::* )( ::SireDB::ParameterTable &,::SireMM::MolDihedralInfo const & ) const)( &::SireMM::DihedralDB::createTable )
            , ( bp::arg("param_table"), bp::arg("dihinfo") ) )    
        .def( 
            "getDihedral"
            , (::SireCAS::Expression ( ::SireMM::DihedralDB::* )( ::QString const &,bool * ) )( &::SireMM::DihedralDB::getDihedral )
            , ( bp::arg("userid"), bp::arg("founddih")=bp::object() ) )    
        .def( 
            "getDihedral"
            , (::SireCAS::Expression ( ::SireMM::DihedralDB::* )( ::SireCAS::Function const &,bool * ) )( &::SireMM::DihedralDB::getDihedral )
            , ( bp::arg("function"), bp::arg("founddih")=bp::object() ) )    
        .def( 
            "getDihedral"
            , (::SireCAS::Expression ( ::SireMM::DihedralDB::* )( ::SireDB::RelateID,bool * ) )( &::SireMM::DihedralDB::getDihedral )
            , ( bp::arg("relateid"), bp::arg("founddih")=bp::object() ) )    
        .def( 
            "getDihedral"
            , (::SireCAS::Expression ( ::SireMM::DihedralDB::* )( ::SireDB::RelateIDMap const &,bool * ) )( &::SireMM::DihedralDB::getDihedral )
            , ( bp::arg("relateids"), bp::arg("founddih")=bp::object() ) )    
        .def( 
            "phi"
            , (::SireCAS::Symbol const & ( ::SireMM::DihedralDB::* )(  ) const)( &::SireMM::DihedralDB::phi )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "r"
            , (::SireCAS::Symbol const & ( ::SireMM::DihedralDB::* )(  ) const)( &::SireMM::DihedralDB::r )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "relateDihedral"
            , (void ( ::SireMM::DihedralDB::* )( ::SireDB::AssertMatch<4> const &,::QString const & ) )( &::SireMM::DihedralDB::relateDihedral )
            , ( bp::arg("matchdih"), bp::arg("userid") ) )    
        .def( 
            "relateDihedral"
            , (void ( ::SireMM::DihedralDB::* )( ::SireDB::AssertMatch<4> const &,::SireCAS::Expression const & ) )( &::SireMM::DihedralDB::relateDihedral )
            , ( bp::arg("matchdih"), bp::arg("dihfunc") ) )    
        .def( 
            "relateDihedral"
            , (void ( ::SireMM::DihedralDB::* )( ::SireDB::RelateID,::QString const & ) )( &::SireMM::DihedralDB::relateDihedral )
            , ( bp::arg("relateid"), bp::arg("userid") ) )    
        .def( 
            "relateDihedral"
            , (void ( ::SireMM::DihedralDB::* )( ::SireDB::RelateID,::SireCAS::Expression const & ) )( &::SireMM::DihedralDB::relateDihedral )
            , ( bp::arg("relateid"), bp::arg("dihfunc") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::DihedralDB::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::DihedralDB::* )(  ) const)( &::SireMM::DihedralDB::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &SirePy::__str__< ::SireMM::DihedralDB > );

}

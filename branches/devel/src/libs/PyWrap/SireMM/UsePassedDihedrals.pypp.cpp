// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "UsePassedDihedrals.pypp.hpp"
#include "boost/python.hpp"
#include "siremm_headers.h"
#include "SireMol/molecule.h"
#include "SireMol/residue.h"
#include "SireMol/newatom.h"
#include "SireMol/atom.h"

namespace bp = boost::python;

SireMM::UsePassedDihedrals __copy__(const SireMM::UsePassedDihedrals &other){ return SireMM::UsePassedDihedrals(other); }

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const SireMM::UsePassedDihedrals&){ return "SireMM::UsePassedDihedrals";}

void register_UsePassedDihedrals_class(){

    bp::class_< SireMM::UsePassedDihedrals, bp::bases< SireMM::UsePassedInternals<SireMM::MolDihedralInfo> > >( "UsePassedDihedrals" )    
        .def( bp::init< >() )    
        .def( bp::init< QSet<SireMol::Dihedral> const & >(( bp::arg("dihedrals") )) )    
        .def( 
            "generate"
            , (void ( ::SireMM::UsePassedDihedrals::* )( ::SireMol::Molecule const &,::SireMM::MolDihedralInfo & ) const)( &::SireMM::UsePassedDihedrals::generate )
            , ( bp::arg("mol"), bp::arg("dihedralinfo") ) )    
        .def( 
            "typeName"
            , (char const * (*)(  ))( &::SireMM::UsePassedDihedrals::typeName ) )    
        .def( 
            "what"
            , (char const * ( ::SireMM::UsePassedDihedrals::* )(  ) const)( &::SireMM::UsePassedDihedrals::what ) )    
        .staticmethod( "typeName" )    
        .def( "__copy__", &__copy__)    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::SireMM::UsePassedDihedrals >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::SireMM::UsePassedDihedrals >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

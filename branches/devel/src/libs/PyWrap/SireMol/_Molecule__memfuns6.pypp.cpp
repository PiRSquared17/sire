// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "_Molecule__memfuns6.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMol/moleculedata.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"
#include "SireVol/space.h"

namespace bp = boost::python;

void register_Molecule_memfuns6( Molecule_exposer_t& Molecule_exposer ){

    { //::SireMol::Molecule::residueNumbers
    
        typedef ::QVector<SireMol::ResNum> ( ::SireMol::Molecule::*residueNumbers_function_type )( ::QString const & ) const;
        
        Molecule_exposer.def( 
            "residueNumbers"
            , residueNumbers_function_type( &::SireMol::Molecule::residueNumbers )
            , ( bp::arg("resnam") ) );
    
    }

    { //::SireMol::Molecule::residueNumbers
    
        typedef ::QVector<SireMol::ResNum> ( ::SireMol::Molecule::*residueNumbers_function_type )( ::SireMol::CutGroupID ) const;
        
        Molecule_exposer.def( 
            "residueNumbers"
            , residueNumbers_function_type( &::SireMol::Molecule::residueNumbers )
            , ( bp::arg("cgid") ) );
    
    }

    { //::SireMol::Molecule::residues
    
        typedef ::QHash<SireMol::ResNum,SireMol::Residue> ( ::SireMol::Molecule::*residues_function_type )(  ) const;
        
        Molecule_exposer.def( 
            "residues"
            , residues_function_type( &::SireMol::Molecule::residues ) );
    
    }

    { //::SireMol::Molecule::residues
    
        typedef ::QHash<SireMol::ResNum,SireMol::Residue> ( ::SireMol::Molecule::*residues_function_type )( ::QSet<SireMol::ResNum> const & ) const;
        
        Molecule_exposer.def( 
            "residues"
            , residues_function_type( &::SireMol::Molecule::residues )
            , ( bp::arg("resnums") ) );
    
    }

    { //::SireMol::Molecule::residuesBondedTo
    
        typedef ::QHash<SireMol::ResNum,SireMol::Residue> ( ::SireMol::Molecule::*residuesBondedTo_function_type )( ::SireMol::ResNum ) const;
        
        Molecule_exposer.def( 
            "residuesBondedTo"
            , residuesBondedTo_function_type( &::SireMol::Molecule::residuesBondedTo )
            , ( bp::arg("resnum") ) );
    
    }

    { //::SireMol::Molecule::residuesBondedTo
    
        typedef ::QHash<SireMol::ResNum,SireMol::Residue> ( ::SireMol::Molecule::*residuesBondedTo_function_type )( ::SireMol::ResID ) const;
        
        Molecule_exposer.def( 
            "residuesBondedTo"
            , residuesBondedTo_function_type( &::SireMol::Molecule::residuesBondedTo )
            , ( bp::arg("resid") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::AtomIDGroup const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("group"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::AtomIndex const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("atom"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::QSet<SireMol::AtomIndex> const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("atoms"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::ResNum,::QStringList const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("resnum"), bp::arg("atoms"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::ResNum,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("resnum"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::QSet<SireMol::ResNum> const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("resnums"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::ResID,::QStringList const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("resid"), bp::arg("atoms"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::ResID,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("resid"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::QSet<SireMol::ResID> const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("resids"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::CutGroupID,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("cgid"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::QSet<SireMol::CutGroupID> const &,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("cgids"), bp::arg("quat"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("matrix"), bp::arg("point") ) );
    
    }

    { //::SireMol::Molecule::rotate
    
        typedef void ( ::SireMol::Molecule::*rotate_function_type )( ::SireMol::AtomIDGroup const &,::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
        
        Molecule_exposer.def( 
            "rotate"
            , rotate_function_type( &::SireMol::Molecule::rotate )
            , ( bp::arg("group"), bp::arg("matrix"), bp::arg("point") ) );
    
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "AtomInfoGroup.pypp.hpp"
#include "boost/python.hpp"
#include "siremol_headers.h"
#include "SireMaths/angle.h"
#include "SireMaths/quaternion.h"
#include "SireMaths/matrix.h"
#include "SireMaths/triangle.h"
#include "SireMaths/line.h"
#include "SireMaths/torsion.h"

namespace bp = boost::python;

void register_AtomInfoGroup_class(){

    bp::class_< SireMol::AtomInfoGroup >( "AtomInfoGroup" )    
        .def( bp::init< >() )    
        .def( bp::init< int >(( bp::arg("size") )) )    
        .def( bp::init< int, SireMol::AtomInfo const & >(( bp::arg("size"), bp::arg("value") )) )    
        .def( bp::init< QVector<SireMol::AtomInfo> const & >(( bp::arg("atoms") )) )    
        .def( bp::init< QVector<SireMol::Atom> const & >(( bp::arg("atoms") )) )    
        .def( 
            "assertAtomExists"
            , &::SireMol::AtomInfoGroup::assertAtomExists
            , ( bp::arg("atomid") ) )    
        .def( 
            "at"
            , &::SireMol::AtomInfoGroup::at
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "atom"
            , &::SireMol::AtomInfoGroup::atom
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "atoms"
            , (::QVector<SireMol::AtomInfo> ( ::SireMol::AtomInfoGroup::* )(  ) const)( &::SireMol::AtomInfoGroup::atoms ) )    
        .def( 
            "atoms"
            , (::QHash<SireMol::AtomID,SireMol::AtomInfo> ( ::SireMol::AtomInfoGroup::* )( ::QSet<SireMol::AtomID> const & ) const)( &::SireMol::AtomInfoGroup::atoms )
            , ( bp::arg("idxs") ) )    
        .def( 
            "contains"
            , &::SireMol::AtomInfoGroup::contains
            , ( bp::arg("atomid") ) )    
        .def( 
            "indexOf"
            , &::SireMol::AtomInfoGroup::indexOf
            , ( bp::arg("atom") ) )    
        .def( 
            "isEmpty"
            , &::SireMol::AtomInfoGroup::isEmpty )    
        .def( 
            "nAtoms"
            , (int ( ::SireMol::AtomInfoGroup::* )(  ) const)( &::SireMol::AtomInfoGroup::nAtoms ) )    
        .def( 
            "nAtoms"
            , (int ( ::SireMol::AtomInfoGroup::* )( ::SireMol::ResNum ) const)( &::SireMol::AtomInfoGroup::nAtoms )
            , ( bp::arg("resnum") ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "__getitem__"
            , &::SireMol::AtomInfoGroup::operator[]
            , ( bp::arg("i") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "residueNumbers"
            , &::SireMol::AtomInfoGroup::residueNumbers )    
        .def( 
            "toString"
            , &::SireMol::AtomInfoGroup::toString );

}

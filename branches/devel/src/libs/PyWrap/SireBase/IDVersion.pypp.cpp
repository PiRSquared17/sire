// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "IDVersion.pypp.hpp"
#include "boost/python.hpp"
#include "sirebase_headers.h"

namespace bp = boost::python;

SireBase::IDVersion __copy__(const SireBase::IDVersion &other){ return SireBase::IDVersion(other); }

#include "SirePy/str.hpp"

void register_IDVersion_class(){

    bp::class_< SireBase::IDVersion >( "IDVersion" )    
        .def( bp::init< >() )    
        .def( bp::init< SireBase::Incremint * >(( bp::arg("majint") )) )    
        .def( 
            "ID"
            , (::quint32 ( ::SireBase::IDVersion::* )(  ) const)( &::SireBase::IDVersion::ID ) )    
        .def( 
            "assertSameID"
            , (void ( ::SireBase::IDVersion::* )( ::SireBase::IDVersion const & ) const)( &::SireBase::IDVersion::assertSameID )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameIDAndVersion"
            , (void ( ::SireBase::IDVersion::* )( ::SireBase::IDVersion const & ) const)( &::SireBase::IDVersion::assertSameIDAndVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "assertSameVersion"
            , (void ( ::SireBase::IDVersion::* )( ::SireBase::IDVersion const & ) const)( &::SireBase::IDVersion::assertSameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "incrementID"
            , (void ( ::SireBase::IDVersion::* )(  ) )( &::SireBase::IDVersion::incrementID ) )    
        .def( 
            "incrementVersion"
            , (void ( ::SireBase::IDVersion::* )(  ) )( &::SireBase::IDVersion::incrementVersion ) )    
        .def( bp::self != bp::self )    
        .def( bp::self == bp::self )    
        .def( 
            "sameID"
            , (bool ( ::SireBase::IDVersion::* )( ::SireBase::IDVersion const & ) const)( &::SireBase::IDVersion::sameID )
            , ( bp::arg("other") ) )    
        .def( 
            "sameIDAndVersion"
            , (bool ( ::SireBase::IDVersion::* )( ::SireBase::IDVersion const & ) const)( &::SireBase::IDVersion::sameIDAndVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "sameVersion"
            , (bool ( ::SireBase::IDVersion::* )( ::SireBase::IDVersion const & ) const)( &::SireBase::IDVersion::sameVersion )
            , ( bp::arg("other") ) )    
        .def( 
            "toString"
            , (::QString ( ::SireBase::IDVersion::* )(  ) const)( &::SireBase::IDVersion::toString ) )    
        .def( 
            "version"
            , (::quint32 ( ::SireBase::IDVersion::* )(  ) const)( &::SireBase::IDVersion::version ) )    
        .def( "__copy__", &__copy__)    
        .def( "__str__", &SirePy::__str__< ::SireBase::IDVersion > );

}

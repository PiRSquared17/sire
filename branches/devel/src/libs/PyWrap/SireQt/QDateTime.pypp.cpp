// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QDateTime.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const QDateTime&){ return "QDateTime";}

void register_QDateTime_class(){

    bp::class_< QDateTime >( "QDateTime" )    
        .def( bp::init< >() )    
        .def( bp::init< QDate const & >(( bp::arg("arg0") )) )    
        .def( bp::init< QDate const &, QTime const &, bp::optional< Qt::TimeSpec > >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("spec")=::Qt::LocalTime )) )    
        .def( 
            "addDays"
            , (::QDateTime ( ::QDateTime::* )( int ) const)( &::QDateTime::addDays )
            , ( bp::arg("days") ) )    
        .def( 
            "addMSecs"
            , (::QDateTime ( ::QDateTime::* )( ::qint64 ) const)( &::QDateTime::addMSecs )
            , ( bp::arg("msecs") ) )    
        .def( 
            "addMonths"
            , (::QDateTime ( ::QDateTime::* )( int ) const)( &::QDateTime::addMonths )
            , ( bp::arg("months") ) )    
        .def( 
            "addSecs"
            , (::QDateTime ( ::QDateTime::* )( int ) const)( &::QDateTime::addSecs )
            , ( bp::arg("secs") ) )    
        .def( 
            "addYears"
            , (::QDateTime ( ::QDateTime::* )( int ) const)( &::QDateTime::addYears )
            , ( bp::arg("years") ) )    
        .def( 
            "currentDateTime"
            , (::QDateTime (*)(  ))( &::QDateTime::currentDateTime ) )    
        .def( 
            "date"
            , (::QDate ( ::QDateTime::* )(  ) const)( &::QDateTime::date ) )    
        .def( 
            "daysTo"
            , (int ( ::QDateTime::* )( ::QDateTime const & ) const)( &::QDateTime::daysTo )
            , ( bp::arg("arg0") ) )    
        .def( 
            "fromString"
            , (::QDateTime (*)( ::QString const &,::Qt::DateFormat ))( &::QDateTime::fromString )
            , ( bp::arg("s"), bp::arg("f")=::Qt::TextDate ) )    
        .def( 
            "fromString"
            , (::QDateTime (*)( ::QString const &,::QString const & ))( &::QDateTime::fromString )
            , ( bp::arg("s"), bp::arg("format") ) )    
        .def( 
            "isNull"
            , (bool ( ::QDateTime::* )(  ) const)( &::QDateTime::isNull ) )    
        .def( 
            "isValid"
            , (bool ( ::QDateTime::* )(  ) const)( &::QDateTime::isValid ) )    
        .def( bp::self != bp::self )    
        .def( bp::self < bp::self )    
        .def( bp::self <= bp::self )    
        .def( bp::self == bp::self )    
        .def( bp::self > bp::self )    
        .def( bp::self >= bp::self )    
        .def( 
            "secsTo"
            , (int ( ::QDateTime::* )( ::QDateTime const & ) const)( &::QDateTime::secsTo )
            , ( bp::arg("arg0") ) )    
        .def( 
            "setDate"
            , (void ( ::QDateTime::* )( ::QDate const & ) )( &::QDateTime::setDate )
            , ( bp::arg("date") ) )    
        .def( 
            "setTime"
            , (void ( ::QDateTime::* )( ::QTime const & ) )( &::QDateTime::setTime )
            , ( bp::arg("time") ) )    
        .def( 
            "setTimeSpec"
            , (void ( ::QDateTime::* )( ::Qt::TimeSpec ) )( &::QDateTime::setTimeSpec )
            , ( bp::arg("spec") ) )    
        .def( 
            "setTime_t"
            , (void ( ::QDateTime::* )( ::uint ) )( &::QDateTime::setTime_t )
            , ( bp::arg("secsSince1Jan1970UTC") ) )    
        .def( 
            "time"
            , (::QTime ( ::QDateTime::* )(  ) const)( &::QDateTime::time ) )    
        .def( 
            "timeSpec"
            , (::Qt::TimeSpec ( ::QDateTime::* )(  ) const)( &::QDateTime::timeSpec ) )    
        .def( 
            "toLocalTime"
            , (::QDateTime ( ::QDateTime::* )(  ) const)( &::QDateTime::toLocalTime ) )    
        .def( 
            "toString"
            , (::QString ( ::QDateTime::* )( ::Qt::DateFormat ) const)( &::QDateTime::toString )
            , ( bp::arg("f")=::Qt::TextDate ) )    
        .def( 
            "toString"
            , (::QString ( ::QDateTime::* )( ::QString const & ) const)( &::QDateTime::toString )
            , ( bp::arg("format") ) )    
        .def( 
            "toTimeSpec"
            , (::QDateTime ( ::QDateTime::* )( ::Qt::TimeSpec ) const)( &::QDateTime::toTimeSpec )
            , ( bp::arg("spec") ) )    
        .def( 
            "toTime_t"
            , (::uint ( ::QDateTime::* )(  ) const)( &::QDateTime::toTime_t ) )    
        .def( 
            "toUTC"
            , (::QDateTime ( ::QDateTime::* )(  ) const)( &::QDateTime::toUTC ) )    
        .staticmethod( "currentDateTime" )    
        .staticmethod( "fromString" )    
        .def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::QDateTime >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::QDateTime >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() )    
        .def( "__str__", &pvt_get_name);

}

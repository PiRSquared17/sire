// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "QChar.pypp.hpp"
#include "boost/python.hpp"
#include "sireqt_headers.h"

namespace bp = boost::python;

#include "SireQt/qdatastream.hpp"

const char* pvt_get_name(const QChar&){ return "QChar";}

void register_QChar_class(){

    { //::QChar
        typedef bp::class_< QChar > QChar_exposer_t;
        QChar_exposer_t QChar_exposer = QChar_exposer_t( "QChar" );
        bp::scope QChar_scope( QChar_exposer );
        bp::enum_< QChar::Category>("Category")
            .value("NoCategory", QChar::NoCategory)
            .value("Mark_NonSpacing", QChar::Mark_NonSpacing)
            .value("Mark_SpacingCombining", QChar::Mark_SpacingCombining)
            .value("Mark_Enclosing", QChar::Mark_Enclosing)
            .value("Number_DecimalDigit", QChar::Number_DecimalDigit)
            .value("Number_Letter", QChar::Number_Letter)
            .value("Number_Other", QChar::Number_Other)
            .value("Separator_Space", QChar::Separator_Space)
            .value("Separator_Line", QChar::Separator_Line)
            .value("Separator_Paragraph", QChar::Separator_Paragraph)
            .value("Other_Control", QChar::Other_Control)
            .value("Other_Format", QChar::Other_Format)
            .value("Other_Surrogate", QChar::Other_Surrogate)
            .value("Other_PrivateUse", QChar::Other_PrivateUse)
            .value("Other_NotAssigned", QChar::Other_NotAssigned)
            .value("Letter_Uppercase", QChar::Letter_Uppercase)
            .value("Letter_Lowercase", QChar::Letter_Lowercase)
            .value("Letter_Titlecase", QChar::Letter_Titlecase)
            .value("Letter_Modifier", QChar::Letter_Modifier)
            .value("Letter_Other", QChar::Letter_Other)
            .value("Punctuation_Connector", QChar::Punctuation_Connector)
            .value("Punctuation_Dash", QChar::Punctuation_Dash)
            .value("Punctuation_Open", QChar::Punctuation_Open)
            .value("Punctuation_Close", QChar::Punctuation_Close)
            .value("Punctuation_InitialQuote", QChar::Punctuation_InitialQuote)
            .value("Punctuation_FinalQuote", QChar::Punctuation_FinalQuote)
            .value("Punctuation_Other", QChar::Punctuation_Other)
            .value("Symbol_Math", QChar::Symbol_Math)
            .value("Symbol_Currency", QChar::Symbol_Currency)
            .value("Symbol_Modifier", QChar::Symbol_Modifier)
            .value("Symbol_Other", QChar::Symbol_Other)
            .value("Punctuation_Dask", QChar::Punctuation_Dask)
            .export_values()
            ;
        bp::enum_< QChar::Decomposition>("Decomposition")
            .value("NoDecomposition", QChar::NoDecomposition)
            .value("Canonical", QChar::Canonical)
            .value("Font", QChar::Font)
            .value("NoBreak", QChar::NoBreak)
            .value("Initial", QChar::Initial)
            .value("Medial", QChar::Medial)
            .value("Final", QChar::Final)
            .value("Isolated", QChar::Isolated)
            .value("Circle", QChar::Circle)
            .value("Super", QChar::Super)
            .value("Sub", QChar::Sub)
            .value("Vertical", QChar::Vertical)
            .value("Wide", QChar::Wide)
            .value("Narrow", QChar::Narrow)
            .value("Small", QChar::Small)
            .value("Square", QChar::Square)
            .value("Compat", QChar::Compat)
            .value("Fraction", QChar::Fraction)
            .export_values()
            ;
        bp::enum_< QChar::Direction>("Direction")
            .value("DirL", QChar::DirL)
            .value("DirR", QChar::DirR)
            .value("DirEN", QChar::DirEN)
            .value("DirES", QChar::DirES)
            .value("DirET", QChar::DirET)
            .value("DirAN", QChar::DirAN)
            .value("DirCS", QChar::DirCS)
            .value("DirB", QChar::DirB)
            .value("DirS", QChar::DirS)
            .value("DirWS", QChar::DirWS)
            .value("DirON", QChar::DirON)
            .value("DirLRE", QChar::DirLRE)
            .value("DirLRO", QChar::DirLRO)
            .value("DirAL", QChar::DirAL)
            .value("DirRLE", QChar::DirRLE)
            .value("DirRLO", QChar::DirRLO)
            .value("DirPDF", QChar::DirPDF)
            .value("DirNSM", QChar::DirNSM)
            .value("DirBN", QChar::DirBN)
            .export_values()
            ;
        bp::enum_< QChar::Joining>("Joining")
            .value("OtherJoining", QChar::OtherJoining)
            .value("Dual", QChar::Dual)
            .value("Right", QChar::Right)
            .value("Center", QChar::Center)
            .export_values()
            ;
        bp::enum_< QChar::SpecialCharacter>("SpecialCharacter")
            .value("Null", QChar::Null)
            .value("Nbsp", QChar::Nbsp)
            .value("ReplacementCharacter", QChar::ReplacementCharacter)
            .value("ObjectReplacementCharacter", QChar::ObjectReplacementCharacter)
            .value("ByteOrderMark", QChar::ByteOrderMark)
            .value("ByteOrderSwapped", QChar::ByteOrderSwapped)
            .value("ParagraphSeparator", QChar::ParagraphSeparator)
            .value("LineSeparator", QChar::LineSeparator)
            .export_values()
            ;
        bp::enum_< QChar::UnicodeVersion>("UnicodeVersion")
            .value("Unicode_Unassigned", QChar::Unicode_Unassigned)
            .value("Unicode_1_1", QChar::Unicode_1_1)
            .value("Unicode_2_0", QChar::Unicode_2_0)
            .value("Unicode_2_1_2", QChar::Unicode_2_1_2)
            .value("Unicode_3_0", QChar::Unicode_3_0)
            .value("Unicode_3_1", QChar::Unicode_3_1)
            .value("Unicode_3_2", QChar::Unicode_3_2)
            .value("Unicode_4_0", QChar::Unicode_4_0)
            .export_values()
            ;
        QChar_exposer.def( bp::init< char >(( bp::arg("c") )) );
        QChar_exposer.def( bp::init< uchar >(( bp::arg("c") )) );
        QChar_exposer.def( bp::init< ushort >(( bp::arg("rc") )) );
        QChar_exposer.def( bp::init< >() );
        QChar_exposer.def( bp::init< uchar, uchar >(( bp::arg("c"), bp::arg("r") )) );
        QChar_exposer.def( bp::init< short int >(( bp::arg("rc") )) );
        QChar_exposer.def( bp::init< uint >(( bp::arg("rc") )) );
        QChar_exposer.def( bp::init< int >(( bp::arg("rc") )) );
        QChar_exposer.def( bp::init< QChar::SpecialCharacter >(( bp::arg("s") )) );
        QChar_exposer.def( bp::init< QLatin1Char >(( bp::arg("ch") )) );
        { //::QChar::category
        
            typedef ::QChar::Category ( ::QChar::*category_function_type )(  ) const;
            
            QChar_exposer.def( 
                "category"
                , category_function_type( &::QChar::category ) );
        
        }
        { //::QChar::cell
        
            typedef ::uchar ( ::QChar::*cell_function_type )(  ) const;
            
            QChar_exposer.def( 
                "cell"
                , cell_function_type( &::QChar::cell ) );
        
        }
        { //::QChar::combiningClass
        
            typedef unsigned char ( ::QChar::*combiningClass_function_type )(  ) const;
            
            QChar_exposer.def( 
                "combiningClass"
                , combiningClass_function_type( &::QChar::combiningClass ) );
        
        }
        { //::QChar::decomposition
        
            typedef ::QString ( ::QChar::*decomposition_function_type )(  ) const;
            
            QChar_exposer.def( 
                "decomposition"
                , decomposition_function_type( &::QChar::decomposition ) );
        
        }
        { //::QChar::decompositionTag
        
            typedef ::QChar::Decomposition ( ::QChar::*decompositionTag_function_type )(  ) const;
            
            QChar_exposer.def( 
                "decompositionTag"
                , decompositionTag_function_type( &::QChar::decompositionTag ) );
        
        }
        { //::QChar::digitValue
        
            typedef int ( ::QChar::*digitValue_function_type )(  ) const;
            
            QChar_exposer.def( 
                "digitValue"
                , digitValue_function_type( &::QChar::digitValue ) );
        
        }
        { //::QChar::direction
        
            typedef ::QChar::Direction ( ::QChar::*direction_function_type )(  ) const;
            
            QChar_exposer.def( 
                "direction"
                , direction_function_type( &::QChar::direction ) );
        
        }
        { //::QChar::fromAscii
        
            typedef ::QChar ( *fromAscii_function_type )( char );
            
            QChar_exposer.def( 
                "fromAscii"
                , fromAscii_function_type( &::QChar::fromAscii )
                , ( bp::arg("c") ) );
        
        }
        { //::QChar::fromLatin1
        
            typedef ::QChar ( *fromLatin1_function_type )( char );
            
            QChar_exposer.def( 
                "fromLatin1"
                , fromLatin1_function_type( &::QChar::fromLatin1 )
                , ( bp::arg("c") ) );
        
        }
        { //::QChar::hasMirrored
        
            typedef bool ( ::QChar::*hasMirrored_function_type )(  ) const;
            
            QChar_exposer.def( 
                "hasMirrored"
                , hasMirrored_function_type( &::QChar::hasMirrored ) );
        
        }
        { //::QChar::isDigit
        
            typedef bool ( ::QChar::*isDigit_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isDigit"
                , isDigit_function_type( &::QChar::isDigit ) );
        
        }
        { //::QChar::isLetter
        
            typedef bool ( ::QChar::*isLetter_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isLetter"
                , isLetter_function_type( &::QChar::isLetter ) );
        
        }
        { //::QChar::isLetterOrNumber
        
            typedef bool ( ::QChar::*isLetterOrNumber_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isLetterOrNumber"
                , isLetterOrNumber_function_type( &::QChar::isLetterOrNumber ) );
        
        }
        { //::QChar::isLower
        
            typedef bool ( ::QChar::*isLower_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isLower"
                , isLower_function_type( &::QChar::isLower ) );
        
        }
        { //::QChar::isMark
        
            typedef bool ( ::QChar::*isMark_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isMark"
                , isMark_function_type( &::QChar::isMark ) );
        
        }
        { //::QChar::isNull
        
            typedef bool ( ::QChar::*isNull_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isNull"
                , isNull_function_type( &::QChar::isNull ) );
        
        }
        { //::QChar::isNumber
        
            typedef bool ( ::QChar::*isNumber_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isNumber"
                , isNumber_function_type( &::QChar::isNumber ) );
        
        }
        { //::QChar::isPrint
        
            typedef bool ( ::QChar::*isPrint_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isPrint"
                , isPrint_function_type( &::QChar::isPrint ) );
        
        }
        { //::QChar::isPunct
        
            typedef bool ( ::QChar::*isPunct_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isPunct"
                , isPunct_function_type( &::QChar::isPunct ) );
        
        }
        { //::QChar::isSpace
        
            typedef bool ( ::QChar::*isSpace_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isSpace"
                , isSpace_function_type( &::QChar::isSpace ) );
        
        }
        { //::QChar::isSymbol
        
            typedef bool ( ::QChar::*isSymbol_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isSymbol"
                , isSymbol_function_type( &::QChar::isSymbol ) );
        
        }
        { //::QChar::isUpper
        
            typedef bool ( ::QChar::*isUpper_function_type )(  ) const;
            
            QChar_exposer.def( 
                "isUpper"
                , isUpper_function_type( &::QChar::isUpper ) );
        
        }
        { //::QChar::mirroredChar
        
            typedef ::QChar ( ::QChar::*mirroredChar_function_type )(  ) const;
            
            QChar_exposer.def( 
                "mirroredChar"
                , mirroredChar_function_type( &::QChar::mirroredChar ) );
        
        }
        { //::QChar::row
        
            typedef ::uchar ( ::QChar::*row_function_type )(  ) const;
            
            QChar_exposer.def( 
                "row"
                , row_function_type( &::QChar::row ) );
        
        }
        { //::QChar::toAscii
        
            typedef char const ( ::QChar::*toAscii_function_type )(  ) const;
            
            QChar_exposer.def( 
                "toAscii"
                , toAscii_function_type( &::QChar::toAscii ) );
        
        }
        { //::QChar::toLatin1
        
            typedef char const ( ::QChar::*toLatin1_function_type )(  ) const;
            
            QChar_exposer.def( 
                "toLatin1"
                , toLatin1_function_type( &::QChar::toLatin1 ) );
        
        }
        { //::QChar::toLower
        
            typedef ::QChar ( ::QChar::*toLower_function_type )(  ) const;
            
            QChar_exposer.def( 
                "toLower"
                , toLower_function_type( &::QChar::toLower ) );
        
        }
        { //::QChar::toUpper
        
            typedef ::QChar ( ::QChar::*toUpper_function_type )(  ) const;
            
            QChar_exposer.def( 
                "toUpper"
                , toUpper_function_type( &::QChar::toUpper ) );
        
        }
        { //::QChar::unicodeVersion
        
            typedef ::QChar::UnicodeVersion ( ::QChar::*unicodeVersion_function_type )(  ) const;
            
            QChar_exposer.def( 
                "unicodeVersion"
                , unicodeVersion_function_type( &::QChar::unicodeVersion ) );
        
        }
        QChar_exposer.staticmethod( "fromAscii" );
        QChar_exposer.staticmethod( "fromLatin1" );
        QChar_exposer.def( "__rlshift__", &SireQt::__rlshift__QDataStream< ::QChar >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QChar_exposer.def( "__rrshift__", &SireQt::__rrshift__QDataStream< ::QChar >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QChar_exposer.def( "__str__", &pvt_get_name);
    }

}

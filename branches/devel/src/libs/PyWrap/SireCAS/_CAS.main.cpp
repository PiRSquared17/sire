// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License


#include "boost/python.hpp"

#include "sirecas_headers.h"

#include "ArcCos.pypp.hpp"

#include "ArcCosh.pypp.hpp"

#include "ArcCot.pypp.hpp"

#include "ArcCoth.pypp.hpp"

#include "ArcCsc.pypp.hpp"

#include "ArcCsch.pypp.hpp"

#include "ArcSec.pypp.hpp"

#include "ArcSech.pypp.hpp"

#include "ArcSin.pypp.hpp"

#include "ArcSinh.pypp.hpp"

#include "ArcTan.pypp.hpp"

#include "ArcTanh.pypp.hpp"

#include "ComplexPower.pypp.hpp"

#include "ComplexValues.pypp.hpp"

#include "Constant.pypp.hpp"

#include "ConstantPower.pypp.hpp"

#include "Cos.pypp.hpp"

#include "Cosh.pypp.hpp"

#include "Cot.pypp.hpp"

#include "Coth.pypp.hpp"

#include "Csc.pypp.hpp"

#include "Csch.pypp.hpp"

#include "ExBase.pypp.hpp"

#include "Exp.pypp.hpp"

#include "Expression.pypp.hpp"

#include "ExpressionBase.pypp.hpp"

#include "Function.pypp.hpp"

#include "I.pypp.hpp"

#include "Identities.pypp.hpp"

#include "IntegerPower.pypp.hpp"

#include "IntegrationConstant.pypp.hpp"

#include "Ln.pypp.hpp"

#include "Power.pypp.hpp"

#include "PowerConstant.pypp.hpp"

#include "PowerFunction.pypp.hpp"

#include "Product.pypp.hpp"

#include "RationalPower.pypp.hpp"

#include "RealPower.pypp.hpp"

#include "Sec.pypp.hpp"

#include "Sech.pypp.hpp"

#include "Sin.pypp.hpp"

#include "SingleFunc.pypp.hpp"

#include "Sinh.pypp.hpp"

#include "Sum.pypp.hpp"

#include "Symbol.pypp.hpp"

#include "SymbolComplex.pypp.hpp"

#include "SymbolExpression.pypp.hpp"

#include "SymbolValue.pypp.hpp"

#include "Tan.pypp.hpp"

#include "Tanh.pypp.hpp"

#include "Values.pypp.hpp"

#include "_CAS_free_functions.pypp.hpp"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_CAS){
    register_ExBase_class();

    register_SingleFunc_class();

    register_ArcCos_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcCos >();

    register_ArcCosh_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcCosh >();

    register_ArcCot_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcCot >();

    register_ArcCoth_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcCoth >();

    register_ArcCsc_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcCsc >();

    register_ArcCsch_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcCsch >();

    register_ArcSec_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcSec >();

    register_ArcSech_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcSech >();

    register_ArcSin_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcSin >();

    register_ArcSinh_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcSinh >();

    register_ArcTan_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcTan >();

    register_ArcTanh_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::ArcTanh >();

    register_PowerFunction_class();

    register_ConstantPower_class();

    register_ComplexPower_class();

    register_ComplexValues_class();

    bp::implicitly_convertible< SireCAS::SymbolComplex const &, SireCAS::ComplexValues >();

    bp::implicitly_convertible< SireCAS::Values const &, SireCAS::ComplexValues >();

    register_Constant_class();

    register_Cos_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Cos >();

    register_Cosh_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Cosh >();

    register_Cot_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Cot >();

    register_Coth_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Coth >();

    register_Csc_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Csc >();

    register_Csch_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Csch >();

    register_Exp_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Exp >();

    register_Expression_class();

    bp::implicitly_convertible< int, SireCAS::Expression >();

    bp::implicitly_convertible< SireMaths::Rational const &, SireCAS::Expression >();

    bp::implicitly_convertible< double, SireCAS::Expression >();

    bp::implicitly_convertible< SireMaths::Complex const &, SireCAS::Expression >();

    bp::implicitly_convertible< SireCAS::ExpressionBase const &, SireCAS::Expression >();

    bp::implicitly_convertible< SireCAS::ExBase const &, SireCAS::Expression >();

    register_ExpressionBase_class();

    bp::implicitly_convertible< SireCAS::ExBase const &, SireCAS::ExpressionBase >();

    register_Symbol_class();

    bp::implicitly_convertible< QString const &, SireCAS::Symbol >();

    register_Function_class();

    bp::implicitly_convertible< QString const &, SireCAS::Function >();

    register_I_class();

    register_Identities_class();

    bp::implicitly_convertible< QList<SireCAS::SymbolExpression> const &, SireCAS::Identities >();

    bp::implicitly_convertible< SireCAS::SymbolExpression const &, SireCAS::Identities >();

    register_IntegerPower_class();

    register_IntegrationConstant_class();

    register_Ln_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Ln >();

    register_Power_class();

    register_PowerConstant_class();

    register_Product_class();

    bp::implicitly_convertible< SireCAS::Expressions const &, SireCAS::Product >();

    register_RationalPower_class();

    register_RealPower_class();

    register_Sec_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Sec >();

    register_Sech_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Sech >();

    register_Sin_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Sin >();

    register_Sinh_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Sinh >();

    register_Sum_class();

    bp::implicitly_convertible< SireCAS::Expressions const &, SireCAS::Sum >();

    register_SymbolComplex_class();

    bp::implicitly_convertible< SireCAS::SymbolValue const &, SireCAS::SymbolComplex >();

    register_SymbolExpression_class();

    register_SymbolValue_class();

    register_Tan_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Tan >();

    register_Tanh_class();

    bp::implicitly_convertible< SireCAS::Expression const &, SireCAS::Tanh >();

    register_Values_class();

    bp::implicitly_convertible< QList<SireCAS::SymbolValue> const &, SireCAS::Values >();

    bp::implicitly_convertible< SireCAS::SymbolValue const &, SireCAS::Values >();

    register_free_functions();
}


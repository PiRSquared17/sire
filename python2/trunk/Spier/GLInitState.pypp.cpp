// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GLInitState.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "glinitstate.h"

#include <QGLWidget>

#include "glinitstate.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GLInitState_class(){

    { //::Spier::GLInitState
        typedef bp::class_< Spier::GLInitState, bp::bases< Spier::GLRenderFunction, SireBase::Property >, boost::noncopyable > GLInitState_exposer_t;
        GLInitState_exposer_t GLInitState_exposer = GLInitState_exposer_t( "GLInitState", bp::no_init );
        bp::scope GLInitState_scope( GLInitState_exposer );
        { //::Spier::GLInitState::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::GLInitState::typeName );
            
            GLInitState_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        GLInitState_exposer.staticmethod( "typeName" );
        GLInitState_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::GLInitState >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLInitState_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::GLInitState >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLInitState_exposer.def( "__str__", &__str__< ::Spier::GLInitState > );
        GLInitState_exposer.def( "__repr__", &__str__< ::Spier::GLInitState > );
    }

}

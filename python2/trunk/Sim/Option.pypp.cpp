// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Option.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireSim/option.h"

#include "option.h"

#include "tostring.h"

#include <QDebug>

#include <QDir>

#include <QDomDocument>

#include <QDomElement>

#include <QDomNode>

#include <QFile>

#include <QFileInfo>

#include <QHash>

#include <QList>

#include "option.h"

SireSim::Option __copy__(const SireSim::Option &other){ return SireSim::Option(other); }

#include "Helpers/str.hpp"

void register_Option_class(){

    { //::SireSim::Option
        typedef bp::class_< SireSim::Option, bp::bases< SireSim::Value > > Option_exposer_t;
        Option_exposer_t Option_exposer = Option_exposer_t( "Option", bp::init< >() );
        bp::scope Option_scope( Option_exposer );
        Option_exposer.def( bp::init< QString const &, QString const &, SireSim::Value const &, bp::optional< bool, bool > >(( bp::arg("key"), bp::arg("description"), bp::arg("value"), bp::arg("is_optional")=(bool)(false), bp::arg("allow_multiple")=(bool)(false) )) );
        Option_exposer.def( bp::init< QDomElement, bp::optional< QStringList > >(( bp::arg("elem"), bp::arg("path")=::QStringList( ) )) );
        Option_exposer.def( bp::init< SireSim::Option const & >(( bp::arg("other") )) );
        { //::SireSim::Option::allowMultiple
        
            typedef bool ( ::SireSim::Option::*allowMultiple_function_type )(  ) const;
            allowMultiple_function_type allowMultiple_function_value( &::SireSim::Option::allowMultiple );
            
            Option_exposer.def( 
                "allowMultiple"
                , allowMultiple_function_value );
        
        }
        { //::SireSim::Option::clear
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*clear_function_type )(  ) const;
            clear_function_type clear_function_value( &::SireSim::Option::clear );
            
            Option_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::SireSim::Option::count
        
            typedef int ( ::SireSim::Option::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireSim::Option::count );
            
            Option_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireSim::Option::defaultValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*defaultValue_function_type )(  ) const;
            defaultValue_function_type defaultValue_function_value( &::SireSim::Option::defaultValue );
            
            Option_exposer.def( 
                "defaultValue"
                , defaultValue_function_value );
        
        }
        { //::SireSim::Option::description
        
            typedef ::QString ( ::SireSim::Option::*description_function_type )(  ) const;
            description_function_type description_function_value( &::SireSim::Option::description );
            
            Option_exposer.def( 
                "description"
                , description_function_value );
        
        }
        { //::SireSim::Option::getNestedOption
        
            typedef ::SireSim::Option ( ::SireSim::Option::*getNestedOption_function_type )( ::QString ) const;
            getNestedOption_function_type getNestedOption_function_value( &::SireSim::Option::getNestedOption );
            
            Option_exposer.def( 
                "getNestedOption"
                , getNestedOption_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireSim::Option::getNestedValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*getNestedValue_function_type )( ::QString ) const;
            getNestedValue_function_type getNestedValue_function_value( &::SireSim::Option::getNestedValue );
            
            Option_exposer.def( 
                "getNestedValue"
                , getNestedValue_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireSim::Option::hasIndiciesWithValue
        
            typedef bool ( ::SireSim::Option::*hasIndiciesWithValue_function_type )(  ) const;
            hasIndiciesWithValue_function_type hasIndiciesWithValue_function_value( &::SireSim::Option::hasIndiciesWithValue );
            
            Option_exposer.def( 
                "hasIndiciesWithValue"
                , hasIndiciesWithValue_function_value );
        
        }
        { //::SireSim::Option::hasSubOptions
        
            typedef bool ( ::SireSim::Option::*hasSubOptions_function_type )(  ) const;
            hasSubOptions_function_type hasSubOptions_function_value( &::SireSim::Option::hasSubOptions );
            
            Option_exposer.def( 
                "hasSubOptions"
                , hasSubOptions_function_value );
        
        }
        { //::SireSim::Option::hasValue
        
            typedef bool ( ::SireSim::Option::*hasValue_function_type )( ::QString ) const;
            hasValue_function_type hasValue_function_value( &::SireSim::Option::hasValue );
            
            Option_exposer.def( 
                "hasValue"
                , hasValue_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireSim::Option::hasValue
        
            typedef bool ( ::SireSim::Option::*hasValue_function_type )(  ) const;
            hasValue_function_type hasValue_function_value( &::SireSim::Option::hasValue );
            
            Option_exposer.def( 
                "hasValue"
                , hasValue_function_value );
        
        }
        { //::SireSim::Option::indicies
        
            typedef ::QList< int > ( ::SireSim::Option::*indicies_function_type )(  ) const;
            indicies_function_type indicies_function_value( &::SireSim::Option::indicies );
            
            Option_exposer.def( 
                "indicies"
                , indicies_function_value );
        
        }
        { //::SireSim::Option::indiciesWithValue
        
            typedef ::QList< int > ( ::SireSim::Option::*indiciesWithValue_function_type )(  ) const;
            indiciesWithValue_function_type indiciesWithValue_function_value( &::SireSim::Option::indiciesWithValue );
            
            Option_exposer.def( 
                "indiciesWithValue"
                , indiciesWithValue_function_value );
        
        }
        { //::SireSim::Option::isNull
        
            typedef bool ( ::SireSim::Option::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireSim::Option::isNull );
            
            Option_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireSim::Option::isOptional
        
            typedef bool ( ::SireSim::Option::*isOptional_function_type )(  ) const;
            isOptional_function_type isOptional_function_value( &::SireSim::Option::isOptional );
            
            Option_exposer.def( 
                "isOptional"
                , isOptional_function_value );
        
        }
        { //::SireSim::Option::key
        
            typedef ::QString ( ::SireSim::Option::*key_function_type )(  ) const;
            key_function_type key_function_value( &::SireSim::Option::key );
            
            Option_exposer.def( 
                "key"
                , key_function_value );
        
        }
        { //::SireSim::Option::keys
        
            typedef ::QStringList ( ::SireSim::Option::*keys_function_type )(  ) const;
            keys_function_type keys_function_value( &::SireSim::Option::keys );
            
            Option_exposer.def( 
                "keys"
                , keys_function_value );
        
        }
        { //::SireSim::Option::keysWithValue
        
            typedef ::QStringList ( ::SireSim::Option::*keysWithValue_function_type )(  ) const;
            keysWithValue_function_type keysWithValue_function_value( &::SireSim::Option::keysWithValue );
            
            Option_exposer.def( 
                "keysWithValue"
                , keysWithValue_function_value );
        
        }
        Option_exposer.def( bp::self != bp::self );
        { //::SireSim::Option::operator=
        
            typedef ::SireSim::Option & ( ::SireSim::Option::*assign_function_type )( ::SireSim::Option const & ) ;
            assign_function_type assign_function_value( &::SireSim::Option::operator= );
            
            Option_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Option_exposer.def( bp::self == bp::self );
        { //::SireSim::Option::operator[]
        
            typedef ::SireSim::Option ( ::SireSim::Option::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireSim::Option::operator[] );
            
            Option_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("index") ) );
        
        }
        { //::SireSim::Option::operator[]
        
            typedef ::SireSim::Option ( ::SireSim::Option::*__getitem___function_type )( ::QString ) const;
            __getitem___function_type __getitem___function_value( &::SireSim::Option::operator[] );
            
            Option_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireSim::Option::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::Option::typeName );
            
            Option_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSim::Option::value
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireSim::Option::value );
            
            Option_exposer.def( 
                "value"
                , value_function_value );
        
        }
        { //::SireSim::Option::what
        
            typedef char const * ( ::SireSim::Option::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSim::Option::what );
            
            Option_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Option_exposer.staticmethod( "typeName" );
        Option_exposer.def( "__copy__", &__copy__);
        Option_exposer.def( "__deepcopy__", &__copy__);
        Option_exposer.def( "clone", &__copy__);
        Option_exposer.def( "__str__", &__str__< ::SireSim::Option > );
        Option_exposer.def( "__repr__", &__str__< ::SireSim::Option > );
    }

}

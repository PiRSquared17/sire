// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ProteinLigandMCParams.pypp.hpp"

namespace bp = boost::python;

#include "SireIO/amber.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "proteinligandmc.h"

#include "proteinligandmc.h"

SireSim::ProteinLigandMCParams __copy__(const SireSim::ProteinLigandMCParams &other){ return SireSim::ProteinLigandMCParams(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_ProteinLigandMCParams_class(){

    { //::SireSim::ProteinLigandMCParams
        typedef bp::class_< SireSim::ProteinLigandMCParams, bp::bases< SireSim::SimParams, SireBase::Property > > ProteinLigandMCParams_exposer_t;
        ProteinLigandMCParams_exposer_t ProteinLigandMCParams_exposer = ProteinLigandMCParams_exposer_t( "ProteinLigandMCParams", bp::init< >() );
        bp::scope ProteinLigandMCParams_scope( ProteinLigandMCParams_exposer );
        ProteinLigandMCParams_exposer.def( bp::init< QString const & >(( bp::arg("filename") )) );
        ProteinLigandMCParams_exposer.def( bp::init< SireSim::ProteinLigandMCParams const & >(( bp::arg("other") )) );
        ProteinLigandMCParams_exposer.def( bp::self != bp::self );
        { //::SireSim::ProteinLigandMCParams::operator=
        
            typedef ::SireSim::ProteinLigandMCParams & ( ::SireSim::ProteinLigandMCParams::*assign_function_type )( ::SireSim::ProteinLigandMCParams const & ) ;
            assign_function_type assign_function_value( &::SireSim::ProteinLigandMCParams::operator= );
            
            ProteinLigandMCParams_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ProteinLigandMCParams_exposer.def( bp::self == bp::self );
        { //::SireSim::ProteinLigandMCParams::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::ProteinLigandMCParams::typeName );
            
            ProteinLigandMCParams_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        ProteinLigandMCParams_exposer.staticmethod( "typeName" );
        ProteinLigandMCParams_exposer.def( "__copy__", &__copy__);
        ProteinLigandMCParams_exposer.def( "__deepcopy__", &__copy__);
        ProteinLigandMCParams_exposer.def( "clone", &__copy__);
        ProteinLigandMCParams_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSim::ProteinLigandMCParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProteinLigandMCParams_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSim::ProteinLigandMCParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProteinLigandMCParams_exposer.def( "__str__", &__str__< ::SireSim::ProteinLigandMCParams > );
        ProteinLigandMCParams_exposer.def( "__repr__", &__str__< ::SireSim::ProteinLigandMCParams > );
    }

}

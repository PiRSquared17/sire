// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TempValue.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireSim/dimensions.h"

#include "SireSim/dimensions.hpp"

#include "SireSim/tempvalue.h"

#include "tempvalue.h"

#include <QDomDocument>

#include <QSet>

#include "tempvalue.h"

SireSim::TempValue __copy__(const SireSim::TempValue &other){ return SireSim::TempValue(other); }

#include "Helpers/str.hpp"

void register_TempValue_class(){

    { //::SireSim::TempValue
        typedef bp::class_< SireSim::TempValue, bp::bases< SireSim::Value > > TempValue_exposer_t;
        TempValue_exposer_t TempValue_exposer = TempValue_exposer_t( "TempValue", bp::init< >() );
        bp::scope TempValue_scope( TempValue_exposer );
        TempValue_exposer.def( bp::init< double, bp::optional< QString > >(( bp::arg("val"), bp::arg("units")=::QString( ) )) );
        TempValue_exposer.def( bp::init< QString >(( bp::arg("value") )) );
        TempValue_exposer.def( bp::init< QDomElement >(( bp::arg("elem") )) );
        TempValue_exposer.def( bp::init< SireSim::TempValue const & >(( bp::arg("other") )) );
        TempValue_exposer.def( bp::self != bp::self );
        { //::SireSim::TempValue::operator=
        
            typedef ::SireSim::TempValue & ( ::SireSim::TempValue::*assign_function_type )( ::SireSim::TempValue const & ) ;
            assign_function_type assign_function_value( &::SireSim::TempValue::operator= );
            
            TempValue_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        TempValue_exposer.def( bp::self == bp::self );
        { //::SireSim::TempValue::supportedUnits
        
            typedef ::QStringList ( *supportedUnits_function_type )(  );
            supportedUnits_function_type supportedUnits_function_value( &::SireSim::TempValue::supportedUnits );
            
            TempValue_exposer.def( 
                "supportedUnits"
                , supportedUnits_function_value );
        
        }
        { //::SireSim::TempValue::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::TempValue::typeName );
            
            TempValue_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSim::TempValue::value
        
            typedef double ( ::SireSim::TempValue::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireSim::TempValue::value );
            
            TempValue_exposer.def( 
                "value"
                , value_function_value );
        
        }
        { //::SireSim::TempValue::value
        
            typedef double ( ::SireSim::TempValue::*value_function_type )( ::QString ) const;
            value_function_type value_function_value( &::SireSim::TempValue::value );
            
            TempValue_exposer.def( 
                "value"
                , value_function_value
                , ( bp::arg("units") ) );
        
        }
        { //::SireSim::TempValue::valueWithMaximum
        
            typedef ::SireSim::TempValue ( *valueWithMaximum_function_type )( double,double,::QString );
            valueWithMaximum_function_type valueWithMaximum_function_value( &::SireSim::TempValue::valueWithMaximum );
            
            TempValue_exposer.def( 
                "valueWithMaximum"
                , valueWithMaximum_function_value
                , ( bp::arg("val"), bp::arg("maximum"), bp::arg("units")=::QString( ) ) );
        
        }
        { //::SireSim::TempValue::valueWithMinimum
        
            typedef ::SireSim::TempValue ( *valueWithMinimum_function_type )( double,double,::QString );
            valueWithMinimum_function_type valueWithMinimum_function_value( &::SireSim::TempValue::valueWithMinimum );
            
            TempValue_exposer.def( 
                "valueWithMinimum"
                , valueWithMinimum_function_value
                , ( bp::arg("val"), bp::arg("minimum"), bp::arg("units")=::QString( ) ) );
        
        }
        { //::SireSim::TempValue::valueWithRange
        
            typedef ::SireSim::TempValue ( *valueWithRange_function_type )( double,double,double,::QString );
            valueWithRange_function_type valueWithRange_function_value( &::SireSim::TempValue::valueWithRange );
            
            TempValue_exposer.def( 
                "valueWithRange"
                , valueWithRange_function_value
                , ( bp::arg("val"), bp::arg("minimum"), bp::arg("maximum"), bp::arg("units")=::QString( ) ) );
        
        }
        { //::SireSim::TempValue::what
        
            typedef char const * ( ::SireSim::TempValue::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSim::TempValue::what );
            
            TempValue_exposer.def( 
                "what"
                , what_function_value );
        
        }
        TempValue_exposer.staticmethod( "supportedUnits" );
        TempValue_exposer.staticmethod( "typeName" );
        TempValue_exposer.staticmethod( "valueWithMaximum" );
        TempValue_exposer.staticmethod( "valueWithMinimum" );
        TempValue_exposer.staticmethod( "valueWithRange" );
        TempValue_exposer.def( "__copy__", &__copy__);
        TempValue_exposer.def( "__deepcopy__", &__copy__);
        TempValue_exposer.def( "clone", &__copy__);
        TempValue_exposer.def( "__str__", &__str__< ::SireSim::TempValue > );
        TempValue_exposer.def( "__repr__", &__str__< ::SireSim::TempValue > );
    }

}

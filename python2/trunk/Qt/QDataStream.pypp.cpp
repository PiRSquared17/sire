// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QDataStream.pypp.hpp"

namespace bp = boost::python;

void register_QDataStream_class(){

    { //::QDataStream
        typedef bp::class_< QDataStream, boost::noncopyable > QDataStream_exposer_t;
        QDataStream_exposer_t QDataStream_exposer = QDataStream_exposer_t( "QDataStream" );
        bp::scope QDataStream_scope( QDataStream_exposer );
        bp::enum_< QDataStream::ByteOrder>("ByteOrder")
            .value("BigEndian", QDataStream::BigEndian)
            .value("LittleEndian", QDataStream::LittleEndian)
            .export_values()
            ;
        bp::enum_< QDataStream::Status>("Status")
            .value("Ok", QDataStream::Ok)
            .value("ReadPastEnd", QDataStream::ReadPastEnd)
            .value("ReadCorruptData", QDataStream::ReadCorruptData)
            .export_values()
            ;
        bp::enum_< QDataStream::Version>("Version")
            .value("Qt_1_0", QDataStream::Qt_1_0)
            .value("Qt_2_0", QDataStream::Qt_2_0)
            .value("Qt_2_1", QDataStream::Qt_2_1)
            .value("Qt_3_0", QDataStream::Qt_3_0)
            .value("Qt_3_1", QDataStream::Qt_3_1)
            .value("Qt_3_3", QDataStream::Qt_3_3)
            .value("Qt_4_0", QDataStream::Qt_4_0)
            .value("Qt_4_1", QDataStream::Qt_4_1)
            .value("Qt_4_2", QDataStream::Qt_4_2)
            .export_values()
            ;
        { //::QDataStream::atEnd
        
            typedef bool ( ::QDataStream::*atEnd_function_type )(  ) const;
            atEnd_function_type atEnd_function_value( &::QDataStream::atEnd );
            
            QDataStream_exposer.def( 
                "atEnd"
                , atEnd_function_value );
        
        }
        { //::QDataStream::byteOrder
        
            typedef ::QDataStream::ByteOrder ( ::QDataStream::*byteOrder_function_type )(  ) const;
            byteOrder_function_type byteOrder_function_value( &::QDataStream::byteOrder );
            
            QDataStream_exposer.def( 
                "byteOrder"
                , byteOrder_function_value );
        
        }
        { //::QDataStream::resetStatus
        
            typedef void ( ::QDataStream::*resetStatus_function_type )(  ) ;
            resetStatus_function_type resetStatus_function_value( &::QDataStream::resetStatus );
            
            QDataStream_exposer.def( 
                "resetStatus"
                , resetStatus_function_value );
        
        }
        { //::QDataStream::setByteOrder
        
            typedef void ( ::QDataStream::*setByteOrder_function_type )( ::QDataStream::ByteOrder ) ;
            setByteOrder_function_type setByteOrder_function_value( &::QDataStream::setByteOrder );
            
            QDataStream_exposer.def( 
                "setByteOrder"
                , setByteOrder_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDataStream::setDevice
        
            typedef void ( ::QDataStream::*setDevice_function_type )( ::QIODevice * ) ;
            setDevice_function_type setDevice_function_value( &::QDataStream::setDevice );
            
            QDataStream_exposer.def( 
                "setDevice"
                , setDevice_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDataStream::setStatus
        
            typedef void ( ::QDataStream::*setStatus_function_type )( ::QDataStream::Status ) ;
            setStatus_function_type setStatus_function_value( &::QDataStream::setStatus );
            
            QDataStream_exposer.def( 
                "setStatus"
                , setStatus_function_value
                , ( bp::arg("status") ) );
        
        }
        { //::QDataStream::setVersion
        
            typedef void ( ::QDataStream::*setVersion_function_type )( int ) ;
            setVersion_function_type setVersion_function_value( &::QDataStream::setVersion );
            
            QDataStream_exposer.def( 
                "setVersion"
                , setVersion_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDataStream::status
        
            typedef ::QDataStream::Status ( ::QDataStream::*status_function_type )(  ) const;
            status_function_type status_function_value( &::QDataStream::status );
            
            QDataStream_exposer.def( 
                "status"
                , status_function_value );
        
        }
        { //::QDataStream::unsetDevice
        
            typedef void ( ::QDataStream::*unsetDevice_function_type )(  ) ;
            unsetDevice_function_type unsetDevice_function_value( &::QDataStream::unsetDevice );
            
            QDataStream_exposer.def( 
                "unsetDevice"
                , unsetDevice_function_value );
        
        }
        { //::QDataStream::version
        
            typedef int ( ::QDataStream::*version_function_type )(  ) const;
            version_function_type version_function_value( &::QDataStream::version );
            
            QDataStream_exposer.def( 
                "version"
                , version_function_value );
        
        }
    }

}

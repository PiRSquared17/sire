// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Database.pypp.hpp"

namespace bp = boost::python;

#include "SireDB/errors.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "database.h"

#include "database.h"

SireDB::Database __copy__(const SireDB::Database &other){ return SireDB::Database(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Database_class(){

    { //::SireDB::Database
        typedef bp::class_< SireDB::Database, bp::bases< SireBase::Property > > Database_exposer_t;
        Database_exposer_t Database_exposer = Database_exposer_t( "Database", bp::init< >() );
        bp::scope Database_scope( Database_exposer );
        Database_exposer.def( bp::init< QString const & >(( bp::arg("sql") )) );
        Database_exposer.def( bp::init< SireDB::Database const & >(( bp::arg("other") )) );
        { //::SireDB::Database::dumpSql
        
            typedef ::QString ( ::SireDB::Database::*dumpSql_function_type )(  ) const;
            dumpSql_function_type dumpSql_function_value( &::SireDB::Database::dumpSql );
            
            Database_exposer.def( 
                "dumpSql"
                , dumpSql_function_value );
        
        }
        Database_exposer.def( bp::self != bp::self );
        { //::SireDB::Database::operator=
        
            typedef ::SireDB::Database & ( ::SireDB::Database::*assign_function_type )( ::SireDB::Database const & ) ;
            assign_function_type assign_function_value( &::SireDB::Database::operator= );
            
            Database_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Database_exposer.def( bp::self == bp::self );
        { //::SireDB::Database::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireDB::Database::typeName );
            
            Database_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Database_exposer.staticmethod( "typeName" );
        Database_exposer.def( "__copy__", &__copy__);
        Database_exposer.def( "__deepcopy__", &__copy__);
        Database_exposer.def( "clone", &__copy__);
        Database_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireDB::Database >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Database_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireDB::Database >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Database_exposer.def( "__str__", &__str__< ::SireDB::Database > );
        Database_exposer.def( "__repr__", &__str__< ::SireDB::Database > );
    }

}

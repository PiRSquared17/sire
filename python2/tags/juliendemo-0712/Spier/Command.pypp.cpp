// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Command.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "command.h"

#include "renderview.h"

#include "command.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Command_class(){

    { //::Spier::Command
        typedef bp::class_< Spier::Command, bp::bases< SireBase::Property >, boost::noncopyable > Command_exposer_t;
        Command_exposer_t Command_exposer = Command_exposer_t( "Command", bp::no_init );
        bp::scope Command_scope( Command_exposer );
        { //::Spier::Command::mergeWith
        
            typedef ::Spier::CommandPtr ( ::Spier::Command::*mergeWith_function_type )( ::Spier::Command const & ) const;
            mergeWith_function_type mergeWith_function_value( &::Spier::Command::mergeWith );
            
            Command_exposer.def( 
                "mergeWith"
                , mergeWith_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::Spier::Command::null
        
            typedef ::Spier::NullCommand const & ( *null_function_type )(  );
            null_function_type null_function_value( &::Spier::Command::null );
            
            Command_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::Spier::Command::redo
        
            typedef void ( ::Spier::Command::*redo_function_type )(  ) const;
            redo_function_type redo_function_value( &::Spier::Command::redo );
            
            Command_exposer.def( 
                "redo"
                , redo_function_value );
        
        }
        { //::Spier::Command::text
        
            typedef ::QString const & ( ::Spier::Command::*text_function_type )(  ) const;
            text_function_type text_function_value( &::Spier::Command::text );
            
            Command_exposer.def( 
                "text"
                , text_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::Spier::Command::toString
        
            typedef ::QString ( ::Spier::Command::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Spier::Command::toString );
            
            Command_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Spier::Command::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::Command::typeName );
            
            Command_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Spier::Command::undo
        
            typedef void ( ::Spier::Command::*undo_function_type )(  ) const;
            undo_function_type undo_function_value( &::Spier::Command::undo );
            
            Command_exposer.def( 
                "undo"
                , undo_function_value );
        
        }
        Command_exposer.staticmethod( "null" );
        Command_exposer.staticmethod( "typeName" );
        Command_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::Command >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Command_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::Command >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Command_exposer.def( "__str__", &__str__< ::Spier::Command > );
        Command_exposer.def( "__repr__", &__str__< ::Spier::Command > );
    }

}

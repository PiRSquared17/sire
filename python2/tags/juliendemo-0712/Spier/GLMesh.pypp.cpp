// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GLMesh.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "glmesh.h"

#include "glrendercontext.h"

#include "glmesh.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GLMesh_class(){

    { //::Spier::GLMesh
        typedef bp::class_< Spier::GLMesh, bp::bases< SireBase::Property >, boost::noncopyable > GLMesh_exposer_t;
        GLMesh_exposer_t GLMesh_exposer = GLMesh_exposer_t( "GLMesh", bp::no_init );
        bp::scope GLMesh_scope( GLMesh_exposer );
        { //::Spier::GLMesh::null
        
            typedef ::Spier::NullGLMesh const & ( *null_function_type )(  );
            null_function_type null_function_value( &::Spier::GLMesh::null );
            
            GLMesh_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::Spier::GLMesh::render
        
            typedef void ( ::Spier::GLMesh::*render_function_type )( ::Spier::GLRenderContext &,float ) const;
            render_function_type render_function_value( &::Spier::GLMesh::render );
            
            GLMesh_exposer.def( 
                "render"
                , render_function_value
                , ( bp::arg("render_context"), bp::arg("distance_from_camera") ) );
        
        }
        { //::Spier::GLMesh::render
        
            typedef void ( ::Spier::GLMesh::*render_function_type )( ::Spier::GLRenderContext & ) const;
            render_function_type render_function_value( &::Spier::GLMesh::render );
            
            GLMesh_exposer.def( 
                "render"
                , render_function_value
                , ( bp::arg("render_context") ) );
        
        }
        { //::Spier::GLMesh::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::GLMesh::typeName );
            
            GLMesh_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        GLMesh_exposer.staticmethod( "null" );
        GLMesh_exposer.staticmethod( "typeName" );
        GLMesh_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::GLMesh >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLMesh_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::GLMesh >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLMesh_exposer.def( "__str__", &__str__< ::Spier::GLMesh > );
        GLMesh_exposer.def( "__repr__", &__str__< ::Spier::GLMesh > );
    }

}

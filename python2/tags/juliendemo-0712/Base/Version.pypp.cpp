// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Version.pypp.hpp"

namespace bp = boost::python;

#include "majorminorversion.h"

#include "majorminorversion.h"

SireBase::Version __copy__(const SireBase::Version &other){ return SireBase::Version(other); }

#include "Helpers/str.hpp"

void register_Version_class(){

    { //::SireBase::Version
        typedef bp::class_< SireBase::Version > Version_exposer_t;
        Version_exposer_t Version_exposer = Version_exposer_t( "Version", bp::init< bp::optional< quint64, quint64 > >(( bp::arg("major")=(long long unsigned int)(0), bp::arg("minor")=(long long unsigned int)(0) )) );
        bp::scope Version_scope( Version_exposer );
        Version_exposer.def( bp::init< SireBase::Version const & >(( bp::arg("other") )) );
        { //::SireBase::Version::majorVersion
        
            typedef ::quint64 ( ::SireBase::Version::*majorVersion_function_type )(  ) const;
            majorVersion_function_type majorVersion_function_value( &::SireBase::Version::majorVersion );
            
            Version_exposer.def( 
                "majorVersion"
                , majorVersion_function_value );
        
        }
        { //::SireBase::Version::minorVersion
        
            typedef ::quint64 ( ::SireBase::Version::*minorVersion_function_type )(  ) const;
            minorVersion_function_type minorVersion_function_value( &::SireBase::Version::minorVersion );
            
            Version_exposer.def( 
                "minorVersion"
                , minorVersion_function_value );
        
        }
        Version_exposer.def( bp::self != bp::self );
        { //::SireBase::Version::operator=
        
            typedef ::SireBase::Version & ( ::SireBase::Version::*assign_function_type )( ::SireBase::Version const & ) ;
            assign_function_type assign_function_value( &::SireBase::Version::operator= );
            
            Version_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Version_exposer.def( bp::self == bp::self );
        { //::SireBase::Version::toString
        
            typedef ::QString ( ::SireBase::Version::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireBase::Version::toString );
            
            Version_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Version_exposer.def( "__copy__", &__copy__);
        Version_exposer.def( "__deepcopy__", &__copy__);
        Version_exposer.def( "clone", &__copy__);
        Version_exposer.def( "__str__", &__str__< ::SireBase::Version > );
        Version_exposer.def( "__repr__", &__str__< ::SireBase::Version > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QLocale.pypp.hpp"

namespace bp = boost::python;

QLocale __copy__(const QLocale &other){ return QLocale(other); }

void register_QLocale_class(){

    { //::QLocale
        typedef bp::class_< QLocale > QLocale_exposer_t;
        QLocale_exposer_t QLocale_exposer = QLocale_exposer_t( "QLocale", bp::init< >() );
        bp::scope QLocale_scope( QLocale_exposer );
        bp::enum_< QLocale::Country>("Country")
            .value("AnyCountry", QLocale::AnyCountry)
            .value("Afghanistan", QLocale::Afghanistan)
            .value("Albania", QLocale::Albania)
            .value("Algeria", QLocale::Algeria)
            .value("AmericanSamoa", QLocale::AmericanSamoa)
            .value("Andorra", QLocale::Andorra)
            .value("Angola", QLocale::Angola)
            .value("Anguilla", QLocale::Anguilla)
            .value("Antarctica", QLocale::Antarctica)
            .value("AntiguaAndBarbuda", QLocale::AntiguaAndBarbuda)
            .value("Argentina", QLocale::Argentina)
            .value("Armenia", QLocale::Armenia)
            .value("Aruba", QLocale::Aruba)
            .value("Australia", QLocale::Australia)
            .value("Austria", QLocale::Austria)
            .value("Azerbaijan", QLocale::Azerbaijan)
            .value("Bahamas", QLocale::Bahamas)
            .value("Bahrain", QLocale::Bahrain)
            .value("Bangladesh", QLocale::Bangladesh)
            .value("Barbados", QLocale::Barbados)
            .value("Belarus", QLocale::Belarus)
            .value("Belgium", QLocale::Belgium)
            .value("Belize", QLocale::Belize)
            .value("Benin", QLocale::Benin)
            .value("Bermuda", QLocale::Bermuda)
            .value("Bhutan", QLocale::Bhutan)
            .value("Bolivia", QLocale::Bolivia)
            .value("BosniaAndHerzegowina", QLocale::BosniaAndHerzegowina)
            .value("Botswana", QLocale::Botswana)
            .value("BouvetIsland", QLocale::BouvetIsland)
            .value("Brazil", QLocale::Brazil)
            .value("BritishIndianOceanTerritory", QLocale::BritishIndianOceanTerritory)
            .value("BruneiDarussalam", QLocale::BruneiDarussalam)
            .value("Bulgaria", QLocale::Bulgaria)
            .value("BurkinaFaso", QLocale::BurkinaFaso)
            .value("Burundi", QLocale::Burundi)
            .value("Cambodia", QLocale::Cambodia)
            .value("Cameroon", QLocale::Cameroon)
            .value("Canada", QLocale::Canada)
            .value("CapeVerde", QLocale::CapeVerde)
            .value("CaymanIslands", QLocale::CaymanIslands)
            .value("CentralAfricanRepublic", QLocale::CentralAfricanRepublic)
            .value("Chad", QLocale::Chad)
            .value("Chile", QLocale::Chile)
            .value("China", QLocale::China)
            .value("ChristmasIsland", QLocale::ChristmasIsland)
            .value("CocosIslands", QLocale::CocosIslands)
            .value("Colombia", QLocale::Colombia)
            .value("Comoros", QLocale::Comoros)
            .value("DemocraticRepublicOfCongo", QLocale::DemocraticRepublicOfCongo)
            .value("PeoplesRepublicOfCongo", QLocale::PeoplesRepublicOfCongo)
            .value("CookIslands", QLocale::CookIslands)
            .value("CostaRica", QLocale::CostaRica)
            .value("IvoryCoast", QLocale::IvoryCoast)
            .value("Croatia", QLocale::Croatia)
            .value("Cuba", QLocale::Cuba)
            .value("Cyprus", QLocale::Cyprus)
            .value("CzechRepublic", QLocale::CzechRepublic)
            .value("Denmark", QLocale::Denmark)
            .value("Djibouti", QLocale::Djibouti)
            .value("Dominica", QLocale::Dominica)
            .value("DominicanRepublic", QLocale::DominicanRepublic)
            .value("EastTimor", QLocale::EastTimor)
            .value("Ecuador", QLocale::Ecuador)
            .value("Egypt", QLocale::Egypt)
            .value("ElSalvador", QLocale::ElSalvador)
            .value("EquatorialGuinea", QLocale::EquatorialGuinea)
            .value("Eritrea", QLocale::Eritrea)
            .value("Estonia", QLocale::Estonia)
            .value("Ethiopia", QLocale::Ethiopia)
            .value("FalklandIslands", QLocale::FalklandIslands)
            .value("FaroeIslands", QLocale::FaroeIslands)
            .value("FijiCountry", QLocale::FijiCountry)
            .value("Finland", QLocale::Finland)
            .value("France", QLocale::France)
            .value("MetropolitanFrance", QLocale::MetropolitanFrance)
            .value("FrenchGuiana", QLocale::FrenchGuiana)
            .value("FrenchPolynesia", QLocale::FrenchPolynesia)
            .value("FrenchSouthernTerritories", QLocale::FrenchSouthernTerritories)
            .value("Gabon", QLocale::Gabon)
            .value("Gambia", QLocale::Gambia)
            .value("Georgia", QLocale::Georgia)
            .value("Germany", QLocale::Germany)
            .value("Ghana", QLocale::Ghana)
            .value("Gibraltar", QLocale::Gibraltar)
            .value("Greece", QLocale::Greece)
            .value("Greenland", QLocale::Greenland)
            .value("Grenada", QLocale::Grenada)
            .value("Guadeloupe", QLocale::Guadeloupe)
            .value("Guam", QLocale::Guam)
            .value("Guatemala", QLocale::Guatemala)
            .value("Guinea", QLocale::Guinea)
            .value("GuineaBissau", QLocale::GuineaBissau)
            .value("Guyana", QLocale::Guyana)
            .value("Haiti", QLocale::Haiti)
            .value("HeardAndMcDonaldIslands", QLocale::HeardAndMcDonaldIslands)
            .value("Honduras", QLocale::Honduras)
            .value("HongKong", QLocale::HongKong)
            .value("Hungary", QLocale::Hungary)
            .value("Iceland", QLocale::Iceland)
            .value("India", QLocale::India)
            .value("Indonesia", QLocale::Indonesia)
            .value("Iran", QLocale::Iran)
            .value("Iraq", QLocale::Iraq)
            .value("Ireland", QLocale::Ireland)
            .value("Israel", QLocale::Israel)
            .value("Italy", QLocale::Italy)
            .value("Jamaica", QLocale::Jamaica)
            .value("Japan", QLocale::Japan)
            .value("Jordan", QLocale::Jordan)
            .value("Kazakhstan", QLocale::Kazakhstan)
            .value("Kenya", QLocale::Kenya)
            .value("Kiribati", QLocale::Kiribati)
            .value("DemocraticRepublicOfKorea", QLocale::DemocraticRepublicOfKorea)
            .value("RepublicOfKorea", QLocale::RepublicOfKorea)
            .value("Kuwait", QLocale::Kuwait)
            .value("Kyrgyzstan", QLocale::Kyrgyzstan)
            .value("Lao", QLocale::Lao)
            .value("Latvia", QLocale::Latvia)
            .value("Lebanon", QLocale::Lebanon)
            .value("Lesotho", QLocale::Lesotho)
            .value("Liberia", QLocale::Liberia)
            .value("LibyanArabJamahiriya", QLocale::LibyanArabJamahiriya)
            .value("Liechtenstein", QLocale::Liechtenstein)
            .value("Lithuania", QLocale::Lithuania)
            .value("Luxembourg", QLocale::Luxembourg)
            .value("Macau", QLocale::Macau)
            .value("Macedonia", QLocale::Macedonia)
            .value("Madagascar", QLocale::Madagascar)
            .value("Malawi", QLocale::Malawi)
            .value("Malaysia", QLocale::Malaysia)
            .value("Maldives", QLocale::Maldives)
            .value("Mali", QLocale::Mali)
            .value("Malta", QLocale::Malta)
            .value("MarshallIslands", QLocale::MarshallIslands)
            .value("Martinique", QLocale::Martinique)
            .value("Mauritania", QLocale::Mauritania)
            .value("Mauritius", QLocale::Mauritius)
            .value("Mayotte", QLocale::Mayotte)
            .value("Mexico", QLocale::Mexico)
            .value("Micronesia", QLocale::Micronesia)
            .value("Moldova", QLocale::Moldova)
            .value("Monaco", QLocale::Monaco)
            .value("Mongolia", QLocale::Mongolia)
            .value("Montserrat", QLocale::Montserrat)
            .value("Morocco", QLocale::Morocco)
            .value("Mozambique", QLocale::Mozambique)
            .value("Myanmar", QLocale::Myanmar)
            .value("Namibia", QLocale::Namibia)
            .value("NauruCountry", QLocale::NauruCountry)
            .value("Nepal", QLocale::Nepal)
            .value("Netherlands", QLocale::Netherlands)
            .value("NetherlandsAntilles", QLocale::NetherlandsAntilles)
            .value("NewCaledonia", QLocale::NewCaledonia)
            .value("NewZealand", QLocale::NewZealand)
            .value("Nicaragua", QLocale::Nicaragua)
            .value("Niger", QLocale::Niger)
            .value("Nigeria", QLocale::Nigeria)
            .value("Niue", QLocale::Niue)
            .value("NorfolkIsland", QLocale::NorfolkIsland)
            .value("NorthernMarianaIslands", QLocale::NorthernMarianaIslands)
            .value("Norway", QLocale::Norway)
            .value("Oman", QLocale::Oman)
            .value("Pakistan", QLocale::Pakistan)
            .value("Palau", QLocale::Palau)
            .value("PalestinianTerritory", QLocale::PalestinianTerritory)
            .value("Panama", QLocale::Panama)
            .value("PapuaNewGuinea", QLocale::PapuaNewGuinea)
            .value("Paraguay", QLocale::Paraguay)
            .value("Peru", QLocale::Peru)
            .value("Philippines", QLocale::Philippines)
            .value("Pitcairn", QLocale::Pitcairn)
            .value("Poland", QLocale::Poland)
            .value("Portugal", QLocale::Portugal)
            .value("PuertoRico", QLocale::PuertoRico)
            .value("Qatar", QLocale::Qatar)
            .value("Reunion", QLocale::Reunion)
            .value("Romania", QLocale::Romania)
            .value("RussianFederation", QLocale::RussianFederation)
            .value("Rwanda", QLocale::Rwanda)
            .value("SaintKittsAndNevis", QLocale::SaintKittsAndNevis)
            .value("StLucia", QLocale::StLucia)
            .value("StVincentAndTheGrenadines", QLocale::StVincentAndTheGrenadines)
            .value("Samoa", QLocale::Samoa)
            .value("SanMarino", QLocale::SanMarino)
            .value("SaoTomeAndPrincipe", QLocale::SaoTomeAndPrincipe)
            .value("SaudiArabia", QLocale::SaudiArabia)
            .value("Senegal", QLocale::Senegal)
            .value("Seychelles", QLocale::Seychelles)
            .value("SierraLeone", QLocale::SierraLeone)
            .value("Singapore", QLocale::Singapore)
            .value("Slovakia", QLocale::Slovakia)
            .value("Slovenia", QLocale::Slovenia)
            .value("SolomonIslands", QLocale::SolomonIslands)
            .value("Somalia", QLocale::Somalia)
            .value("SouthAfrica", QLocale::SouthAfrica)
            .value("SouthGeorgiaAndTheSouthSandwichIslands", QLocale::SouthGeorgiaAndTheSouthSandwichIslands)
            .value("Spain", QLocale::Spain)
            .value("SriLanka", QLocale::SriLanka)
            .value("StHelena", QLocale::StHelena)
            .value("StPierreAndMiquelon", QLocale::StPierreAndMiquelon)
            .value("Sudan", QLocale::Sudan)
            .value("Suriname", QLocale::Suriname)
            .value("SvalbardAndJanMayenIslands", QLocale::SvalbardAndJanMayenIslands)
            .value("Swaziland", QLocale::Swaziland)
            .value("Sweden", QLocale::Sweden)
            .value("Switzerland", QLocale::Switzerland)
            .value("SyrianArabRepublic", QLocale::SyrianArabRepublic)
            .value("Taiwan", QLocale::Taiwan)
            .value("Tajikistan", QLocale::Tajikistan)
            .value("Tanzania", QLocale::Tanzania)
            .value("Thailand", QLocale::Thailand)
            .value("Togo", QLocale::Togo)
            .value("Tokelau", QLocale::Tokelau)
            .value("TongaCountry", QLocale::TongaCountry)
            .value("TrinidadAndTobago", QLocale::TrinidadAndTobago)
            .value("Tunisia", QLocale::Tunisia)
            .value("Turkey", QLocale::Turkey)
            .value("Turkmenistan", QLocale::Turkmenistan)
            .value("TurksAndCaicosIslands", QLocale::TurksAndCaicosIslands)
            .value("Tuvalu", QLocale::Tuvalu)
            .value("Uganda", QLocale::Uganda)
            .value("Ukraine", QLocale::Ukraine)
            .value("UnitedArabEmirates", QLocale::UnitedArabEmirates)
            .value("UnitedKingdom", QLocale::UnitedKingdom)
            .value("UnitedStates", QLocale::UnitedStates)
            .value("UnitedStatesMinorOutlyingIslands", QLocale::UnitedStatesMinorOutlyingIslands)
            .value("Uruguay", QLocale::Uruguay)
            .value("Uzbekistan", QLocale::Uzbekistan)
            .value("Vanuatu", QLocale::Vanuatu)
            .value("VaticanCityState", QLocale::VaticanCityState)
            .value("Venezuela", QLocale::Venezuela)
            .value("VietNam", QLocale::VietNam)
            .value("BritishVirginIslands", QLocale::BritishVirginIslands)
            .value("USVirginIslands", QLocale::USVirginIslands)
            .value("WallisAndFutunaIslands", QLocale::WallisAndFutunaIslands)
            .value("WesternSahara", QLocale::WesternSahara)
            .value("Yemen", QLocale::Yemen)
            .value("Yugoslavia", QLocale::Yugoslavia)
            .value("Zambia", QLocale::Zambia)
            .value("Zimbabwe", QLocale::Zimbabwe)
            .value("SerbiaAndMontenegro", QLocale::SerbiaAndMontenegro)
            .value("LastCountry", QLocale::LastCountry)
            .export_values()
            ;
        bp::enum_< QLocale::FormatType>("FormatType")
            .value("LongFormat", QLocale::LongFormat)
            .value("ShortFormat", QLocale::ShortFormat)
            .export_values()
            ;
        bp::enum_< QLocale::Language>("Language")
            .value("C", QLocale::C)
            .value("Abkhazian", QLocale::Abkhazian)
            .value("Afan", QLocale::Afan)
            .value("Afar", QLocale::Afar)
            .value("Afrikaans", QLocale::Afrikaans)
            .value("Albanian", QLocale::Albanian)
            .value("Amharic", QLocale::Amharic)
            .value("Arabic", QLocale::Arabic)
            .value("Armenian", QLocale::Armenian)
            .value("Assamese", QLocale::Assamese)
            .value("Aymara", QLocale::Aymara)
            .value("Azerbaijani", QLocale::Azerbaijani)
            .value("Bashkir", QLocale::Bashkir)
            .value("Basque", QLocale::Basque)
            .value("Bengali", QLocale::Bengali)
            .value("Bhutani", QLocale::Bhutani)
            .value("Bihari", QLocale::Bihari)
            .value("Bislama", QLocale::Bislama)
            .value("Breton", QLocale::Breton)
            .value("Bulgarian", QLocale::Bulgarian)
            .value("Burmese", QLocale::Burmese)
            .value("Byelorussian", QLocale::Byelorussian)
            .value("Cambodian", QLocale::Cambodian)
            .value("Catalan", QLocale::Catalan)
            .value("Chinese", QLocale::Chinese)
            .value("Corsican", QLocale::Corsican)
            .value("Croatian", QLocale::Croatian)
            .value("Czech", QLocale::Czech)
            .value("Danish", QLocale::Danish)
            .value("Dutch", QLocale::Dutch)
            .value("English", QLocale::English)
            .value("Esperanto", QLocale::Esperanto)
            .value("Estonian", QLocale::Estonian)
            .value("Faroese", QLocale::Faroese)
            .value("FijiLanguage", QLocale::FijiLanguage)
            .value("Finnish", QLocale::Finnish)
            .value("French", QLocale::French)
            .value("Frisian", QLocale::Frisian)
            .value("Gaelic", QLocale::Gaelic)
            .value("Galician", QLocale::Galician)
            .value("Georgian", QLocale::Georgian)
            .value("German", QLocale::German)
            .value("Greek", QLocale::Greek)
            .value("Greenlandic", QLocale::Greenlandic)
            .value("Guarani", QLocale::Guarani)
            .value("Gujarati", QLocale::Gujarati)
            .value("Hausa", QLocale::Hausa)
            .value("Hebrew", QLocale::Hebrew)
            .value("Hindi", QLocale::Hindi)
            .value("Hungarian", QLocale::Hungarian)
            .value("Icelandic", QLocale::Icelandic)
            .value("Indonesian", QLocale::Indonesian)
            .value("Interlingua", QLocale::Interlingua)
            .value("Interlingue", QLocale::Interlingue)
            .value("Inuktitut", QLocale::Inuktitut)
            .value("Inupiak", QLocale::Inupiak)
            .value("Irish", QLocale::Irish)
            .value("Italian", QLocale::Italian)
            .value("Japanese", QLocale::Japanese)
            .value("Javanese", QLocale::Javanese)
            .value("Kannada", QLocale::Kannada)
            .value("Kashmiri", QLocale::Kashmiri)
            .value("Kazakh", QLocale::Kazakh)
            .value("Kinyarwanda", QLocale::Kinyarwanda)
            .value("Kirghiz", QLocale::Kirghiz)
            .value("Korean", QLocale::Korean)
            .value("Kurdish", QLocale::Kurdish)
            .value("Kurundi", QLocale::Kurundi)
            .value("Laothian", QLocale::Laothian)
            .value("Latin", QLocale::Latin)
            .value("Latvian", QLocale::Latvian)
            .value("Lingala", QLocale::Lingala)
            .value("Lithuanian", QLocale::Lithuanian)
            .value("Macedonian", QLocale::Macedonian)
            .value("Malagasy", QLocale::Malagasy)
            .value("Malay", QLocale::Malay)
            .value("Malayalam", QLocale::Malayalam)
            .value("Maltese", QLocale::Maltese)
            .value("Maori", QLocale::Maori)
            .value("Marathi", QLocale::Marathi)
            .value("Moldavian", QLocale::Moldavian)
            .value("Mongolian", QLocale::Mongolian)
            .value("NauruLanguage", QLocale::NauruLanguage)
            .value("Nepali", QLocale::Nepali)
            .value("Norwegian", QLocale::Norwegian)
            .value("Occitan", QLocale::Occitan)
            .value("Oriya", QLocale::Oriya)
            .value("Pashto", QLocale::Pashto)
            .value("Persian", QLocale::Persian)
            .value("Polish", QLocale::Polish)
            .value("Portuguese", QLocale::Portuguese)
            .value("Punjabi", QLocale::Punjabi)
            .value("Quechua", QLocale::Quechua)
            .value("RhaetoRomance", QLocale::RhaetoRomance)
            .value("Romanian", QLocale::Romanian)
            .value("Russian", QLocale::Russian)
            .value("Samoan", QLocale::Samoan)
            .value("Sangho", QLocale::Sangho)
            .value("Sanskrit", QLocale::Sanskrit)
            .value("Serbian", QLocale::Serbian)
            .value("SerboCroatian", QLocale::SerboCroatian)
            .value("Sesotho", QLocale::Sesotho)
            .value("Setswana", QLocale::Setswana)
            .value("Shona", QLocale::Shona)
            .value("Sindhi", QLocale::Sindhi)
            .value("Singhalese", QLocale::Singhalese)
            .value("Siswati", QLocale::Siswati)
            .value("Slovak", QLocale::Slovak)
            .value("Slovenian", QLocale::Slovenian)
            .value("Somali", QLocale::Somali)
            .value("Spanish", QLocale::Spanish)
            .value("Sundanese", QLocale::Sundanese)
            .value("Swahili", QLocale::Swahili)
            .value("Swedish", QLocale::Swedish)
            .value("Tagalog", QLocale::Tagalog)
            .value("Tajik", QLocale::Tajik)
            .value("Tamil", QLocale::Tamil)
            .value("Tatar", QLocale::Tatar)
            .value("Telugu", QLocale::Telugu)
            .value("Thai", QLocale::Thai)
            .value("Tibetan", QLocale::Tibetan)
            .value("Tigrinya", QLocale::Tigrinya)
            .value("TongaLanguage", QLocale::TongaLanguage)
            .value("Tsonga", QLocale::Tsonga)
            .value("Turkish", QLocale::Turkish)
            .value("Turkmen", QLocale::Turkmen)
            .value("Twi", QLocale::Twi)
            .value("Uigur", QLocale::Uigur)
            .value("Ukrainian", QLocale::Ukrainian)
            .value("Urdu", QLocale::Urdu)
            .value("Uzbek", QLocale::Uzbek)
            .value("Vietnamese", QLocale::Vietnamese)
            .value("Volapuk", QLocale::Volapuk)
            .value("Welsh", QLocale::Welsh)
            .value("Wolof", QLocale::Wolof)
            .value("Xhosa", QLocale::Xhosa)
            .value("Yiddish", QLocale::Yiddish)
            .value("Yoruba", QLocale::Yoruba)
            .value("Zhuang", QLocale::Zhuang)
            .value("Zulu", QLocale::Zulu)
            .value("Nynorsk", QLocale::Nynorsk)
            .value("Bosnian", QLocale::Bosnian)
            .value("Divehi", QLocale::Divehi)
            .value("Manx", QLocale::Manx)
            .value("Cornish", QLocale::Cornish)
            .value("LastLanguage", QLocale::LastLanguage)
            .export_values()
            ;
        bp::enum_< QLocale::NumberOption>("NumberOption")
            .value("OmitGroupSeparator", QLocale::OmitGroupSeparator)
            .value("RejectGroupSeparator", QLocale::RejectGroupSeparator)
            .export_values()
            ;
        QLocale_exposer.def( bp::init< QString const & >(( bp::arg("name") )) );
        QLocale_exposer.def( bp::init< QLocale::Language, QLocale::Country >(( bp::arg("language"), bp::arg("country") )) );
        QLocale_exposer.def( bp::init< QLocale const & >(( bp::arg("other") )) );
        { //::QLocale::c
        
            typedef ::QLocale ( *c_function_type )(  );
            c_function_type c_function_value( &::QLocale::c );
            
            QLocale_exposer.def( 
                "c"
                , c_function_value );
        
        }
        { //::QLocale::country
        
            typedef ::QLocale::Country ( ::QLocale::*country_function_type )(  ) const;
            country_function_type country_function_value( &::QLocale::country );
            
            QLocale_exposer.def( 
                "country"
                , country_function_value );
        
        }
        { //::QLocale::countryToString
        
            typedef ::QString ( *countryToString_function_type )( ::QLocale::Country );
            countryToString_function_type countryToString_function_value( &::QLocale::countryToString );
            
            QLocale_exposer.def( 
                "countryToString"
                , countryToString_function_value
                , ( bp::arg("country") ) );
        
        }
        { //::QLocale::dateFormat
        
            typedef ::QString ( ::QLocale::*dateFormat_function_type )( ::QLocale::FormatType ) const;
            dateFormat_function_type dateFormat_function_value( &::QLocale::dateFormat );
            
            QLocale_exposer.def( 
                "dateFormat"
                , dateFormat_function_value
                , ( bp::arg("format")=::QLocale::LongFormat ) );
        
        }
        { //::QLocale::dayName
        
            typedef ::QString ( ::QLocale::*dayName_function_type )( int,::QLocale::FormatType ) const;
            dayName_function_type dayName_function_value( &::QLocale::dayName );
            
            QLocale_exposer.def( 
                "dayName"
                , dayName_function_value
                , ( bp::arg("arg0"), bp::arg("format") ) );
        
        }
        { //::QLocale::decimalPoint
        
            typedef ::QChar ( ::QLocale::*decimalPoint_function_type )(  ) const;
            decimalPoint_function_type decimalPoint_function_value( &::QLocale::decimalPoint );
            
            QLocale_exposer.def( 
                "decimalPoint"
                , decimalPoint_function_value );
        
        }
        { //::QLocale::exponential
        
            typedef ::QChar ( ::QLocale::*exponential_function_type )(  ) const;
            exponential_function_type exponential_function_value( &::QLocale::exponential );
            
            QLocale_exposer.def( 
                "exponential"
                , exponential_function_value );
        
        }
        { //::QLocale::groupSeparator
        
            typedef ::QChar ( ::QLocale::*groupSeparator_function_type )(  ) const;
            groupSeparator_function_type groupSeparator_function_value( &::QLocale::groupSeparator );
            
            QLocale_exposer.def( 
                "groupSeparator"
                , groupSeparator_function_value );
        
        }
        { //::QLocale::language
        
            typedef ::QLocale::Language ( ::QLocale::*language_function_type )(  ) const;
            language_function_type language_function_value( &::QLocale::language );
            
            QLocale_exposer.def( 
                "language"
                , language_function_value );
        
        }
        { //::QLocale::languageToString
        
            typedef ::QString ( *languageToString_function_type )( ::QLocale::Language );
            languageToString_function_type languageToString_function_value( &::QLocale::languageToString );
            
            QLocale_exposer.def( 
                "languageToString"
                , languageToString_function_value
                , ( bp::arg("language") ) );
        
        }
        { //::QLocale::monthName
        
            typedef ::QString ( ::QLocale::*monthName_function_type )( int,::QLocale::FormatType ) const;
            monthName_function_type monthName_function_value( &::QLocale::monthName );
            
            QLocale_exposer.def( 
                "monthName"
                , monthName_function_value
                , ( bp::arg("arg0"), bp::arg("format") ) );
        
        }
        { //::QLocale::name
        
            typedef ::QString ( ::QLocale::*name_function_type )(  ) const;
            name_function_type name_function_value( &::QLocale::name );
            
            QLocale_exposer.def( 
                "name"
                , name_function_value );
        
        }
        { //::QLocale::negativeSign
        
            typedef ::QChar ( ::QLocale::*negativeSign_function_type )(  ) const;
            negativeSign_function_type negativeSign_function_value( &::QLocale::negativeSign );
            
            QLocale_exposer.def( 
                "negativeSign"
                , negativeSign_function_value );
        
        }
        { //::QLocale::numberOptions
        
            typedef ::QFlags< QLocale::NumberOption > ( ::QLocale::*numberOptions_function_type )(  ) const;
            numberOptions_function_type numberOptions_function_value( &::QLocale::numberOptions );
            
            QLocale_exposer.def( 
                "numberOptions"
                , numberOptions_function_value );
        
        }
        QLocale_exposer.def( bp::self != bp::self );
        { //::QLocale::operator=
        
            typedef ::QLocale & ( ::QLocale::*assign_function_type )( ::QLocale const & ) ;
            assign_function_type assign_function_value( &::QLocale::operator= );
            
            QLocale_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        QLocale_exposer.def( bp::self == bp::self );
        { //::QLocale::percent
        
            typedef ::QChar ( ::QLocale::*percent_function_type )(  ) const;
            percent_function_type percent_function_value( &::QLocale::percent );
            
            QLocale_exposer.def( 
                "percent"
                , percent_function_value );
        
        }
        { //::QLocale::setDefault
        
            typedef void ( *setDefault_function_type )( ::QLocale const & );
            setDefault_function_type setDefault_function_value( &::QLocale::setDefault );
            
            QLocale_exposer.def( 
                "setDefault"
                , setDefault_function_value
                , ( bp::arg("locale") ) );
        
        }
        { //::QLocale::setNumberOptions
        
            typedef void ( ::QLocale::*setNumberOptions_function_type )( ::QFlags< QLocale::NumberOption > ) ;
            setNumberOptions_function_type setNumberOptions_function_value( &::QLocale::setNumberOptions );
            
            QLocale_exposer.def( 
                "setNumberOptions"
                , setNumberOptions_function_value
                , ( bp::arg("options") ) );
        
        }
        { //::QLocale::system
        
            typedef ::QLocale ( *system_function_type )(  );
            system_function_type system_function_value( &::QLocale::system );
            
            QLocale_exposer.def( 
                "system"
                , system_function_value );
        
        }
        { //::QLocale::timeFormat
        
            typedef ::QString ( ::QLocale::*timeFormat_function_type )( ::QLocale::FormatType ) const;
            timeFormat_function_type timeFormat_function_value( &::QLocale::timeFormat );
            
            QLocale_exposer.def( 
                "timeFormat"
                , timeFormat_function_value
                , ( bp::arg("format")=::QLocale::LongFormat ) );
        
        }
        { //::QLocale::toDouble
        
            typedef double ( ::QLocale::*toDouble_function_type )( ::QString const &,bool * ) const;
            toDouble_function_type toDouble_function_value( &::QLocale::toDouble );
            
            QLocale_exposer.def( 
                "toDouble"
                , toDouble_function_value
                , ( bp::arg("s"), bp::arg("ok")=bp::object() ) );
        
        }
        { //::QLocale::toFloat
        
            typedef float ( ::QLocale::*toFloat_function_type )( ::QString const &,bool * ) const;
            toFloat_function_type toFloat_function_value( &::QLocale::toFloat );
            
            QLocale_exposer.def( 
                "toFloat"
                , toFloat_function_value
                , ( bp::arg("s"), bp::arg("ok")=bp::object() ) );
        
        }
        { //::QLocale::toInt
        
            typedef int ( ::QLocale::*toInt_function_type )( ::QString const &,bool *,int ) const;
            toInt_function_type toInt_function_value( &::QLocale::toInt );
            
            QLocale_exposer.def( 
                "toInt"
                , toInt_function_value
                , ( bp::arg("s"), bp::arg("ok")=bp::object(), bp::arg("base")=(int)(0) ) );
        
        }
        { //::QLocale::toShort
        
            typedef short int ( ::QLocale::*toShort_function_type )( ::QString const &,bool *,int ) const;
            toShort_function_type toShort_function_value( &::QLocale::toShort );
            
            QLocale_exposer.def( 
                "toShort"
                , toShort_function_value
                , ( bp::arg("s"), bp::arg("ok")=bp::object(), bp::arg("base")=(int)(0) ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( short int ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( ::ushort ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( int ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( ::uint ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( double,char,int ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("i"), bp::arg("f")=(char)('g'), bp::arg("prec")=(int)(6) ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( float,char,int ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("i"), bp::arg("f")=(char)('g'), bp::arg("prec")=(int)(6) ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( ::QDate const &,::QString const & ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("date"), bp::arg("formatStr") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( ::QDate const &,::QLocale::FormatType ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("date"), bp::arg("format") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( ::QTime const &,::QString const & ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("time"), bp::arg("formatStr") ) );
        
        }
        { //::QLocale::toString
        
            typedef ::QString ( ::QLocale::*toString_function_type )( ::QTime const &,::QLocale::FormatType ) const;
            toString_function_type toString_function_value( &::QLocale::toString );
            
            QLocale_exposer.def( 
                "toString"
                , toString_function_value
                , ( bp::arg("time"), bp::arg("format") ) );
        
        }
        { //::QLocale::toUInt
        
            typedef ::uint ( ::QLocale::*toUInt_function_type )( ::QString const &,bool *,int ) const;
            toUInt_function_type toUInt_function_value( &::QLocale::toUInt );
            
            QLocale_exposer.def( 
                "toUInt"
                , toUInt_function_value
                , ( bp::arg("s"), bp::arg("ok")=bp::object(), bp::arg("base")=(int)(0) ) );
        
        }
        { //::QLocale::toUShort
        
            typedef ::ushort ( ::QLocale::*toUShort_function_type )( ::QString const &,bool *,int ) const;
            toUShort_function_type toUShort_function_value( &::QLocale::toUShort );
            
            QLocale_exposer.def( 
                "toUShort"
                , toUShort_function_value
                , ( bp::arg("s"), bp::arg("ok")=bp::object(), bp::arg("base")=(int)(0) ) );
        
        }
        { //::QLocale::zeroDigit
        
            typedef ::QChar ( ::QLocale::*zeroDigit_function_type )(  ) const;
            zeroDigit_function_type zeroDigit_function_value( &::QLocale::zeroDigit );
            
            QLocale_exposer.def( 
                "zeroDigit"
                , zeroDigit_function_value );
        
        }
        QLocale_exposer.staticmethod( "c" );
        QLocale_exposer.staticmethod( "countryToString" );
        QLocale_exposer.staticmethod( "languageToString" );
        QLocale_exposer.staticmethod( "setDefault" );
        QLocale_exposer.staticmethod( "system" );
        QLocale_exposer.def( "__copy__", &__copy__);
        QLocale_exposer.def( "__deepcopy__", &__copy__);
        QLocale_exposer.def( "clone", &__copy__);
    }

}

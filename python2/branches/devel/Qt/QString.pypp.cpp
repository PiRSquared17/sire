// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QString.pypp.hpp"

namespace bp = boost::python;

PyObject* QString__str__(QString const& s);

PyObject* convert(QString const& s);

QString __copy__(const QString &other){ return QString(other); }

void register_QString_class(){

    { //::QString
        typedef bp::class_< QString > QString_exposer_t;
        QString_exposer_t QString_exposer = QString_exposer_t( "QString" );
        bp::scope QString_scope( QString_exposer );
        bp::enum_< QString::NormalizationForm>("NormalizationForm")
            .value("NormalizationForm_D", QString::NormalizationForm_D)
            .value("NormalizationForm_C", QString::NormalizationForm_C)
            .value("NormalizationForm_KD", QString::NormalizationForm_KD)
            .value("NormalizationForm_KC", QString::NormalizationForm_KC)
            .export_values()
            ;
        bp::enum_< QString::SectionFlag>("SectionFlag")
            .value("SectionDefault", QString::SectionDefault)
            .value("SectionSkipEmpty", QString::SectionSkipEmpty)
            .value("SectionIncludeLeadingSep", QString::SectionIncludeLeadingSep)
            .value("SectionIncludeTrailingSep", QString::SectionIncludeTrailingSep)
            .value("SectionCaseInsensitiveSeps", QString::SectionCaseInsensitiveSeps)
            .export_values()
            ;
        bp::enum_< QString::SplitBehavior>("SplitBehavior")
            .value("KeepEmptyParts", QString::KeepEmptyParts)
            .value("SkipEmptyParts", QString::SkipEmptyParts)
            .export_values()
            ;
        QString_exposer.def( bp::init< >() );
        QString_exposer.def( bp::init< QChar const *, int >(( bp::arg("unicode"), bp::arg("size") )) );
        QString_exposer.def( bp::init< QChar >(( bp::arg("c") )) );
        QString_exposer.def( bp::init< int, QChar >(( bp::arg("size"), bp::arg("c") )) );
        QString_exposer.def( bp::init< QString const & >(( bp::arg("arg0") )) );
        { //::QString::append
        
            typedef ::QString & ( ::QString::*append_function_type )( ::QChar ) ;
            append_function_type append_function_value( &::QString::append );
            
            QString_exposer.def( 
                "append"
                , append_function_value
                , ( bp::arg("c") )
                , bp::return_self< >() );
        
        }
        { //::QString::append
        
            typedef ::QString & ( ::QString::*append_function_type )( ::QString const & ) ;
            append_function_type append_function_value( &::QString::append );
            
            QString_exposer.def( 
                "append"
                , append_function_value
                , ( bp::arg("s") )
                , bp::return_self< >() );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( long int,int,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldwidth")=(int)(0), bp::arg("base")=(int)(10), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::ulong,int,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldwidth")=(int)(0), bp::arg("base")=(int)(10), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( int,int,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldWidth")=(int)(0), bp::arg("base")=(int)(10), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::uint,int,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldWidth")=(int)(0), bp::arg("base")=(int)(10), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( double,int,char,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldWidth")=(int)(0), bp::arg("fmt")=(char)('g'), bp::arg("prec")=(int)(-0x00000000000000001), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( char,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldWidth")=(int)(0), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::QChar,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldWidth")=(int)(0), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::QString const &,int,::QChar const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a"), bp::arg("fieldWidth")=(int)(0), bp::arg("fillChar")=' ' ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::QString const &,::QString const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a1"), bp::arg("a2") ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::QString const &,::QString const &,::QString const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a1"), bp::arg("a2"), bp::arg("a3") ) );
        
        }
        { //::QString::arg
        
            typedef ::QString ( ::QString::*arg_function_type )( ::QString const &,::QString const &,::QString const &,::QString const & ) const;
            arg_function_type arg_function_value( &::QString::arg );
            
            QString_exposer.def( 
                "arg"
                , arg_function_value
                , ( bp::arg("a1"), bp::arg("a2"), bp::arg("a3"), bp::arg("a4") ) );
        
        }
        { //::QString::at
        
            typedef ::QChar const ( ::QString::*at_function_type )( int ) const;
            at_function_type at_function_value( &::QString::at );
            
            QString_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QString::capacity
        
            typedef int ( ::QString::*capacity_function_type )(  ) const;
            capacity_function_type capacity_function_value( &::QString::capacity );
            
            QString_exposer.def( 
                "capacity"
                , capacity_function_value );
        
        }
        { //::QString::chop
        
            typedef void ( ::QString::*chop_function_type )( int ) ;
            chop_function_type chop_function_value( &::QString::chop );
            
            QString_exposer.def( 
                "chop"
                , chop_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::QString::clear
        
            typedef void ( ::QString::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::QString::clear );
            
            QString_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::QString::compare
        
            typedef int ( ::QString::*compare_function_type )( ::QString const & ) const;
            compare_function_type compare_function_value( &::QString::compare );
            
            QString_exposer.def( 
                "compare"
                , compare_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::QString::compare
        
            typedef int ( ::QString::*compare_function_type )( ::QString const &,::Qt::CaseSensitivity ) const;
            compare_function_type compare_function_value( &::QString::compare );
            
            QString_exposer.def( 
                "compare"
                , compare_function_value
                , ( bp::arg("s"), bp::arg("cs") ) );
        
        }
        { //::QString::compare
        
            typedef int ( *compare_function_type )( ::QString const &,::QString const & );
            compare_function_type compare_function_value( &::QString::compare );
            
            QString_exposer.def( 
                "compare"
                , compare_function_value
                , ( bp::arg("s1"), bp::arg("s2") ) );
        
        }
        { //::QString::compare
        
            typedef int ( *compare_function_type )( ::QString const &,::QString const &,::Qt::CaseSensitivity );
            compare_function_type compare_function_value( &::QString::compare );
            
            QString_exposer.def( 
                "compare"
                , compare_function_value
                , ( bp::arg("s1"), bp::arg("s2"), bp::arg("cs") ) );
        
        }
        { //::QString::contains
        
            typedef ::QBool ( ::QString::*contains_function_type )( ::QChar,::Qt::CaseSensitivity ) const;
            contains_function_type contains_function_value( &::QString::contains );
            
            QString_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("c"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::contains
        
            typedef ::QBool ( ::QString::*contains_function_type )( ::QString const &,::Qt::CaseSensitivity ) const;
            contains_function_type contains_function_value( &::QString::contains );
            
            QString_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("s"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::contains
        
            typedef ::QBool ( ::QString::*contains_function_type )( ::QRegExp const & ) const;
            contains_function_type contains_function_value( &::QString::contains );
            
            QString_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("rx") ) );
        
        }
        { //::QString::count
        
            typedef int ( ::QString::*count_function_type )(  ) const;
            count_function_type count_function_value( &::QString::count );
            
            QString_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::QString::count
        
            typedef int ( ::QString::*count_function_type )( ::QChar,::Qt::CaseSensitivity ) const;
            count_function_type count_function_value( &::QString::count );
            
            QString_exposer.def( 
                "count"
                , count_function_value
                , ( bp::arg("c"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::count
        
            typedef int ( ::QString::*count_function_type )( ::QString const &,::Qt::CaseSensitivity ) const;
            count_function_type count_function_value( &::QString::count );
            
            QString_exposer.def( 
                "count"
                , count_function_value
                , ( bp::arg("s"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::count
        
            typedef int ( ::QString::*count_function_type )( ::QRegExp const & ) const;
            count_function_type count_function_value( &::QString::count );
            
            QString_exposer.def( 
                "count"
                , count_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::QString::detach
        
            typedef void ( ::QString::*detach_function_type )(  ) ;
            detach_function_type detach_function_value( &::QString::detach );
            
            QString_exposer.def( 
                "detach"
                , detach_function_value );
        
        }
        { //::QString::endsWith
        
            typedef bool ( ::QString::*endsWith_function_type )( ::QString const &,::Qt::CaseSensitivity ) const;
            endsWith_function_type endsWith_function_value( &::QString::endsWith );
            
            QString_exposer.def( 
                "endsWith"
                , endsWith_function_value
                , ( bp::arg("s"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::endsWith
        
            typedef bool ( ::QString::*endsWith_function_type )( ::QChar const &,::Qt::CaseSensitivity ) const;
            endsWith_function_type endsWith_function_value( &::QString::endsWith );
            
            QString_exposer.def( 
                "endsWith"
                , endsWith_function_value
                , ( bp::arg("c"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::fill
        
            typedef ::QString & ( ::QString::*fill_function_type )( ::QChar,int ) ;
            fill_function_type fill_function_value( &::QString::fill );
            
            QString_exposer.def( 
                "fill"
                , fill_function_value
                , ( bp::arg("c"), bp::arg("size")=(int)(-0x00000000000000001) )
                , bp::return_self< >() );
        
        }
        { //::QString::fromAscii
        
            typedef ::QString ( *fromAscii_function_type )( char const *,int );
            fromAscii_function_type fromAscii_function_value( &::QString::fromAscii );
            
            QString_exposer.def( 
                "fromAscii"
                , fromAscii_function_value
                , ( bp::arg("arg0"), bp::arg("size")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::fromLatin1
        
            typedef ::QString ( *fromLatin1_function_type )( char const *,int );
            fromLatin1_function_type fromLatin1_function_value( &::QString::fromLatin1 );
            
            QString_exposer.def( 
                "fromLatin1"
                , fromLatin1_function_value
                , ( bp::arg("arg0"), bp::arg("size")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::fromLocal8Bit
        
            typedef ::QString ( *fromLocal8Bit_function_type )( char const *,int );
            fromLocal8Bit_function_type fromLocal8Bit_function_value( &::QString::fromLocal8Bit );
            
            QString_exposer.def( 
                "fromLocal8Bit"
                , fromLocal8Bit_function_value
                , ( bp::arg("arg0"), bp::arg("size")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::fromRawData
        
            typedef ::QString ( *fromRawData_function_type )( ::QChar const *,int );
            fromRawData_function_type fromRawData_function_value( &::QString::fromRawData );
            
            QString_exposer.def( 
                "fromRawData"
                , fromRawData_function_value
                , ( bp::arg("arg0"), bp::arg("size") ) );
        
        }
        { //::QString::fromUcs4
        
            typedef ::QString ( *fromUcs4_function_type )( ::uint const *,int );
            fromUcs4_function_type fromUcs4_function_value( &::QString::fromUcs4 );
            
            QString_exposer.def( 
                "fromUcs4"
                , fromUcs4_function_value
                , ( bp::arg("arg0"), bp::arg("size")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::fromUtf16
        
            typedef ::QString ( *fromUtf16_function_type )( ::ushort const *,int );
            fromUtf16_function_type fromUtf16_function_value( &::QString::fromUtf16 );
            
            QString_exposer.def( 
                "fromUtf16"
                , fromUtf16_function_value
                , ( bp::arg("arg0"), bp::arg("size")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::fromUtf8
        
            typedef ::QString ( *fromUtf8_function_type )( char const *,int );
            fromUtf8_function_type fromUtf8_function_value( &::QString::fromUtf8 );
            
            QString_exposer.def( 
                "fromUtf8"
                , fromUtf8_function_value
                , ( bp::arg("arg0"), bp::arg("size")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::indexOf
        
            typedef int ( ::QString::*indexOf_function_type )( ::QChar,int,::Qt::CaseSensitivity ) const;
            indexOf_function_type indexOf_function_value( &::QString::indexOf );
            
            QString_exposer.def( 
                "indexOf"
                , indexOf_function_value
                , ( bp::arg("c"), bp::arg("from")=(int)(0), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::indexOf
        
            typedef int ( ::QString::*indexOf_function_type )( ::QString const &,int,::Qt::CaseSensitivity ) const;
            indexOf_function_type indexOf_function_value( &::QString::indexOf );
            
            QString_exposer.def( 
                "indexOf"
                , indexOf_function_value
                , ( bp::arg("s"), bp::arg("from")=(int)(0), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::indexOf
        
            typedef int ( ::QString::*indexOf_function_type )( ::QRegExp const &,int ) const;
            indexOf_function_type indexOf_function_value( &::QString::indexOf );
            
            QString_exposer.def( 
                "indexOf"
                , indexOf_function_value
                , ( bp::arg("arg0"), bp::arg("from")=(int)(0) ) );
        
        }
        { //::QString::insert
        
            typedef ::QString & ( ::QString::*insert_function_type )( int,::QChar ) ;
            insert_function_type insert_function_value( &::QString::insert );
            
            QString_exposer.def( 
                "insert"
                , insert_function_value
                , ( bp::arg("i"), bp::arg("c") )
                , bp::return_self< >() );
        
        }
        { //::QString::insert
        
            typedef ::QString & ( ::QString::*insert_function_type )( int,::QChar const *,int ) ;
            insert_function_type insert_function_value( &::QString::insert );
            
            QString_exposer.def( 
                "insert"
                , insert_function_value
                , ( bp::arg("i"), bp::arg("uc"), bp::arg("len") )
                , bp::return_self< >() );
        
        }
        { //::QString::insert
        
            typedef ::QString & ( ::QString::*insert_function_type )( int,::QString const & ) ;
            insert_function_type insert_function_value( &::QString::insert );
            
            QString_exposer.def( 
                "insert"
                , insert_function_value
                , ( bp::arg("i"), bp::arg("s") )
                , bp::return_self< >() );
        
        }
        { //::QString::insert
        
            typedef ::QString & ( ::QString::*insert_function_type )( int,::QLatin1String const & ) ;
            insert_function_type insert_function_value( &::QString::insert );
            
            QString_exposer.def( 
                "insert"
                , insert_function_value
                , ( bp::arg("i"), bp::arg("s") )
                , bp::return_self< >() );
        
        }
        { //::QString::isDetached
        
            typedef bool ( ::QString::*isDetached_function_type )(  ) const;
            isDetached_function_type isDetached_function_value( &::QString::isDetached );
            
            QString_exposer.def( 
                "isDetached"
                , isDetached_function_value );
        
        }
        { //::QString::isEmpty
        
            typedef bool ( ::QString::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::QString::isEmpty );
            
            QString_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::QString::isNull
        
            typedef bool ( ::QString::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::QString::isNull );
            
            QString_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::QString::lastIndexOf
        
            typedef int ( ::QString::*lastIndexOf_function_type )( ::QChar,int,::Qt::CaseSensitivity ) const;
            lastIndexOf_function_type lastIndexOf_function_value( &::QString::lastIndexOf );
            
            QString_exposer.def( 
                "lastIndexOf"
                , lastIndexOf_function_value
                , ( bp::arg("c"), bp::arg("from")=(int)(-0x00000000000000001), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::lastIndexOf
        
            typedef int ( ::QString::*lastIndexOf_function_type )( ::QString const &,int,::Qt::CaseSensitivity ) const;
            lastIndexOf_function_type lastIndexOf_function_value( &::QString::lastIndexOf );
            
            QString_exposer.def( 
                "lastIndexOf"
                , lastIndexOf_function_value
                , ( bp::arg("s"), bp::arg("from")=(int)(-0x00000000000000001), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::lastIndexOf
        
            typedef int ( ::QString::*lastIndexOf_function_type )( ::QRegExp const &,int ) const;
            lastIndexOf_function_type lastIndexOf_function_value( &::QString::lastIndexOf );
            
            QString_exposer.def( 
                "lastIndexOf"
                , lastIndexOf_function_value
                , ( bp::arg("arg0"), bp::arg("from")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::left
        
            typedef ::QString ( ::QString::*left_function_type )( int ) const;
            left_function_type left_function_value( &::QString::left );
            
            QString_exposer.def( 
                "left"
                , left_function_value
                , ( bp::arg("len") ) );
        
        }
        { //::QString::leftJustified
        
            typedef ::QString ( ::QString::*leftJustified_function_type )( int,::QChar,bool ) const;
            leftJustified_function_type leftJustified_function_value( &::QString::leftJustified );
            
            QString_exposer.def( 
                "leftJustified"
                , leftJustified_function_value
                , ( bp::arg("width"), bp::arg("fill")=' ', bp::arg("trunc")=(bool)(false) ) );
        
        }
        { //::QString::length
        
            typedef int ( ::QString::*length_function_type )(  ) const;
            length_function_type length_function_value( &::QString::length );
            
            QString_exposer.def( 
                "length"
                , length_function_value );
        
        }
        { //::QString::localeAwareCompare
        
            typedef int ( ::QString::*localeAwareCompare_function_type )( ::QString const & ) const;
            localeAwareCompare_function_type localeAwareCompare_function_value( &::QString::localeAwareCompare );
            
            QString_exposer.def( 
                "localeAwareCompare"
                , localeAwareCompare_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::QString::localeAwareCompare
        
            typedef int ( *localeAwareCompare_function_type )( ::QString const &,::QString const & );
            localeAwareCompare_function_type localeAwareCompare_function_value( &::QString::localeAwareCompare );
            
            QString_exposer.def( 
                "localeAwareCompare"
                , localeAwareCompare_function_value
                , ( bp::arg("s1"), bp::arg("s2") ) );
        
        }
        { //::QString::mid
        
            typedef ::QString ( ::QString::*mid_function_type )( int,int ) const;
            mid_function_type mid_function_value( &::QString::mid );
            
            QString_exposer.def( 
                "mid"
                , mid_function_value
                , ( bp::arg("i"), bp::arg("len")=(int)(-0x00000000000000001) ) );
        
        }
        { //::QString::normalized
        
            typedef ::QString ( ::QString::*normalized_function_type )( ::QString::NormalizationForm ) const;
            normalized_function_type normalized_function_value( &::QString::normalized );
            
            QString_exposer.def( 
                "normalized"
                , normalized_function_value
                , ( bp::arg("mode") ) );
        
        }
        { //::QString::normalized
        
            typedef ::QString ( ::QString::*normalized_function_type )( ::QString::NormalizationForm,::QChar::UnicodeVersion ) const;
            normalized_function_type normalized_function_value( &::QString::normalized );
            
            QString_exposer.def( 
                "normalized"
                , normalized_function_value
                , ( bp::arg("mode"), bp::arg("version") ) );
        
        }
        { //::QString::number
        
            typedef ::QString ( *number_function_type )( int,int );
            number_function_type number_function_value( &::QString::number );
            
            QString_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::number
        
            typedef ::QString ( *number_function_type )( ::uint,int );
            number_function_type number_function_value( &::QString::number );
            
            QString_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::number
        
            typedef ::QString ( *number_function_type )( long int,int );
            number_function_type number_function_value( &::QString::number );
            
            QString_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::number
        
            typedef ::QString ( *number_function_type )( ::ulong,int );
            number_function_type number_function_value( &::QString::number );
            
            QString_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::number
        
            typedef ::QString ( *number_function_type )( double,char,int );
            number_function_type number_function_value( &::QString::number );
            
            QString_exposer.def( 
                "number"
                , number_function_value
                , ( bp::arg("arg0"), bp::arg("f")=(char)('g'), bp::arg("prec")=(int)(6) ) );
        
        }
        QString_exposer.def( bp::self != bp::self );
        QString_exposer.def( bp::self < bp::self );
        QString_exposer.def( bp::self <= bp::self );
        { //::QString::operator=
        
            typedef ::QString & ( ::QString::*assign_function_type )( ::QString const & ) ;
            assign_function_type assign_function_value( &::QString::operator= );
            
            QString_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("arg0") )
                , bp::return_self< >() );
        
        }
        QString_exposer.def( bp::self == bp::self );
        QString_exposer.def( bp::self > bp::self );
        QString_exposer.def( bp::self >= bp::self );
        { //::QString::operator[]
        
            typedef ::QChar const ( ::QString::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::QString::operator[] );
            
            QString_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QString::operator[]
        
            typedef ::QChar const ( ::QString::*__getitem___function_type )( ::uint ) const;
            __getitem___function_type __getitem___function_value( &::QString::operator[] );
            
            QString_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::QString::prepend
        
            typedef ::QString & ( ::QString::*prepend_function_type )( ::QChar ) ;
            prepend_function_type prepend_function_value( &::QString::prepend );
            
            QString_exposer.def( 
                "prepend"
                , prepend_function_value
                , ( bp::arg("c") )
                , bp::return_self< >() );
        
        }
        { //::QString::prepend
        
            typedef ::QString & ( ::QString::*prepend_function_type )( ::QString const & ) ;
            prepend_function_type prepend_function_value( &::QString::prepend );
            
            QString_exposer.def( 
                "prepend"
                , prepend_function_value
                , ( bp::arg("s") )
                , bp::return_self< >() );
        
        }
        { //::QString::push_back
        
            typedef void ( ::QString::*push_back_function_type )( ::QChar ) ;
            push_back_function_type push_back_function_value( &::QString::push_back );
            
            QString_exposer.def( 
                "push_back"
                , push_back_function_value
                , ( bp::arg("c") ) );
        
        }
        { //::QString::push_back
        
            typedef void ( ::QString::*push_back_function_type )( ::QString const & ) ;
            push_back_function_type push_back_function_value( &::QString::push_back );
            
            QString_exposer.def( 
                "push_back"
                , push_back_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::QString::push_front
        
            typedef void ( ::QString::*push_front_function_type )( ::QChar ) ;
            push_front_function_type push_front_function_value( &::QString::push_front );
            
            QString_exposer.def( 
                "push_front"
                , push_front_function_value
                , ( bp::arg("c") ) );
        
        }
        { //::QString::push_front
        
            typedef void ( ::QString::*push_front_function_type )( ::QString const & ) ;
            push_front_function_type push_front_function_value( &::QString::push_front );
            
            QString_exposer.def( 
                "push_front"
                , push_front_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::QString::remove
        
            typedef ::QString & ( ::QString::*remove_function_type )( int,int ) ;
            remove_function_type remove_function_value( &::QString::remove );
            
            QString_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("i"), bp::arg("len") )
                , bp::return_self< >() );
        
        }
        { //::QString::remove
        
            typedef ::QString & ( ::QString::*remove_function_type )( ::QChar,::Qt::CaseSensitivity ) ;
            remove_function_type remove_function_value( &::QString::remove );
            
            QString_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("c"), bp::arg("cs")=::Qt::CaseSensitive )
                , bp::return_self< >() );
        
        }
        { //::QString::remove
        
            typedef ::QString & ( ::QString::*remove_function_type )( ::QString const &,::Qt::CaseSensitivity ) ;
            remove_function_type remove_function_value( &::QString::remove );
            
            QString_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("s"), bp::arg("cs")=::Qt::CaseSensitive )
                , bp::return_self< >() );
        
        }
        { //::QString::remove
        
            typedef ::QString & ( ::QString::*remove_function_type )( ::QRegExp const & ) ;
            remove_function_type remove_function_value( &::QString::remove );
            
            QString_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("rx") )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( int,int,::QChar ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("i"), bp::arg("len"), bp::arg("after") )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( int,int,::QChar const *,int ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("i"), bp::arg("len"), bp::arg("s"), bp::arg("slen") )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( int,int,::QString const & ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("i"), bp::arg("len"), bp::arg("after") )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( ::QChar,::QChar,::Qt::CaseSensitivity ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("before"), bp::arg("after"), bp::arg("cs")=::Qt::CaseSensitive )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( ::QChar,::QString const &,::Qt::CaseSensitivity ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("c"), bp::arg("after"), bp::arg("cs")=::Qt::CaseSensitive )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( ::QString const &,::QString const &,::Qt::CaseSensitivity ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("before"), bp::arg("after"), bp::arg("cs")=::Qt::CaseSensitive )
                , bp::return_self< >() );
        
        }
        { //::QString::replace
        
            typedef ::QString & ( ::QString::*replace_function_type )( ::QRegExp const &,::QString const & ) ;
            replace_function_type replace_function_value( &::QString::replace );
            
            QString_exposer.def( 
                "replace"
                , replace_function_value
                , ( bp::arg("rx"), bp::arg("after") )
                , bp::return_self< >() );
        
        }
        { //::QString::reserve
        
            typedef void ( ::QString::*reserve_function_type )( int ) ;
            reserve_function_type reserve_function_value( &::QString::reserve );
            
            QString_exposer.def( 
                "reserve"
                , reserve_function_value
                , ( bp::arg("size") ) );
        
        }
        { //::QString::resize
        
            typedef void ( ::QString::*resize_function_type )( int ) ;
            resize_function_type resize_function_value( &::QString::resize );
            
            QString_exposer.def( 
                "resize"
                , resize_function_value
                , ( bp::arg("size") ) );
        
        }
        { //::QString::right
        
            typedef ::QString ( ::QString::*right_function_type )( int ) const;
            right_function_type right_function_value( &::QString::right );
            
            QString_exposer.def( 
                "right"
                , right_function_value
                , ( bp::arg("len") ) );
        
        }
        { //::QString::rightJustified
        
            typedef ::QString ( ::QString::*rightJustified_function_type )( int,::QChar,bool ) const;
            rightJustified_function_type rightJustified_function_value( &::QString::rightJustified );
            
            QString_exposer.def( 
                "rightJustified"
                , rightJustified_function_value
                , ( bp::arg("width"), bp::arg("fill")=' ', bp::arg("trunc")=(bool)(false) ) );
        
        }
        { //::QString::section
        
            typedef ::QString ( ::QString::*section_function_type )( ::QChar,int,int,::QFlags< QString::SectionFlag > ) const;
            section_function_type section_function_value( &::QString::section );
            
            QString_exposer.def( 
                "section"
                , section_function_value
                , ( bp::arg("sep"), bp::arg("start"), bp::arg("end"), bp::arg("flags") ) );
        
        }
        { //::QString::section
        
            typedef ::QString ( ::QString::*section_function_type )( ::QString const &,int,int,::QFlags< QString::SectionFlag > ) const;
            section_function_type section_function_value( &::QString::section );
            
            QString_exposer.def( 
                "section"
                , section_function_value
                , ( bp::arg("in_sep"), bp::arg("start"), bp::arg("end"), bp::arg("flags") ) );
        
        }
        { //::QString::section
        
            typedef ::QString ( ::QString::*section_function_type )( ::QRegExp const &,int,int,::QFlags< QString::SectionFlag > ) const;
            section_function_type section_function_value( &::QString::section );
            
            QString_exposer.def( 
                "section"
                , section_function_value
                , ( bp::arg("reg"), bp::arg("start"), bp::arg("end"), bp::arg("flags") ) );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( short int,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( ::ushort,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( int,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( ::uint,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( long int,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( ::ulong,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("base")=(int)(10) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( float,char,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("f")=(char)('g'), bp::arg("prec")=(int)(6) )
                , bp::return_self< >() );
        
        }
        { //::QString::setNum
        
            typedef ::QString & ( ::QString::*setNum_function_type )( double,char,int ) ;
            setNum_function_type setNum_function_value( &::QString::setNum );
            
            QString_exposer.def( 
                "setNum"
                , setNum_function_value
                , ( bp::arg("arg0"), bp::arg("f")=(char)('g'), bp::arg("prec")=(int)(6) )
                , bp::return_self< >() );
        
        }
        { //::QString::setUnicode
        
            typedef ::QString & ( ::QString::*setUnicode_function_type )( ::QChar const *,int ) ;
            setUnicode_function_type setUnicode_function_value( &::QString::setUnicode );
            
            QString_exposer.def( 
                "setUnicode"
                , setUnicode_function_value
                , ( bp::arg("unicode"), bp::arg("size") )
                , bp::return_self< >() );
        
        }
        { //::QString::simplified
        
            typedef ::QString ( ::QString::*simplified_function_type )(  ) const;
            simplified_function_type simplified_function_value( &::QString::simplified );
            
            QString_exposer.def( 
                "simplified"
                , simplified_function_value );
        
        }
        { //::QString::size
        
            typedef int ( ::QString::*size_function_type )(  ) const;
            size_function_type size_function_value( &::QString::size );
            
            QString_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::QString::split
        
            typedef ::QStringList ( ::QString::*split_function_type )( ::QString const &,::QString::SplitBehavior,::Qt::CaseSensitivity ) const;
            split_function_type split_function_value( &::QString::split );
            
            QString_exposer.def( 
                "split"
                , split_function_value
                , ( bp::arg("sep"), bp::arg("behavior"), bp::arg("cs") ) );
        
        }
        { //::QString::split
        
            typedef ::QStringList ( ::QString::*split_function_type )( ::QChar const &,::QString::SplitBehavior,::Qt::CaseSensitivity ) const;
            split_function_type split_function_value( &::QString::split );
            
            QString_exposer.def( 
                "split"
                , split_function_value
                , ( bp::arg("sep"), bp::arg("behavior"), bp::arg("cs") ) );
        
        }
        { //::QString::split
        
            typedef ::QStringList ( ::QString::*split_function_type )( ::QRegExp const &,::QString::SplitBehavior ) const;
            split_function_type split_function_value( &::QString::split );
            
            QString_exposer.def( 
                "split"
                , split_function_value
                , ( bp::arg("sep"), bp::arg("behavior") ) );
        
        }
        { //::QString::squeeze
        
            typedef void ( ::QString::*squeeze_function_type )(  ) ;
            squeeze_function_type squeeze_function_value( &::QString::squeeze );
            
            QString_exposer.def( 
                "squeeze"
                , squeeze_function_value );
        
        }
        { //::QString::startsWith
        
            typedef bool ( ::QString::*startsWith_function_type )( ::QString const &,::Qt::CaseSensitivity ) const;
            startsWith_function_type startsWith_function_value( &::QString::startsWith );
            
            QString_exposer.def( 
                "startsWith"
                , startsWith_function_value
                , ( bp::arg("s"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::startsWith
        
            typedef bool ( ::QString::*startsWith_function_type )( ::QChar const &,::Qt::CaseSensitivity ) const;
            startsWith_function_type startsWith_function_value( &::QString::startsWith );
            
            QString_exposer.def( 
                "startsWith"
                , startsWith_function_value
                , ( bp::arg("c"), bp::arg("cs")=::Qt::CaseSensitive ) );
        
        }
        { //::QString::toAscii
        
            typedef ::QByteArray ( ::QString::*toAscii_function_type )(  ) const;
            toAscii_function_type toAscii_function_value( &::QString::toAscii );
            
            QString_exposer.def( 
                "toAscii"
                , toAscii_function_value );
        
        }
        { //::QString::toDouble
        
            typedef double ( ::QString::*toDouble_function_type )( bool * ) const;
            toDouble_function_type toDouble_function_value( &::QString::toDouble );
            
            QString_exposer.def( 
                "toDouble"
                , toDouble_function_value
                , ( bp::arg("ok")=bp::object() ) );
        
        }
        { //::QString::toFloat
        
            typedef float ( ::QString::*toFloat_function_type )( bool * ) const;
            toFloat_function_type toFloat_function_value( &::QString::toFloat );
            
            QString_exposer.def( 
                "toFloat"
                , toFloat_function_value
                , ( bp::arg("ok")=bp::object() ) );
        
        }
        { //::QString::toInt
        
            typedef int ( ::QString::*toInt_function_type )( bool *,int ) const;
            toInt_function_type toInt_function_value( &::QString::toInt );
            
            QString_exposer.def( 
                "toInt"
                , toInt_function_value
                , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::toLatin1
        
            typedef ::QByteArray ( ::QString::*toLatin1_function_type )(  ) const;
            toLatin1_function_type toLatin1_function_value( &::QString::toLatin1 );
            
            QString_exposer.def( 
                "toLatin1"
                , toLatin1_function_value );
        
        }
        { //::QString::toLocal8Bit
        
            typedef ::QByteArray ( ::QString::*toLocal8Bit_function_type )(  ) const;
            toLocal8Bit_function_type toLocal8Bit_function_value( &::QString::toLocal8Bit );
            
            QString_exposer.def( 
                "toLocal8Bit"
                , toLocal8Bit_function_value );
        
        }
        { //::QString::toLong
        
            typedef long int ( ::QString::*toLong_function_type )( bool *,int ) const;
            toLong_function_type toLong_function_value( &::QString::toLong );
            
            QString_exposer.def( 
                "toLong"
                , toLong_function_value
                , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::toLower
        
            typedef ::QString ( ::QString::*toLower_function_type )(  ) const;
            toLower_function_type toLower_function_value( &::QString::toLower );
            
            QString_exposer.def( 
                "toLower"
                , toLower_function_value );
        
        }
        { //::QString::toShort
        
            typedef short int ( ::QString::*toShort_function_type )( bool *,int ) const;
            toShort_function_type toShort_function_value( &::QString::toShort );
            
            QString_exposer.def( 
                "toShort"
                , toShort_function_value
                , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::toUInt
        
            typedef ::uint ( ::QString::*toUInt_function_type )( bool *,int ) const;
            toUInt_function_type toUInt_function_value( &::QString::toUInt );
            
            QString_exposer.def( 
                "toUInt"
                , toUInt_function_value
                , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::toULong
        
            typedef ::ulong ( ::QString::*toULong_function_type )( bool *,int ) const;
            toULong_function_type toULong_function_value( &::QString::toULong );
            
            QString_exposer.def( 
                "toULong"
                , toULong_function_value
                , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::toUShort
        
            typedef ::ushort ( ::QString::*toUShort_function_type )( bool *,int ) const;
            toUShort_function_type toUShort_function_value( &::QString::toUShort );
            
            QString_exposer.def( 
                "toUShort"
                , toUShort_function_value
                , ( bp::arg("ok")=bp::object(), bp::arg("base")=(int)(10) ) );
        
        }
        { //::QString::toUpper
        
            typedef ::QString ( ::QString::*toUpper_function_type )(  ) const;
            toUpper_function_type toUpper_function_value( &::QString::toUpper );
            
            QString_exposer.def( 
                "toUpper"
                , toUpper_function_value );
        
        }
        { //::QString::toUtf8
        
            typedef ::QByteArray ( ::QString::*toUtf8_function_type )(  ) const;
            toUtf8_function_type toUtf8_function_value( &::QString::toUtf8 );
            
            QString_exposer.def( 
                "toUtf8"
                , toUtf8_function_value );
        
        }
        { //::QString::trimmed
        
            typedef ::QString ( ::QString::*trimmed_function_type )(  ) const;
            trimmed_function_type trimmed_function_value( &::QString::trimmed );
            
            QString_exposer.def( 
                "trimmed"
                , trimmed_function_value );
        
        }
        { //::QString::truncate
        
            typedef void ( ::QString::*truncate_function_type )( int ) ;
            truncate_function_type truncate_function_value( &::QString::truncate );
            
            QString_exposer.def( 
                "truncate"
                , truncate_function_value
                , ( bp::arg("pos") ) );
        
        }
        QString_exposer.staticmethod( "compare" );
        QString_exposer.staticmethod( "fromAscii" );
        QString_exposer.staticmethod( "fromLatin1" );
        QString_exposer.staticmethod( "fromLocal8Bit" );
        QString_exposer.staticmethod( "fromRawData" );
        QString_exposer.staticmethod( "fromUcs4" );
        QString_exposer.staticmethod( "fromUtf16" );
        QString_exposer.staticmethod( "fromUtf8" );
        QString_exposer.staticmethod( "localeAwareCompare" );
        QString_exposer.staticmethod( "number" );
        QString_exposer.def("__str__", &QString__str__ );
        QString_exposer.def("__repr__", &QString__str__ );
        QString_exposer.def("__unicode__", &convert );
        QString_exposer.def( "__copy__", &__copy__);
        QString_exposer.def( "__deepcopy__", &__copy__);
        QString_exposer.def( "clone", &__copy__);
    }

}

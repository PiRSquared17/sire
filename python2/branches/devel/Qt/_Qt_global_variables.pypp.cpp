// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QByteArray>
#include <QDateTime>
#include <QUuid>
#include <QBitArray>
#include "_Qt_global_variables.pypp.hpp"

namespace bp = boost::python;

void register_global_variables(){

    bp::scope().attr("_S_threshold") = (int)std::_S_threshold;

    bp::scope().attr("_S_chunk_size") = (int)std::_S_chunk_size;

    bp::scope().attr("q_static_assert_result488") = (int)QtPrivate::q_static_assert_result488;

    bp::scope().attr("q_static_assert_result484") = (int)QtPrivate::q_static_assert_result484;

    bp::scope().attr("q_static_assert_result494") = (int)QtPrivate::q_static_assert_result494;

    bp::scope().attr("q_static_assert_result503") = (int)QtPrivate::q_static_assert_result503;

    bp::scope().attr("q_static_assert_result485") = (int)QtPrivate::q_static_assert_result485;

    bp::scope().attr("q_static_assert_result487") = (int)QtPrivate::q_static_assert_result487;

    bp::scope().attr("q_static_assert_result500") = (int)QtPrivate::q_static_assert_result500;

    bp::scope().attr("q_static_assert_result490") = (int)QtPrivate::q_static_assert_result490;

    bp::scope().attr("q_static_assert_result491") = (int)QtPrivate::q_static_assert_result491;

    bp::scope().attr("q_static_assert_result493") = (int)QtPrivate::q_static_assert_result493;

    bp::scope().attr("q_static_assert_result496") = (int)QtPrivate::q_static_assert_result496;

    bp::scope().attr("q_static_assert_result497") = (int)QtPrivate::q_static_assert_result497;

    bp::scope().attr("q_static_assert_result499") = (int)QtPrivate::q_static_assert_result499;

    bp::scope().attr("q_static_assert_result502") = (int)QtPrivate::q_static_assert_result502;

    bp::scope().attr("q_static_assert_result505") = (int)QtPrivate::q_static_assert_result505;

    bp::scope().attr("q_static_assert_result506") = (int)QtPrivate::q_static_assert_result506;

    bp::scope().attr("Q_COMPLEX_TYPE") = (int)Q_COMPLEX_TYPE;
    bp::scope().attr("Q_PRIMITIVE_TYPE") = (int)Q_PRIMITIVE_TYPE;
    bp::scope().attr("Q_STATIC_TYPE") = (int)Q_STATIC_TYPE;
    bp::scope().attr("Q_MOVABLE_TYPE") = (int)Q_MOVABLE_TYPE;
    bp::scope().attr("Q_DUMMY_TYPE") = (int)Q_DUMMY_TYPE;

    bp::scope().attr("q_static_assert_result151") = (int)q_static_assert_result151;

}

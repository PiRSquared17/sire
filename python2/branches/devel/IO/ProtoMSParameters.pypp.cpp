// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ProtoMSParameters.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/findexe.h"

#include "SireBase/process.h"

#include "SireBase/tempdir.h"

#include "SireCAS/trigfuncs.h"

#include "SireError/errors.h"

#include "SireMM/atomljs.h"

#include "SireMM/cljnbpairs.h"

#include "SireMM/internalff.h"

#include "SireMM/ljparameter.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atomeditor.h"

#include "SireMol/atomname.h"

#include "SireMol/errors.h"

#include "SireMol/groupatomids.h"

#include "SireMol/molecule.h"

#include "SireMol/molecules.h"

#include "SireMol/moleditor.h"

#include "SireMol/mover.hpp"

#include "SireMol/reseditor.h"

#include "SireMol/resname.h"

#include "SireMol/resnum.h"

#include "SireMol/selector.hpp"

#include "SireMove/errors.h"

#include "SireMove/zmatrix.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "pdb.h"

#include "protoms.h"

#include <QByteArray>

#include <QDir>

#include <QFile>

#include <QFileInfo>

#include <QTextStream>

#include "protoms.h"

SireIO::ProtoMSParameters __copy__(const SireIO::ProtoMSParameters &other){ return SireIO::ProtoMSParameters(other); }

const char* pvt_get_name(const SireIO::ProtoMSParameters&){ return "SireIO::ProtoMSParameters";}

void register_ProtoMSParameters_class(){

    { //::SireIO::ProtoMSParameters
        typedef bp::class_< SireIO::ProtoMSParameters > ProtoMSParameters_exposer_t;
        ProtoMSParameters_exposer_t ProtoMSParameters_exposer = ProtoMSParameters_exposer_t( "ProtoMSParameters" );
        bp::scope ProtoMSParameters_scope( ProtoMSParameters_exposer );
        ProtoMSParameters_exposer.def( bp::init< >() );
        { //::SireIO::ProtoMSParameters::angle
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*angle_function_type )(  ) const;
            angle_function_type angle_function_value( &::SireIO::ProtoMSParameters::angle );
            
            ProtoMSParameters_exposer.def( 
                "angle"
                , angle_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::bond
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*bond_function_type )(  ) const;
            bond_function_type bond_function_value( &::SireIO::ProtoMSParameters::bond );
            
            ProtoMSParameters_exposer.def( 
                "bond"
                , bond_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::charge
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*charge_function_type )(  ) const;
            charge_function_type charge_function_value( &::SireIO::ProtoMSParameters::charge );
            
            ProtoMSParameters_exposer.def( 
                "charge"
                , charge_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::dihedral
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*dihedral_function_type )(  ) const;
            dihedral_function_type dihedral_function_value( &::SireIO::ProtoMSParameters::dihedral );
            
            ProtoMSParameters_exposer.def( 
                "dihedral"
                , dihedral_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::lj
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*lj_function_type )(  ) const;
            lj_function_type lj_function_value( &::SireIO::ProtoMSParameters::lj );
            
            ProtoMSParameters_exposer.def( 
                "lj"
                , lj_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::nonBonded
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*nonBonded_function_type )(  ) const;
            nonBonded_function_type nonBonded_function_value( &::SireIO::ProtoMSParameters::nonBonded );
            
            ProtoMSParameters_exposer.def( 
                "nonBonded"
                , nonBonded_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::ureyBradley
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*ureyBradley_function_type )(  ) const;
            ureyBradley_function_type ureyBradley_function_value( &::SireIO::ProtoMSParameters::ureyBradley );
            
            ProtoMSParameters_exposer.def( 
                "ureyBradley"
                , ureyBradley_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireIO::ProtoMSParameters::zmatrix
        
            typedef ::SireBase::PropertyName const & ( ::SireIO::ProtoMSParameters::*zmatrix_function_type )(  ) const;
            zmatrix_function_type zmatrix_function_value( &::SireIO::ProtoMSParameters::zmatrix );
            
            ProtoMSParameters_exposer.def( 
                "zmatrix"
                , zmatrix_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        ProtoMSParameters_exposer.def( "__copy__", &__copy__);
        ProtoMSParameters_exposer.def( "__deepcopy__", &__copy__);
        ProtoMSParameters_exposer.def( "clone", &__copy__);
        ProtoMSParameters_exposer.def( "__str__", &pvt_get_name);
        ProtoMSParameters_exposer.def( "__repr__", &pvt_get_name);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FlexibilityMaker.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireMol/angleid.h"

#include "SireMol/atom.h"

#include "SireMol/atomeditor.h"

#include "SireMol/bondid.h"

#include "SireMol/dihedralid.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/selector.hpp"

#include "SireMove/flexibility.h"

#include "SireMove/movermove.h"

#include "SireUnits/convert.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "flexibilitymaker.h"

#include <QFile>

#include <QTextStream>

#include "flexibilitymaker.h"

SireIO::FlexibilityMaker __copy__(const SireIO::FlexibilityMaker &other){ return SireIO::FlexibilityMaker(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireIO::FlexibilityMaker&){ return "SireIO::FlexibilityMaker";}

void register_FlexibilityMaker_class(){

    { //::SireIO::FlexibilityMaker
        typedef bp::class_< SireIO::FlexibilityMaker > FlexibilityMaker_exposer_t;
        FlexibilityMaker_exposer_t FlexibilityMaker_exposer = FlexibilityMaker_exposer_t( "FlexibilityMaker" );
        bp::scope FlexibilityMaker_scope( FlexibilityMaker_exposer );
        FlexibilityMaker_exposer.def( bp::init< >() );
        { //::SireIO::FlexibilityMaker::applyTemplates
        
            typedef ::SireMol::Molecule ( ::SireIO::FlexibilityMaker::*applyTemplates_function_type )( ::SireMol::Molecule & ) ;
            applyTemplates_function_type applyTemplates_function_value( &::SireIO::FlexibilityMaker::applyTemplates );
            
            FlexibilityMaker_exposer.def( 
                "applyTemplates"
                , applyTemplates_function_value
                , ( bp::arg("molecule") ) );
        
        }
        { //::SireIO::FlexibilityMaker::loadTemplates
        
            typedef void ( ::SireIO::FlexibilityMaker::*loadTemplates_function_type )( ::QString const & ) ;
            loadTemplates_function_type loadTemplates_function_value( &::SireIO::FlexibilityMaker::loadTemplates );
            
            FlexibilityMaker_exposer.def( 
                "loadTemplates"
                , loadTemplates_function_value
                , ( bp::arg("templatefile") ) );
        
        }
        { //::SireIO::FlexibilityMaker::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::FlexibilityMaker::typeName );
            
            FlexibilityMaker_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireIO::FlexibilityMaker::what
        
            typedef char const * ( ::SireIO::FlexibilityMaker::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireIO::FlexibilityMaker::what );
            
            FlexibilityMaker_exposer.def( 
                "what"
                , what_function_value );
        
        }
        FlexibilityMaker_exposer.staticmethod( "typeName" );
        FlexibilityMaker_exposer.def( "__copy__", &__copy__);
        FlexibilityMaker_exposer.def( "__deepcopy__", &__copy__);
        FlexibilityMaker_exposer.def( "clone", &__copy__);
        FlexibilityMaker_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::FlexibilityMaker >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FlexibilityMaker_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::FlexibilityMaker >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FlexibilityMaker_exposer.def( "__str__", &pvt_get_name);
        FlexibilityMaker_exposer.def( "__repr__", &pvt_get_name);
    }

}

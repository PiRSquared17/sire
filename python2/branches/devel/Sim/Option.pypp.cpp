// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Option.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireSim/option.h"

#include "option.h"

#include <QDebug>

#include <QDir>

#include <QDomDocument>

#include <QDomElement>

#include <QDomNode>

#include <QFile>

#include <QFileInfo>

#include <QHash>

#include <QList>

#include "option.h"

SireSim::Option __copy__(const SireSim::Option &other){ return SireSim::Option(other); }

const char* pvt_get_name(const SireSim::Option&){ return "SireSim::Option";}

void register_Option_class(){

    { //::SireSim::Option
        typedef bp::class_< SireSim::Option, bp::bases< SireSim::Value > > Option_exposer_t;
        Option_exposer_t Option_exposer = Option_exposer_t( "Option", bp::init< >() );
        bp::scope Option_scope( Option_exposer );
        Option_exposer.def( bp::init< QString const &, QString const &, SireSim::Value const &, bp::optional< bool, bool > >(( bp::arg("key"), bp::arg("description"), bp::arg("value"), bp::arg("is_optional")=(bool)(false), bp::arg("allow_multiple")=(bool)(false) )) );
        Option_exposer.def( bp::init< QDomElement, bp::optional< QStringList > >(( bp::arg("elem"), bp::arg("path")=::QStringList( ) )) );
        Option_exposer.def( bp::init< SireSim::Option const & >(( bp::arg("other") )) );
        { //::SireSim::Option::allowMultiple
        
            typedef bool ( ::SireSim::Option::*allowMultiple_function_type )(  ) const;
            allowMultiple_function_type allowMultiple_function_value( &::SireSim::Option::allowMultiple );
            
            Option_exposer.def( 
                "allowMultiple"
                , allowMultiple_function_value );
        
        }
        { //::SireSim::Option::clear
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*clear_function_type )(  ) const;
            clear_function_type clear_function_value( &::SireSim::Option::clear );
            
            Option_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::SireSim::Option::defaultValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*defaultValue_function_type )(  ) const;
            defaultValue_function_type defaultValue_function_value( &::SireSim::Option::defaultValue );
            
            Option_exposer.def( 
                "defaultValue"
                , defaultValue_function_value );
        
        }
        { //::SireSim::Option::description
        
            typedef ::QString ( ::SireSim::Option::*description_function_type )(  ) const;
            description_function_type description_function_value( &::SireSim::Option::description );
            
            Option_exposer.def( 
                "description"
                , description_function_value );
        
        }
        { //::SireSim::Option::getValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*getValue_function_type )( ::QString ) const;
            getValue_function_type getValue_function_value( &::SireSim::Option::getValue );
            
            Option_exposer.def( 
                "getValue"
                , getValue_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireSim::Option::hasUserValue
        
            typedef bool ( ::SireSim::Option::*hasUserValue_function_type )( int ) const;
            hasUserValue_function_type hasUserValue_function_value( &::SireSim::Option::hasUserValue );
            
            Option_exposer.def( 
                "hasUserValue"
                , hasUserValue_function_value
                , ( bp::arg("index") ) );
        
        }
        { //::SireSim::Option::isNull
        
            typedef bool ( ::SireSim::Option::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireSim::Option::isNull );
            
            Option_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireSim::Option::isOptional
        
            typedef bool ( ::SireSim::Option::*isOptional_function_type )(  ) const;
            isOptional_function_type isOptional_function_value( &::SireSim::Option::isOptional );
            
            Option_exposer.def( 
                "isOptional"
                , isOptional_function_value );
        
        }
        { //::SireSim::Option::key
        
            typedef ::QString ( ::SireSim::Option::*key_function_type )(  ) const;
            key_function_type key_function_value( &::SireSim::Option::key );
            
            Option_exposer.def( 
                "key"
                , key_function_value );
        
        }
        Option_exposer.def( bp::self != bp::self );
        { //::SireSim::Option::operator=
        
            typedef ::SireSim::Option & ( ::SireSim::Option::*assign_function_type )( ::SireSim::Option const & ) ;
            assign_function_type assign_function_value( &::SireSim::Option::operator= );
            
            Option_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Option_exposer.def( bp::self == bp::self );
        { //::SireSim::Option::setValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*setValue_function_type )( ::QString,::SireSim::Value const & ) const;
            setValue_function_type setValue_function_value( &::SireSim::Option::setValue );
            
            Option_exposer.def( 
                "setValue"
                , setValue_function_value
                , ( bp::arg("key"), bp::arg("value") ) );
        
        }
        { //::SireSim::Option::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::Option::typeName );
            
            Option_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSim::Option::userValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::Option::*userValue_function_type )( int ) const;
            userValue_function_type userValue_function_value( &::SireSim::Option::userValue );
            
            Option_exposer.def( 
                "userValue"
                , userValue_function_value
                , ( bp::arg("index") ) );
        
        }
        { //::SireSim::Option::what
        
            typedef char const * ( ::SireSim::Option::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSim::Option::what );
            
            Option_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Option_exposer.staticmethod( "typeName" );
        Option_exposer.def( "__copy__", &__copy__);
        Option_exposer.def( "__deepcopy__", &__copy__);
        Option_exposer.def( "clone", &__copy__);
        Option_exposer.def( "__str__", &pvt_get_name);
        Option_exposer.def( "__repr__", &pvt_get_name);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SimParams.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "simparams.h"

#include <QDomDocument>

#include <QDomElement>

#include <QDomNode>

#include <QFile>

#include "simparams.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_SimParams_class(){

    { //::SireSim::SimParams
        typedef bp::class_< SireSim::SimParams, bp::bases< SireBase::Property >, boost::noncopyable > SimParams_exposer_t;
        SimParams_exposer_t SimParams_exposer = SimParams_exposer_t( "SimParams", bp::no_init );
        bp::scope SimParams_scope( SimParams_exposer );
        { //::SireSim::SimParams::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::SimParams::typeName );
            
            SimParams_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        SimParams_exposer.staticmethod( "typeName" );
        SimParams_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSim::SimParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SimParams_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSim::SimParams >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SimParams_exposer.def( "__str__", &__str__< ::SireSim::SimParams > );
        SimParams_exposer.def( "__repr__", &__str__< ::SireSim::SimParams > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "EnumValue.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireSim/dimensions.hpp"

#include "SireSim/values.h"

#include "values.h"

#include <QDebug>

#include <QDomDocument>

#include <QDomElement>

#include <QSet>

#include "values.h"

SireSim::EnumValue __copy__(const SireSim::EnumValue &other){ return SireSim::EnumValue(other); }

#include "Helpers/str.hpp"

void register_EnumValue_class(){

    { //::SireSim::EnumValue
        typedef bp::class_< SireSim::EnumValue, bp::bases< SireSim::Value > > EnumValue_exposer_t;
        EnumValue_exposer_t EnumValue_exposer = EnumValue_exposer_t( "EnumValue", bp::init< >() );
        bp::scope EnumValue_scope( EnumValue_exposer );
        EnumValue_exposer.def( bp::init< QStringList >(( bp::arg("options") )) );
        EnumValue_exposer.def( bp::init< QStringList, QStringList >(( bp::arg("options"), bp::arg("docs") )) );
        EnumValue_exposer.def( bp::init< QStringList, int >(( bp::arg("options"), bp::arg("index") )) );
        EnumValue_exposer.def( bp::init< QStringList, QStringList, int >(( bp::arg("options"), bp::arg("docs"), bp::arg("index") )) );
        EnumValue_exposer.def( bp::init< QString >(( bp::arg("value") )) );
        EnumValue_exposer.def( bp::init< QString, QString >(( bp::arg("value"), bp::arg("doc") )) );
        EnumValue_exposer.def( bp::init< QDomElement >(( bp::arg("elem") )) );
        EnumValue_exposer.def( bp::init< SireSim::EnumValue const & >(( bp::arg("other") )) );
        { //::SireSim::EnumValue::documentation
        
            typedef ::QStringList ( ::SireSim::EnumValue::*documentation_function_type )(  ) const;
            documentation_function_type documentation_function_value( &::SireSim::EnumValue::documentation );
            
            EnumValue_exposer.def( 
                "documentation"
                , documentation_function_value );
        
        }
        EnumValue_exposer.def( bp::self != bp::self );
        { //::SireSim::EnumValue::operator=
        
            typedef ::SireSim::EnumValue & ( ::SireSim::EnumValue::*assign_function_type )( ::SireSim::EnumValue const & ) ;
            assign_function_type assign_function_value( &::SireSim::EnumValue::operator= );
            
            EnumValue_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        EnumValue_exposer.def( bp::self == bp::self );
        { //::SireSim::EnumValue::options
        
            typedef ::QStringList ( ::SireSim::EnumValue::*options_function_type )(  ) const;
            options_function_type options_function_value( &::SireSim::EnumValue::options );
            
            EnumValue_exposer.def( 
                "options"
                , options_function_value );
        
        }
        { //::SireSim::EnumValue::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::EnumValue::typeName );
            
            EnumValue_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSim::EnumValue::value
        
            typedef ::QString ( ::SireSim::EnumValue::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireSim::EnumValue::value );
            
            EnumValue_exposer.def( 
                "value"
                , value_function_value );
        
        }
        { //::SireSim::EnumValue::what
        
            typedef char const * ( ::SireSim::EnumValue::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSim::EnumValue::what );
            
            EnumValue_exposer.def( 
                "what"
                , what_function_value );
        
        }
        EnumValue_exposer.staticmethod( "typeName" );
        EnumValue_exposer.def( "__copy__", &__copy__);
        EnumValue_exposer.def( "__deepcopy__", &__copy__);
        EnumValue_exposer.def( "clone", &__copy__);
        EnumValue_exposer.def( "__str__", &__str__< ::SireSim::EnumValue > );
        EnumValue_exposer.def( "__repr__", &__str__< ::SireSim::EnumValue > );
    }

}

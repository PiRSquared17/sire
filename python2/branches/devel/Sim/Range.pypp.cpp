// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Range.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireSim/indexvalue.h"

#include "indexvalue.h"

#include <QDomDocument>

#include <QPair>

#include "indexvalue.h"

SireSim::Range __copy__(const SireSim::Range &other){ return SireSim::Range(other); }

#include "Helpers/str.hpp"

void register_Range_class(){

    { //::SireSim::Range
        typedef bp::class_< SireSim::Range > Range_exposer_t;
        Range_exposer_t Range_exposer = Range_exposer_t( "Range", bp::init< >() );
        bp::scope Range_scope( Range_exposer );
        Range_exposer.def( bp::init< int >(( bp::arg("index") )) );
        Range_exposer.def( bp::init< int, int, bp::optional< int > >(( bp::arg("start"), bp::arg("stop"), bp::arg("step")=(int)(1) )) );
        Range_exposer.def( bp::init< QString >(( bp::arg("range") )) );
        Range_exposer.def( bp::init< SireSim::Range const & >(( bp::arg("other") )) );
        { //::SireSim::Range::at
        
            typedef int ( ::SireSim::Range::*at_function_type )( int,int ) const;
            at_function_type at_function_value( &::SireSim::Range::at );
            
            Range_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i"), bp::arg("nvalues") ) );
        
        }
        { //::SireSim::Range::contains
        
            typedef bool ( ::SireSim::Range::*contains_function_type )( int,int ) const;
            contains_function_type contains_function_value( &::SireSim::Range::contains );
            
            Range_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("i"), bp::arg("nvalues") ) );
        
        }
        { //::SireSim::Range::count
        
            typedef int ( ::SireSim::Range::*count_function_type )( int ) const;
            count_function_type count_function_value( &::SireSim::Range::count );
            
            Range_exposer.def( 
                "count"
                , count_function_value
                , ( bp::arg("nvalues") ) );
        
        }
        { //::SireSim::Range::count
        
            typedef int ( ::SireSim::Range::*count_function_type )( int,int,int ) const;
            count_function_type count_function_value( &::SireSim::Range::count );
            
            Range_exposer.def( 
                "count"
                , count_function_value
                , ( bp::arg("i"), bp::arg("nvalues"), bp::arg("batchsize")=(int)(1000) ) );
        
        }
        { //::SireSim::Range::indicies
        
            typedef ::QList< int > ( ::SireSim::Range::*indicies_function_type )( int ) const;
            indicies_function_type indicies_function_value( &::SireSim::Range::indicies );
            
            Range_exposer.def( 
                "indicies"
                , indicies_function_value
                , ( bp::arg("nvalues") ) );
        
        }
        { //::SireSim::Range::indicies
        
            typedef ::QList< int > ( ::SireSim::Range::*indicies_function_type )( int,int,int ) const;
            indicies_function_type indicies_function_value( &::SireSim::Range::indicies );
            
            Range_exposer.def( 
                "indicies"
                , indicies_function_value
                , ( bp::arg("i"), bp::arg("nvalues"), bp::arg("batchsize")=(int)(1000) ) );
        
        }
        { //::SireSim::Range::jump
        
            typedef int ( ::SireSim::Range::*jump_function_type )(  ) const;
            jump_function_type jump_function_value( &::SireSim::Range::jump );
            
            Range_exposer.def( 
                "jump"
                , jump_function_value );
        
        }
        { //::SireSim::Range::nBatches
        
            typedef int ( ::SireSim::Range::*nBatches_function_type )( int,int ) const;
            nBatches_function_type nBatches_function_value( &::SireSim::Range::nBatches );
            
            Range_exposer.def( 
                "nBatches"
                , nBatches_function_value
                , ( bp::arg("nvalues"), bp::arg("batchsize")=(int)(1000) ) );
        
        }
        Range_exposer.def( bp::self != bp::self );
        { //::SireSim::Range::operator=
        
            typedef ::SireSim::Range & ( ::SireSim::Range::*assign_function_type )( ::SireSim::Range const & ) ;
            assign_function_type assign_function_value( &::SireSim::Range::operator= );
            
            Range_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Range_exposer.def( bp::self == bp::self );
        { //::SireSim::Range::start
        
            typedef int ( ::SireSim::Range::*start_function_type )(  ) const;
            start_function_type start_function_value( &::SireSim::Range::start );
            
            Range_exposer.def( 
                "start"
                , start_function_value );
        
        }
        { //::SireSim::Range::stop
        
            typedef int ( ::SireSim::Range::*stop_function_type )(  ) const;
            stop_function_type stop_function_value( &::SireSim::Range::stop );
            
            Range_exposer.def( 
                "stop"
                , stop_function_value );
        
        }
        { //::SireSim::Range::toString
        
            typedef ::QString ( ::SireSim::Range::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSim::Range::toString );
            
            Range_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Range_exposer.def( "__copy__", &__copy__);
        Range_exposer.def( "__deepcopy__", &__copy__);
        Range_exposer.def( "clone", &__copy__);
        Range_exposer.def( "__str__", &__str__< ::SireSim::Range > );
        Range_exposer.def( "__repr__", &__str__< ::SireSim::Range > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ProteinLigandMC.pypp.hpp"

namespace bp = boost::python;

#include "SireIO/amber.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "proteinligandmc.h"

#include "proteinligandmc.h"

SireSim::ProteinLigandMC __copy__(const SireSim::ProteinLigandMC &other){ return SireSim::ProteinLigandMC(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_ProteinLigandMC_class(){

    { //::SireSim::ProteinLigandMC
        typedef bp::class_< SireSim::ProteinLigandMC, bp::bases< SireSim::Sim, SireBase::Property > > ProteinLigandMC_exposer_t;
        ProteinLigandMC_exposer_t ProteinLigandMC_exposer = ProteinLigandMC_exposer_t( "ProteinLigandMC", bp::init< >() );
        bp::scope ProteinLigandMC_scope( ProteinLigandMC_exposer );
        ProteinLigandMC_exposer.def( bp::init< SireSim::ProteinLigandMCParams const & >(( bp::arg("params") )) );
        ProteinLigandMC_exposer.def( bp::init< QString const & >(( bp::arg("s3file") )) );
        ProteinLigandMC_exposer.def( bp::init< SireSim::ProteinLigandMC const & >(( bp::arg("other") )) );
        ProteinLigandMC_exposer.def( bp::self != bp::self );
        { //::SireSim::ProteinLigandMC::operator=
        
            typedef ::SireSim::ProteinLigandMC & ( ::SireSim::ProteinLigandMC::*assign_function_type )( ::SireSim::ProteinLigandMC const & ) ;
            assign_function_type assign_function_value( &::SireSim::ProteinLigandMC::operator= );
            
            ProteinLigandMC_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ProteinLigandMC_exposer.def( bp::self == bp::self );
        { //::SireSim::ProteinLigandMC::run
        
            typedef void ( ::SireSim::ProteinLigandMC::*run_function_type )(  ) ;
            run_function_type run_function_value( &::SireSim::ProteinLigandMC::run );
            
            ProteinLigandMC_exposer.def( 
                "run"
                , run_function_value );
        
        }
        { //::SireSim::ProteinLigandMC::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::ProteinLigandMC::typeName );
            
            ProteinLigandMC_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        ProteinLigandMC_exposer.staticmethod( "typeName" );
        ProteinLigandMC_exposer.def( "__copy__", &__copy__);
        ProteinLigandMC_exposer.def( "__deepcopy__", &__copy__);
        ProteinLigandMC_exposer.def( "clone", &__copy__);
        ProteinLigandMC_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSim::ProteinLigandMC >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProteinLigandMC_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSim::ProteinLigandMC >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProteinLigandMC_exposer.def( "__str__", &__str__< ::SireSim::ProteinLigandMC > );
        ProteinLigandMC_exposer.def( "__repr__", &__str__< ::SireSim::ProteinLigandMC > );
    }

}

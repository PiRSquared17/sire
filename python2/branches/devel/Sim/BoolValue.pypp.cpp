// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "BoolValue.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireSim/values.h"

#include "values.h"

#include <QDomDocument>

#include <QDomElement>

#include "values.h"

SireSim::BoolValue __copy__(const SireSim::BoolValue &other){ return SireSim::BoolValue(other); }

const char* pvt_get_name(const SireSim::BoolValue&){ return "SireSim::BoolValue";}

void register_BoolValue_class(){

    { //::SireSim::BoolValue
        typedef bp::class_< SireSim::BoolValue, bp::bases< SireSim::Value > > BoolValue_exposer_t;
        BoolValue_exposer_t BoolValue_exposer = BoolValue_exposer_t( "BoolValue", bp::init< >() );
        bp::scope BoolValue_scope( BoolValue_exposer );
        BoolValue_exposer.def( bp::init< bool >(( bp::arg("value") )) );
        BoolValue_exposer.def( bp::init< QDomElement >(( bp::arg("elem") )) );
        BoolValue_exposer.def( bp::init< SireSim::BoolValue const & >(( bp::arg("other") )) );
        { //::SireSim::BoolValue::getValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::BoolValue::*getValue_function_type )( ::QString ) const;
            getValue_function_type getValue_function_value( &::SireSim::BoolValue::getValue );
            
            BoolValue_exposer.def( 
                "getValue"
                , getValue_function_value
                , ( bp::arg("key") ) );
        
        }
        BoolValue_exposer.def( bp::self != bp::self );
        { //::SireSim::BoolValue::operator=
        
            typedef ::SireSim::BoolValue & ( ::SireSim::BoolValue::*assign_function_type )( ::SireSim::BoolValue const & ) ;
            assign_function_type assign_function_value( &::SireSim::BoolValue::operator= );
            
            BoolValue_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        BoolValue_exposer.def( bp::self == bp::self );
        { //::SireSim::BoolValue::setValue
        
            typedef ::SireSim::ValuePtr ( ::SireSim::BoolValue::*setValue_function_type )( ::QString,::SireSim::Value const & ) const;
            setValue_function_type setValue_function_value( &::SireSim::BoolValue::setValue );
            
            BoolValue_exposer.def( 
                "setValue"
                , setValue_function_value
                , ( bp::arg("key"), bp::arg("value") ) );
        
        }
        { //::SireSim::BoolValue::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSim::BoolValue::typeName );
            
            BoolValue_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSim::BoolValue::value
        
            typedef bool ( ::SireSim::BoolValue::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireSim::BoolValue::value );
            
            BoolValue_exposer.def( 
                "value"
                , value_function_value );
        
        }
        { //::SireSim::BoolValue::what
        
            typedef char const * ( ::SireSim::BoolValue::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSim::BoolValue::what );
            
            BoolValue_exposer.def( 
                "what"
                , what_function_value );
        
        }
        BoolValue_exposer.staticmethod( "typeName" );
        BoolValue_exposer.def( "__copy__", &__copy__);
        BoolValue_exposer.def( "__deepcopy__", &__copy__);
        BoolValue_exposer.def( "clone", &__copy__);
        BoolValue_exposer.def( "__str__", &pvt_get_name);
        BoolValue_exposer.def( "__repr__", &pvt_get_name);
    }

}

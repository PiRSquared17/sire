// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TIPMF.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "ti.h"

#include "tostring.h"

#include <cmath>

#include "ti.h"

Soiree::TIPMF __copy__(const Soiree::TIPMF &other){ return Soiree::TIPMF(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_TIPMF_class(){

    { //::Soiree::TIPMF
        typedef bp::class_< Soiree::TIPMF, bp::bases< Soiree::PMF, SireBase::Property > > TIPMF_exposer_t;
        TIPMF_exposer_t TIPMF_exposer = TIPMF_exposer_t( "TIPMF", bp::init< >() );
        bp::scope TIPMF_scope( TIPMF_exposer );
        TIPMF_exposer.def( bp::init< int >(( bp::arg("order") )) );
        TIPMF_exposer.def( bp::init< double, double >(( bp::arg("min_x"), bp::arg("max_x") )) );
        TIPMF_exposer.def( bp::init< double, double, int >(( bp::arg("min_x"), bp::arg("max_x"), bp::arg("order") )) );
        TIPMF_exposer.def( bp::init< Soiree::TIPMF const & >(( bp::arg("other") )) );
        { //::Soiree::TIPMF::dropEndPoints
        
            typedef ::Soiree::TIPMF ( ::Soiree::TIPMF::*dropEndPoints_function_type )(  ) const;
            dropEndPoints_function_type dropEndPoints_function_value( &::Soiree::TIPMF::dropEndPoints );
            
            TIPMF_exposer.def( 
                "dropEndPoints"
                , dropEndPoints_function_value );
        
        }
        { //::Soiree::TIPMF::gradients
        
            typedef ::QVector< Soiree::DataPoint > ( ::Soiree::TIPMF::*gradients_function_type )(  ) const;
            gradients_function_type gradients_function_value( &::Soiree::TIPMF::gradients );
            
            TIPMF_exposer.def( 
                "gradients"
                , gradients_function_value );
        
        }
        { //::Soiree::TIPMF::integral
        
            typedef double ( ::Soiree::TIPMF::*integral_function_type )(  ) const;
            integral_function_type integral_function_value( &::Soiree::TIPMF::integral );
            
            TIPMF_exposer.def( 
                "integral"
                , integral_function_value );
        
        }
        TIPMF_exposer.def( bp::self != bp::self );
        { //::Soiree::TIPMF::operator=
        
            typedef ::Soiree::TIPMF & ( ::Soiree::TIPMF::*assign_function_type )( ::Soiree::TIPMF const & ) ;
            assign_function_type assign_function_value( &::Soiree::TIPMF::operator= );
            
            TIPMF_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        TIPMF_exposer.def( bp::self == bp::self );
        { //::Soiree::TIPMF::order
        
            typedef int ( ::Soiree::TIPMF::*order_function_type )(  ) const;
            order_function_type order_function_value( &::Soiree::TIPMF::order );
            
            TIPMF_exposer.def( 
                "order"
                , order_function_value );
        
        }
        { //::Soiree::TIPMF::quadrature
        
            typedef double ( ::Soiree::TIPMF::*quadrature_function_type )(  ) const;
            quadrature_function_type quadrature_function_value( &::Soiree::TIPMF::quadrature );
            
            TIPMF_exposer.def( 
                "quadrature"
                , quadrature_function_value );
        
        }
        { //::Soiree::TIPMF::rangeMax
        
            typedef double ( ::Soiree::TIPMF::*rangeMax_function_type )(  ) const;
            rangeMax_function_type rangeMax_function_value( &::Soiree::TIPMF::rangeMax );
            
            TIPMF_exposer.def( 
                "rangeMax"
                , rangeMax_function_value );
        
        }
        { //::Soiree::TIPMF::rangeMin
        
            typedef double ( ::Soiree::TIPMF::*rangeMin_function_type )(  ) const;
            rangeMin_function_type rangeMin_function_value( &::Soiree::TIPMF::rangeMin );
            
            TIPMF_exposer.def( 
                "rangeMin"
                , rangeMin_function_value );
        
        }
        { //::Soiree::TIPMF::setGradients
        
            typedef void ( ::Soiree::TIPMF::*setGradients_function_type )( ::QVector< Soiree::DataPoint > const & ) ;
            setGradients_function_type setGradients_function_value( &::Soiree::TIPMF::setGradients );
            
            TIPMF_exposer.def( 
                "setGradients"
                , setGradients_function_value
                , ( bp::arg("gradients") ) );
        
        }
        { //::Soiree::TIPMF::setOrder
        
            typedef void ( ::Soiree::TIPMF::*setOrder_function_type )( ::qint32 ) ;
            setOrder_function_type setOrder_function_value( &::Soiree::TIPMF::setOrder );
            
            TIPMF_exposer.def( 
                "setOrder"
                , setOrder_function_value
                , ( bp::arg("order") ) );
        
        }
        { //::Soiree::TIPMF::setRange
        
            typedef void ( ::Soiree::TIPMF::*setRange_function_type )( double,double ) ;
            setRange_function_type setRange_function_value( &::Soiree::TIPMF::setRange );
            
            TIPMF_exposer.def( 
                "setRange"
                , setRange_function_value
                , ( bp::arg("min_x"), bp::arg("max_x") ) );
        
        }
        { //::Soiree::TIPMF::smoothedGradients
        
            typedef ::QVector< Soiree::DataPoint > ( ::Soiree::TIPMF::*smoothedGradients_function_type )(  ) const;
            smoothedGradients_function_type smoothedGradients_function_value( &::Soiree::TIPMF::smoothedGradients );
            
            TIPMF_exposer.def( 
                "smoothedGradients"
                , smoothedGradients_function_value );
        
        }
        { //::Soiree::TIPMF::toString
        
            typedef ::QString ( ::Soiree::TIPMF::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Soiree::TIPMF::toString );
            
            TIPMF_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Soiree::TIPMF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Soiree::TIPMF::typeName );
            
            TIPMF_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Soiree::TIPMF::what
        
            typedef char const * ( ::Soiree::TIPMF::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Soiree::TIPMF::what );
            
            TIPMF_exposer.def( 
                "what"
                , what_function_value );
        
        }
        TIPMF_exposer.staticmethod( "typeName" );
        TIPMF_exposer.def( "__copy__", &__copy__);
        TIPMF_exposer.def( "__deepcopy__", &__copy__);
        TIPMF_exposer.def( "clone", &__copy__);
        TIPMF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Soiree::TIPMF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TIPMF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Soiree::TIPMF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TIPMF_exposer.def( "__str__", &__str__< ::Soiree::TIPMF > );
        TIPMF_exposer.def( "__repr__", &__str__< ::Soiree::TIPMF > );
    }

}

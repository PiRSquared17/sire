// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Bennetts.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMaths/maths.h"

#include "SireStream/shareddatastream.h"

#include "bennetts.h"

#include "tostring.h"

#include "bennetts.h"

Soiree::Bennetts __copy__(const Soiree::Bennetts &other){ return Soiree::Bennetts(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Bennetts_class(){

    { //::Soiree::Bennetts
        typedef bp::class_< Soiree::Bennetts, bp::bases< SireBase::Property > > Bennetts_exposer_t;
        Bennetts_exposer_t Bennetts_exposer = Bennetts_exposer_t( "Bennetts", bp::init< >() );
        bp::scope Bennetts_scope( Bennetts_exposer );
        Bennetts_exposer.def( bp::init< QList< double > const &, QMap< double, SireMaths::BennettsFreeEnergyAverage > const &, QMap< double, SireMaths::BennettsFreeEnergyAverage > const & >(( bp::arg("windows"), bp::arg("forwards_ratios"), bp::arg("backwards_ratios") )) );
        Bennetts_exposer.def( bp::init< Soiree::BennettsRatios const & >(( bp::arg("ratios") )) );
        Bennetts_exposer.def( bp::init< Soiree::Bennetts const & >(( bp::arg("other") )) );
        { //::Soiree::Bennetts::add
        
            typedef void ( ::Soiree::Bennetts::*add_function_type )( ::QList< double > const &,::QMap< double, SireMaths::BennettsFreeEnergyAverage > const &,::QMap< double, SireMaths::BennettsFreeEnergyAverage > const & ) ;
            add_function_type add_function_value( &::Soiree::Bennetts::add );
            
            Bennetts_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("windows"), bp::arg("forwards_ratios"), bp::arg("backwards_ratios") ) );
        
        }
        { //::Soiree::Bennetts::add
        
            typedef void ( ::Soiree::Bennetts::*add_function_type )( ::Soiree::BennettsRatios const & ) ;
            add_function_type add_function_value( &::Soiree::Bennetts::add );
            
            Bennetts_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("ratios") ) );
        
        }
        { //::Soiree::Bennetts::at
        
            typedef ::Soiree::BennettsRatios ( ::Soiree::Bennetts::*at_function_type )( int ) const;
            at_function_type at_function_value( &::Soiree::Bennetts::at );
            
            Bennetts_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::Bennetts::clear
        
            typedef void ( ::Soiree::Bennetts::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::Soiree::Bennetts::clear );
            
            Bennetts_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::Soiree::Bennetts::count
        
            typedef int ( ::Soiree::Bennetts::*count_function_type )(  ) const;
            count_function_type count_function_value( &::Soiree::Bennetts::count );
            
            Bennetts_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::Soiree::Bennetts::lambdaValues
        
            typedef ::QList< double > ( ::Soiree::Bennetts::*lambdaValues_function_type )(  ) const;
            lambdaValues_function_type lambdaValues_function_value( &::Soiree::Bennetts::lambdaValues );
            
            Bennetts_exposer.def( 
                "lambdaValues"
                , lambdaValues_function_value );
        
        }
        { //::Soiree::Bennetts::merge
        
            typedef ::Soiree::BennettsRatios ( ::Soiree::Bennetts::*merge_function_type )( int,int ) ;
            merge_function_type merge_function_value( &::Soiree::Bennetts::merge );
            
            Bennetts_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::Soiree::Bennetts::merge
        
            typedef ::Soiree::BennettsRatios ( ::Soiree::Bennetts::*merge_function_type )( ::QList< int > ) ;
            merge_function_type merge_function_value( &::Soiree::Bennetts::merge );
            
            Bennetts_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("indicies") ) );
        
        }
        { //::Soiree::Bennetts::nIterations
        
            typedef int ( ::Soiree::Bennetts::*nIterations_function_type )(  ) const;
            nIterations_function_type nIterations_function_value( &::Soiree::Bennetts::nIterations );
            
            Bennetts_exposer.def( 
                "nIterations"
                , nIterations_function_value );
        
        }
        { //::Soiree::Bennetts::nLambdaValues
        
            typedef int ( ::Soiree::Bennetts::*nLambdaValues_function_type )(  ) const;
            nLambdaValues_function_type nLambdaValues_function_value( &::Soiree::Bennetts::nLambdaValues );
            
            Bennetts_exposer.def( 
                "nLambdaValues"
                , nLambdaValues_function_value );
        
        }
        { //::Soiree::Bennetts::nSamples
        
            typedef ::qint64 ( ::Soiree::Bennetts::*nSamples_function_type )(  ) const;
            nSamples_function_type nSamples_function_value( &::Soiree::Bennetts::nSamples );
            
            Bennetts_exposer.def( 
                "nSamples"
                , nSamples_function_value );
        
        }
        { //::Soiree::Bennetts::nWindows
        
            typedef int ( ::Soiree::Bennetts::*nWindows_function_type )(  ) const;
            nWindows_function_type nWindows_function_value( &::Soiree::Bennetts::nWindows );
            
            Bennetts_exposer.def( 
                "nWindows"
                , nWindows_function_value );
        
        }
        Bennetts_exposer.def( bp::self != bp::self );
        { //::Soiree::Bennetts::operator=
        
            typedef ::Soiree::Bennetts & ( ::Soiree::Bennetts::*assign_function_type )( ::Soiree::Bennetts const & ) ;
            assign_function_type assign_function_value( &::Soiree::Bennetts::operator= );
            
            Bennetts_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Bennetts_exposer.def( bp::self == bp::self );
        { //::Soiree::Bennetts::operator[]
        
            typedef ::Soiree::BennettsRatios ( ::Soiree::Bennetts::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::Soiree::Bennetts::operator[] );
            
            Bennetts_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::Bennetts::ratios
        
            typedef ::QList< Soiree::BennettsRatios > ( ::Soiree::Bennetts::*ratios_function_type )(  ) const;
            ratios_function_type ratios_function_value( &::Soiree::Bennetts::ratios );
            
            Bennetts_exposer.def( 
                "ratios"
                , ratios_function_value );
        
        }
        { //::Soiree::Bennetts::removeAt
        
            typedef void ( ::Soiree::Bennetts::*removeAt_function_type )( int ) ;
            removeAt_function_type removeAt_function_value( &::Soiree::Bennetts::removeAt );
            
            Bennetts_exposer.def( 
                "removeAt"
                , removeAt_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::Bennetts::removeRange
        
            typedef void ( ::Soiree::Bennetts::*removeRange_function_type )( int,int ) ;
            removeRange_function_type removeRange_function_value( &::Soiree::Bennetts::removeRange );
            
            Bennetts_exposer.def( 
                "removeRange"
                , removeRange_function_value
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::Soiree::Bennetts::rollingAverage
        
            typedef ::QList< Soiree::BennettsRatios > ( ::Soiree::Bennetts::*rollingAverage_function_type )( int ) const;
            rollingAverage_function_type rollingAverage_function_value( &::Soiree::Bennetts::rollingAverage );
            
            Bennetts_exposer.def( 
                "rollingAverage"
                , rollingAverage_function_value
                , ( bp::arg("niterations") ) );
        
        }
        { //::Soiree::Bennetts::set
        
            typedef void ( ::Soiree::Bennetts::*set_function_type )( int,::QList< double > const &,::QMap< double, SireMaths::BennettsFreeEnergyAverage > const &,::QMap< double, SireMaths::BennettsFreeEnergyAverage > const & ) ;
            set_function_type set_function_value( &::Soiree::Bennetts::set );
            
            Bennetts_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("windows"), bp::arg("forwards_ratios"), bp::arg("backwards_ratios") ) );
        
        }
        { //::Soiree::Bennetts::set
        
            typedef void ( ::Soiree::Bennetts::*set_function_type )( int,::Soiree::BennettsRatios const & ) ;
            set_function_type set_function_value( &::Soiree::Bennetts::set );
            
            Bennetts_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("ratios") ) );
        
        }
        { //::Soiree::Bennetts::size
        
            typedef int ( ::Soiree::Bennetts::*size_function_type )(  ) const;
            size_function_type size_function_value( &::Soiree::Bennetts::size );
            
            Bennetts_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::Soiree::Bennetts::toString
        
            typedef ::QString ( ::Soiree::Bennetts::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Soiree::Bennetts::toString );
            
            Bennetts_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Soiree::Bennetts::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Soiree::Bennetts::typeName );
            
            Bennetts_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Soiree::Bennetts::what
        
            typedef char const * ( ::Soiree::Bennetts::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Soiree::Bennetts::what );
            
            Bennetts_exposer.def( 
                "what"
                , what_function_value );
        
        }
        { //::Soiree::Bennetts::windows
        
            typedef ::QList< double > ( ::Soiree::Bennetts::*windows_function_type )(  ) const;
            windows_function_type windows_function_value( &::Soiree::Bennetts::windows );
            
            Bennetts_exposer.def( 
                "windows"
                , windows_function_value );
        
        }
        Bennetts_exposer.staticmethod( "typeName" );
        Bennetts_exposer.def( "__copy__", &__copy__);
        Bennetts_exposer.def( "__deepcopy__", &__copy__);
        Bennetts_exposer.def( "clone", &__copy__);
        Bennetts_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Soiree::Bennetts >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Bennetts_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Soiree::Bennetts >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Bennetts_exposer.def( "__str__", &__str__< ::Soiree::Bennetts > );
        Bennetts_exposer.def( "__repr__", &__str__< ::Soiree::Bennetts > );
    }

}

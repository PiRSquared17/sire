// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TI.pypp.hpp"

namespace bp = boost::python;

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "ti.h"

#include "ti.h"

Soiree::TI __copy__(const Soiree::TI &other){ return Soiree::TI(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_TI_class(){

    { //::Soiree::TI
        typedef bp::class_< Soiree::TI, bp::bases< SireBase::Property > > TI_exposer_t;
        TI_exposer_t TI_exposer = TI_exposer_t( "TI", bp::init< >() );
        bp::scope TI_scope( TI_exposer );
        TI_exposer.def( bp::init< Soiree::TI const & >(( bp::arg("other") )) );
        { //::Soiree::TI::add
        
            typedef void ( ::Soiree::TI::*add_function_type )( ::QMap< double, SireMaths::FreeEnergyAverage > const & ) ;
            add_function_type add_function_value( &::Soiree::TI::add );
            
            TI_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("gradients") ) );
        
        }
        { //::Soiree::TI::add
        
            typedef void ( ::Soiree::TI::*add_function_type )( ::QMap< double, SireMaths::FreeEnergyAverage > const &,double ) ;
            add_function_type add_function_value( &::Soiree::TI::add );
            
            TI_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("gradients"), bp::arg("delta_lambda") ) );
        
        }
        { //::Soiree::TI::add
        
            typedef void ( ::Soiree::TI::*add_function_type )( ::QMap< double, SireMaths::FreeEnergyAverage > const &,::QMap< double, SireMaths::FreeEnergyAverage > const &,double ) ;
            add_function_type add_function_value( &::Soiree::TI::add );
            
            TI_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("forwards"), bp::arg("backwards"), bp::arg("delta_lambda") ) );
        
        }
        { //::Soiree::TI::at
        
            typedef ::boost::tuples::tuple< QMap< double, SireMaths::FreeEnergyAverage >, QMap< double, SireMaths::FreeEnergyAverage >, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::Soiree::TI::*at_function_type )( int ) const;
            at_function_type at_function_value( &::Soiree::TI::at );
            
            TI_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::TI::count
        
            typedef int ( ::Soiree::TI::*count_function_type )(  ) const;
            count_function_type count_function_value( &::Soiree::TI::count );
            
            TI_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::Soiree::TI::lambdaValues
        
            typedef ::QList< double > ( ::Soiree::TI::*lambdaValues_function_type )(  ) const;
            lambdaValues_function_type lambdaValues_function_value( &::Soiree::TI::lambdaValues );
            
            TI_exposer.def( 
                "lambdaValues"
                , lambdaValues_function_value );
        
        }
        { //::Soiree::TI::nIterations
        
            typedef int ( ::Soiree::TI::*nIterations_function_type )(  ) const;
            nIterations_function_type nIterations_function_value( &::Soiree::TI::nIterations );
            
            TI_exposer.def( 
                "nIterations"
                , nIterations_function_value );
        
        }
        { //::Soiree::TI::nLambdaValues
        
            typedef int ( ::Soiree::TI::*nLambdaValues_function_type )(  ) const;
            nLambdaValues_function_type nLambdaValues_function_value( &::Soiree::TI::nLambdaValues );
            
            TI_exposer.def( 
                "nLambdaValues"
                , nLambdaValues_function_value );
        
        }
        { //::Soiree::TI::nSamples
        
            typedef ::qint64 ( ::Soiree::TI::*nSamples_function_type )(  ) const;
            nSamples_function_type nSamples_function_value( &::Soiree::TI::nSamples );
            
            TI_exposer.def( 
                "nSamples"
                , nSamples_function_value );
        
        }
        TI_exposer.def( bp::self != bp::self );
        { //::Soiree::TI::operator=
        
            typedef ::Soiree::TI & ( ::Soiree::TI::*assign_function_type )( ::Soiree::TI const & ) ;
            assign_function_type assign_function_value( &::Soiree::TI::operator= );
            
            TI_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        TI_exposer.def( bp::self == bp::self );
        { //::Soiree::TI::operator[]
        
            typedef ::boost::tuples::tuple< QMap< double, SireMaths::FreeEnergyAverage >, QMap< double, SireMaths::FreeEnergyAverage >, double, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::Soiree::TI::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::Soiree::TI::operator[] );
            
            TI_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::TI::removeAt
        
            typedef void ( ::Soiree::TI::*removeAt_function_type )( int ) ;
            removeAt_function_type removeAt_function_value( &::Soiree::TI::removeAt );
            
            TI_exposer.def( 
                "removeAt"
                , removeAt_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::TI::removeRange
        
            typedef void ( ::Soiree::TI::*removeRange_function_type )( int,int ) ;
            removeRange_function_type removeRange_function_value( &::Soiree::TI::removeRange );
            
            TI_exposer.def( 
                "removeRange"
                , removeRange_function_value
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::Soiree::TI::set
        
            typedef void ( ::Soiree::TI::*set_function_type )( int,::QMap< double, SireMaths::FreeEnergyAverage > const & ) ;
            set_function_type set_function_value( &::Soiree::TI::set );
            
            TI_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("gradients") ) );
        
        }
        { //::Soiree::TI::set
        
            typedef void ( ::Soiree::TI::*set_function_type )( int,::QMap< double, SireMaths::FreeEnergyAverage > const &,double ) ;
            set_function_type set_function_value( &::Soiree::TI::set );
            
            TI_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("gradients"), bp::arg("delta_lambda") ) );
        
        }
        { //::Soiree::TI::set
        
            typedef void ( ::Soiree::TI::*set_function_type )( int,::QMap< double, SireMaths::FreeEnergyAverage > const &,::QMap< double, SireMaths::FreeEnergyAverage > const &,double ) ;
            set_function_type set_function_value( &::Soiree::TI::set );
            
            TI_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("forwards"), bp::arg("backwards"), bp::arg("delta_lambda") ) );
        
        }
        { //::Soiree::TI::size
        
            typedef int ( ::Soiree::TI::*size_function_type )(  ) const;
            size_function_type size_function_value( &::Soiree::TI::size );
            
            TI_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::Soiree::TI::toString
        
            typedef ::QString ( ::Soiree::TI::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Soiree::TI::toString );
            
            TI_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Soiree::TI::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Soiree::TI::typeName );
            
            TI_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Soiree::TI::what
        
            typedef char const * ( ::Soiree::TI::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Soiree::TI::what );
            
            TI_exposer.def( 
                "what"
                , what_function_value );
        
        }
        TI_exposer.staticmethod( "typeName" );
        TI_exposer.def( "__copy__", &__copy__);
        TI_exposer.def( "__deepcopy__", &__copy__);
        TI_exposer.def( "clone", &__copy__);
        TI_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Soiree::TI >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TI_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Soiree::TI >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TI_exposer.def( "__str__", &__str__< ::Soiree::TI > );
        TI_exposer.def( "__repr__", &__str__< ::Soiree::TI > );
    }

}

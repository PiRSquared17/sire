// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "FEP.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMaths/maths.h"

#include "SireStream/shareddatastream.h"

#include "fep.h"

#include "tostring.h"

#include "fep.h"

Soiree::FEP __copy__(const Soiree::FEP &other){ return Soiree::FEP(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_FEP_class(){

    { //::Soiree::FEP
        typedef bp::class_< Soiree::FEP, bp::bases< SireBase::Property > > FEP_exposer_t;
        FEP_exposer_t FEP_exposer = FEP_exposer_t( "FEP", bp::init< >() );
        bp::scope FEP_scope( FEP_exposer );
        FEP_exposer.def( bp::init< QList< double > const &, QMap< double, SireMaths::FreeEnergyAverage > const & >(( bp::arg("windows"), bp::arg("deltas") )) );
        FEP_exposer.def( bp::init< QList< double > const &, QMap< double, SireMaths::FreeEnergyAverage > const &, QMap< double, SireMaths::FreeEnergyAverage > const & >(( bp::arg("windows"), bp::arg("forwards_deltas"), bp::arg("backwards_deltas") )) );
        FEP_exposer.def( bp::init< Soiree::FEPDeltas const & >(( bp::arg("deltas") )) );
        FEP_exposer.def( bp::init< Soiree::FEP const & >(( bp::arg("other") )) );
        { //::Soiree::FEP::add
        
            typedef void ( ::Soiree::FEP::*add_function_type )( ::QList< double > const &,::QMap< double, SireMaths::FreeEnergyAverage > const & ) ;
            add_function_type add_function_value( &::Soiree::FEP::add );
            
            FEP_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("windows"), bp::arg("deltas") ) );
        
        }
        { //::Soiree::FEP::add
        
            typedef void ( ::Soiree::FEP::*add_function_type )( ::QList< double > const &,::QMap< double, SireMaths::FreeEnergyAverage > const &,::QMap< double, SireMaths::FreeEnergyAverage > const & ) ;
            add_function_type add_function_value( &::Soiree::FEP::add );
            
            FEP_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("windows"), bp::arg("forwards_deltas"), bp::arg("backwards_deltas") ) );
        
        }
        { //::Soiree::FEP::add
        
            typedef void ( ::Soiree::FEP::*add_function_type )( ::Soiree::FEPDeltas const & ) ;
            add_function_type add_function_value( &::Soiree::FEP::add );
            
            FEP_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("deltas") ) );
        
        }
        { //::Soiree::FEP::at
        
            typedef ::Soiree::FEPDeltas ( ::Soiree::FEP::*at_function_type )( int ) const;
            at_function_type at_function_value( &::Soiree::FEP::at );
            
            FEP_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::FEP::clear
        
            typedef void ( ::Soiree::FEP::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::Soiree::FEP::clear );
            
            FEP_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::Soiree::FEP::count
        
            typedef int ( ::Soiree::FEP::*count_function_type )(  ) const;
            count_function_type count_function_value( &::Soiree::FEP::count );
            
            FEP_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::Soiree::FEP::deltas
        
            typedef ::QList< Soiree::FEPDeltas > ( ::Soiree::FEP::*deltas_function_type )(  ) const;
            deltas_function_type deltas_function_value( &::Soiree::FEP::deltas );
            
            FEP_exposer.def( 
                "deltas"
                , deltas_function_value );
        
        }
        { //::Soiree::FEP::lambdaValues
        
            typedef ::QList< double > ( ::Soiree::FEP::*lambdaValues_function_type )(  ) const;
            lambdaValues_function_type lambdaValues_function_value( &::Soiree::FEP::lambdaValues );
            
            FEP_exposer.def( 
                "lambdaValues"
                , lambdaValues_function_value );
        
        }
        { //::Soiree::FEP::merge
        
            typedef ::Soiree::FEPDeltas ( ::Soiree::FEP::*merge_function_type )( int,int ) ;
            merge_function_type merge_function_value( &::Soiree::FEP::merge );
            
            FEP_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::Soiree::FEP::merge
        
            typedef ::Soiree::FEPDeltas ( ::Soiree::FEP::*merge_function_type )( ::QList< int > ) ;
            merge_function_type merge_function_value( &::Soiree::FEP::merge );
            
            FEP_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("indicies") ) );
        
        }
        { //::Soiree::FEP::nIterations
        
            typedef int ( ::Soiree::FEP::*nIterations_function_type )(  ) const;
            nIterations_function_type nIterations_function_value( &::Soiree::FEP::nIterations );
            
            FEP_exposer.def( 
                "nIterations"
                , nIterations_function_value );
        
        }
        { //::Soiree::FEP::nLambdaValues
        
            typedef int ( ::Soiree::FEP::*nLambdaValues_function_type )(  ) const;
            nLambdaValues_function_type nLambdaValues_function_value( &::Soiree::FEP::nLambdaValues );
            
            FEP_exposer.def( 
                "nLambdaValues"
                , nLambdaValues_function_value );
        
        }
        { //::Soiree::FEP::nSamples
        
            typedef ::qint64 ( ::Soiree::FEP::*nSamples_function_type )(  ) const;
            nSamples_function_type nSamples_function_value( &::Soiree::FEP::nSamples );
            
            FEP_exposer.def( 
                "nSamples"
                , nSamples_function_value );
        
        }
        { //::Soiree::FEP::nWindows
        
            typedef int ( ::Soiree::FEP::*nWindows_function_type )(  ) const;
            nWindows_function_type nWindows_function_value( &::Soiree::FEP::nWindows );
            
            FEP_exposer.def( 
                "nWindows"
                , nWindows_function_value );
        
        }
        FEP_exposer.def( bp::self != bp::self );
        { //::Soiree::FEP::operator=
        
            typedef ::Soiree::FEP & ( ::Soiree::FEP::*assign_function_type )( ::Soiree::FEP const & ) ;
            assign_function_type assign_function_value( &::Soiree::FEP::operator= );
            
            FEP_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        FEP_exposer.def( bp::self == bp::self );
        { //::Soiree::FEP::operator[]
        
            typedef ::Soiree::FEPDeltas ( ::Soiree::FEP::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::Soiree::FEP::operator[] );
            
            FEP_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::FEP::removeAt
        
            typedef void ( ::Soiree::FEP::*removeAt_function_type )( int ) ;
            removeAt_function_type removeAt_function_value( &::Soiree::FEP::removeAt );
            
            FEP_exposer.def( 
                "removeAt"
                , removeAt_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::FEP::removeRange
        
            typedef void ( ::Soiree::FEP::*removeRange_function_type )( int,int ) ;
            removeRange_function_type removeRange_function_value( &::Soiree::FEP::removeRange );
            
            FEP_exposer.def( 
                "removeRange"
                , removeRange_function_value
                , ( bp::arg("start"), bp::arg("end") ) );
        
        }
        { //::Soiree::FEP::rollingAverage
        
            typedef ::QList< Soiree::FEPDeltas > ( ::Soiree::FEP::*rollingAverage_function_type )( int ) const;
            rollingAverage_function_type rollingAverage_function_value( &::Soiree::FEP::rollingAverage );
            
            FEP_exposer.def( 
                "rollingAverage"
                , rollingAverage_function_value
                , ( bp::arg("niterations") ) );
        
        }
        { //::Soiree::FEP::set
        
            typedef void ( ::Soiree::FEP::*set_function_type )( int,::QList< double > const &,::QMap< double, SireMaths::FreeEnergyAverage > const & ) ;
            set_function_type set_function_value( &::Soiree::FEP::set );
            
            FEP_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("windows"), bp::arg("deltas") ) );
        
        }
        { //::Soiree::FEP::set
        
            typedef void ( ::Soiree::FEP::*set_function_type )( int,::QList< double > const &,::QMap< double, SireMaths::FreeEnergyAverage > const &,::QMap< double, SireMaths::FreeEnergyAverage > const & ) ;
            set_function_type set_function_value( &::Soiree::FEP::set );
            
            FEP_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("windows"), bp::arg("forwards_deltas"), bp::arg("backwards_deltas") ) );
        
        }
        { //::Soiree::FEP::set
        
            typedef void ( ::Soiree::FEP::*set_function_type )( int,::Soiree::FEPDeltas const & ) ;
            set_function_type set_function_value( &::Soiree::FEP::set );
            
            FEP_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("i"), bp::arg("deltas") ) );
        
        }
        { //::Soiree::FEP::size
        
            typedef int ( ::Soiree::FEP::*size_function_type )(  ) const;
            size_function_type size_function_value( &::Soiree::FEP::size );
            
            FEP_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::Soiree::FEP::toString
        
            typedef ::QString ( ::Soiree::FEP::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Soiree::FEP::toString );
            
            FEP_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Soiree::FEP::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Soiree::FEP::typeName );
            
            FEP_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Soiree::FEP::what
        
            typedef char const * ( ::Soiree::FEP::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Soiree::FEP::what );
            
            FEP_exposer.def( 
                "what"
                , what_function_value );
        
        }
        { //::Soiree::FEP::windows
        
            typedef ::QList< double > ( ::Soiree::FEP::*windows_function_type )(  ) const;
            windows_function_type windows_function_value( &::Soiree::FEP::windows );
            
            FEP_exposer.def( 
                "windows"
                , windows_function_value );
        
        }
        FEP_exposer.staticmethod( "typeName" );
        FEP_exposer.def( "__copy__", &__copy__);
        FEP_exposer.def( "__deepcopy__", &__copy__);
        FEP_exposer.def( "clone", &__copy__);
        FEP_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Soiree::FEP >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FEP_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Soiree::FEP >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        FEP_exposer.def( "__str__", &__str__< ::Soiree::FEP > );
        FEP_exposer.def( "__repr__", &__str__< ::Soiree::FEP > );
    }

}

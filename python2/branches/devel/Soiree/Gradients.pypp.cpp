// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Gradients.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "ti.h"

#include "tostring.h"

#include <cmath>

#include "ti.h"

Soiree::Gradients __copy__(const Soiree::Gradients &other){ return Soiree::Gradients(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Gradients_class(){

    { //::Soiree::Gradients
        typedef bp::class_< Soiree::Gradients, bp::bases< SireBase::Property > > Gradients_exposer_t;
        Gradients_exposer_t Gradients_exposer = Gradients_exposer_t( "Gradients", bp::init< >() );
        bp::scope Gradients_scope( Gradients_exposer );
        Gradients_exposer.def( bp::init< QMap< double, SireMaths::FreeEnergyAverage > const & >(( bp::arg("gradients") )) );
        Gradients_exposer.def( bp::init< QMap< double, SireMaths::FreeEnergyAverage > const &, double >(( bp::arg("gradients"), bp::arg("delta_lambda") )) );
        Gradients_exposer.def( bp::init< QMap< double, SireMaths::FreeEnergyAverage > const &, QMap< double, SireMaths::FreeEnergyAverage > const &, double >(( bp::arg("forwards"), bp::arg("backwards"), bp::arg("delta_lambda") )) );
        Gradients_exposer.def( bp::init< Soiree::Gradients const & >(( bp::arg("other") )) );
        { //::Soiree::Gradients::backwards
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::Soiree::Gradients::*backwards_function_type )( double ) const;
            backwards_function_type backwards_function_value( &::Soiree::Gradients::backwards );
            
            Gradients_exposer.def( 
                "backwards"
                , backwards_function_value
                , ( bp::arg("lam") ) );
        
        }
        { //::Soiree::Gradients::backwardsData
        
            typedef ::QMap< double, SireMaths::FreeEnergyAverage > ( ::Soiree::Gradients::*backwardsData_function_type )(  ) const;
            backwardsData_function_type backwardsData_function_value( &::Soiree::Gradients::backwardsData );
            
            Gradients_exposer.def( 
                "backwardsData"
                , backwardsData_function_value );
        
        }
        { //::Soiree::Gradients::backwardsValues
        
            typedef ::QVector< Soiree::DataPoint > ( ::Soiree::Gradients::*backwardsValues_function_type )(  ) const;
            backwardsValues_function_type backwardsValues_function_value( &::Soiree::Gradients::backwardsValues );
            
            Gradients_exposer.def( 
                "backwardsValues"
                , backwardsValues_function_value );
        
        }
        { //::Soiree::Gradients::deltaLambda
        
            typedef double ( ::Soiree::Gradients::*deltaLambda_function_type )(  ) const;
            deltaLambda_function_type deltaLambda_function_value( &::Soiree::Gradients::deltaLambda );
            
            Gradients_exposer.def( 
                "deltaLambda"
                , deltaLambda_function_value );
        
        }
        { //::Soiree::Gradients::forwards
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::Soiree::Gradients::*forwards_function_type )( double ) const;
            forwards_function_type forwards_function_value( &::Soiree::Gradients::forwards );
            
            Gradients_exposer.def( 
                "forwards"
                , forwards_function_value
                , ( bp::arg("lam") ) );
        
        }
        { //::Soiree::Gradients::forwardsData
        
            typedef ::QMap< double, SireMaths::FreeEnergyAverage > ( ::Soiree::Gradients::*forwardsData_function_type )(  ) const;
            forwardsData_function_type forwardsData_function_value( &::Soiree::Gradients::forwardsData );
            
            Gradients_exposer.def( 
                "forwardsData"
                , forwardsData_function_value );
        
        }
        { //::Soiree::Gradients::forwardsValues
        
            typedef ::QVector< Soiree::DataPoint > ( ::Soiree::Gradients::*forwardsValues_function_type )(  ) const;
            forwardsValues_function_type forwardsValues_function_value( &::Soiree::Gradients::forwardsValues );
            
            Gradients_exposer.def( 
                "forwardsValues"
                , forwardsValues_function_value );
        
        }
        { //::Soiree::Gradients::gradient
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::Soiree::Gradients::*gradient_function_type )( double ) const;
            gradient_function_type gradient_function_value( &::Soiree::Gradients::gradient );
            
            Gradients_exposer.def( 
                "gradient"
                , gradient_function_value
                , ( bp::arg("lam") ) );
        
        }
        { //::Soiree::Gradients::isEmpty
        
            typedef bool ( ::Soiree::Gradients::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::Soiree::Gradients::isEmpty );
            
            Gradients_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::Soiree::Gradients::keys
        
            typedef ::QList< double > ( ::Soiree::Gradients::*keys_function_type )(  ) const;
            keys_function_type keys_function_value( &::Soiree::Gradients::keys );
            
            Gradients_exposer.def( 
                "keys"
                , keys_function_value );
        
        }
        { //::Soiree::Gradients::lambdaValues
        
            typedef ::QList< double > ( ::Soiree::Gradients::*lambdaValues_function_type )(  ) const;
            lambdaValues_function_type lambdaValues_function_value( &::Soiree::Gradients::lambdaValues );
            
            Gradients_exposer.def( 
                "lambdaValues"
                , lambdaValues_function_value );
        
        }
        { //::Soiree::Gradients::merge
        
            typedef ::Soiree::Gradients ( *merge_function_type )( ::QList< Soiree::Gradients > const & );
            merge_function_type merge_function_value( &::Soiree::Gradients::merge );
            
            Gradients_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("gradients") ) );
        
        }
        { //::Soiree::Gradients::nLambdaValues
        
            typedef int ( ::Soiree::Gradients::*nLambdaValues_function_type )(  ) const;
            nLambdaValues_function_type nLambdaValues_function_value( &::Soiree::Gradients::nLambdaValues );
            
            Gradients_exposer.def( 
                "nLambdaValues"
                , nLambdaValues_function_value );
        
        }
        { //::Soiree::Gradients::nSamples
        
            typedef ::qint64 ( ::Soiree::Gradients::*nSamples_function_type )(  ) const;
            nSamples_function_type nSamples_function_value( &::Soiree::Gradients::nSamples );
            
            Gradients_exposer.def( 
                "nSamples"
                , nSamples_function_value );
        
        }
        Gradients_exposer.def( bp::self != bp::self );
        { //::Soiree::Gradients::operator=
        
            typedef ::Soiree::Gradients & ( ::Soiree::Gradients::*assign_function_type )( ::Soiree::Gradients const & ) ;
            assign_function_type assign_function_value( &::Soiree::Gradients::operator= );
            
            Gradients_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Gradients_exposer.def( bp::self == bp::self );
        { //::Soiree::Gradients::operator[]
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::Soiree::Gradients::*__getitem___function_type )( double ) const;
            __getitem___function_type __getitem___function_value( &::Soiree::Gradients::operator[] );
            
            Gradients_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("lam") ) );
        
        }
        { //::Soiree::Gradients::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Soiree::Gradients::typeName );
            
            Gradients_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Soiree::Gradients::values
        
            typedef ::QVector< Soiree::DataPoint > ( ::Soiree::Gradients::*values_function_type )(  ) const;
            values_function_type values_function_value( &::Soiree::Gradients::values );
            
            Gradients_exposer.def( 
                "values"
                , values_function_value );
        
        }
        { //::Soiree::Gradients::what
        
            typedef char const * ( ::Soiree::Gradients::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Soiree::Gradients::what );
            
            Gradients_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Gradients_exposer.staticmethod( "merge" );
        Gradients_exposer.staticmethod( "typeName" );
        Gradients_exposer.def( "__copy__", &__copy__);
        Gradients_exposer.def( "__deepcopy__", &__copy__);
        Gradients_exposer.def( "clone", &__copy__);
        Gradients_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Soiree::Gradients >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Gradients_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Soiree::Gradients >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Gradients_exposer.def( "__str__", &__str__< ::Soiree::Gradients > );
        Gradients_exposer.def( "__repr__", &__str__< ::Soiree::Gradients > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License


#include "boost/python.hpp"

#include "Class.pypp.hpp"

#include "DataStream.pypp.hpp"

#include "HanRef.pypp.hpp"

#include "Handle.pypp.hpp"

#include "HandleLocker.pypp.hpp"

#include "Logger.pypp.hpp"

#include "MD5Sum.pypp.hpp"

#include "Mutable.pypp.hpp"

#include "Mutex.pypp.hpp"

#include "MutexLocker.pypp.hpp"

#include "None.pypp.hpp"

#include "ObjRef.pypp.hpp"

#include "Object.pypp.hpp"

#include "Semaphore.pypp.hpp"

#include "Stream.pypp.hpp"

#include "Tester.pypp.hpp"

#include "WaitCondition.pypp.hpp"

#include "WeakHandle.pypp.hpp"

#include "XMLStream.pypp.hpp"

#include "_Siren_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "Siren_registrars.h"

#include "object.h"

#include "objref.h"

#include "handle.h"

#include "hanref.h"

#include "primitive.h"

namespace Siren{ void export_exceptions();}

BOOST_PYTHON_MODULE(_Siren){
    register_Siren_objects();

    register_Object_class();

    register_Class_class();

    register_Handle_class();

    register_Stream_class();

    register_DataStream_class();

    register_HanRef_class();

    register_HandleLocker_class();

    register_Logger_class();

    register_MD5Sum_class();

    register_Mutable_class();

    register_Mutex_class();

    register_MutexLocker_class();

    register_None_class();

    register_ObjRef_class();

    register_Semaphore_class();

    register_Tester_class();

    register_WaitCondition_class();

    register_WeakHandle_class();

    register_XMLStream_class();

    bp::implicitly_convertible< Siren::Object, Siren::ObjRef >();

    bp::implicitly_convertible< Siren::Handle, Siren::HanRef >();

    bp::implicitly_convertible< Siren::Number, Siren::PrimitiveObject<Siren::Number> >();

    bp::implicitly_convertible< Siren::String, Siren::PrimitiveObject<Siren::String> >();

    bp::implicitly_convertible< Siren::PrimitiveObject<Siren::Number>, Siren::Number >();

    bp::implicitly_convertible< Siren::PrimitiveObject<Siren::String>, Siren::String >();

    Siren::export_exceptions();

    register_free_functions();
}


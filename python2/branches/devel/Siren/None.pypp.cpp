// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "None.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "class.h"

#include "logger.h"

#include "object.h"

#include "objptr.hpp"

#include "objref.h"

#include "stream.h"

#include "tester.h"

#include "object.h"

Siren::None __copy__(const Siren::None &other){ return Siren::None(other); }

#include "Helpers/str.hpp"

void register_None_class(){

    { //::Siren::None
        typedef bp::class_< Siren::None, bp::bases< Siren::Object > > None_exposer_t;
        None_exposer_t None_exposer = None_exposer_t( "None" );
        bp::scope None_scope( None_exposer );
        None_exposer.def( bp::init< >() );
        None_exposer.def( bp::init< Siren::None const & >(( bp::arg("other") )) );
        { //::Siren::None::hashCode
        
            typedef ::uint ( ::Siren::None::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::None::hashCode );
            
            None_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        None_exposer.def( bp::self != bp::self );
        { //::Siren::None::operator=
        
            typedef ::Siren::None & ( ::Siren::None::*assign_function_type )( ::Siren::None const & ) ;
            assign_function_type assign_function_value( &::Siren::None::operator= );
            
            None_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        None_exposer.def( bp::self == bp::self );
        { //::Siren::None::stream
        
            typedef void ( ::Siren::None::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::None::stream );
            
            None_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::None::test
        
            typedef bool ( ::Siren::None::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::None::test );
            
            None_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::None::toString
        
            typedef ::QString ( ::Siren::None::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::None::toString );
            
            None_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        None_exposer.def( "__copy__", &__copy__);
        None_exposer.def( "__deepcopy__", &__copy__);
        None_exposer.def( "clone", &__copy__);
        None_exposer.def( "__str__", &__str__< ::Siren::None > );
        None_exposer.def( "__repr__", &__str__< ::Siren::None > );
    }

}

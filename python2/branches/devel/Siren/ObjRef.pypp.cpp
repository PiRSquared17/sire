// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ObjRef.pypp.hpp"

namespace bp = boost::python;

#include "class.h"

#include "logger.h"

#include "objref.h"

#include "stream.h"

#include "tester.h"

#include <QDebug>

#include "objref.h"

Siren::ObjRef __copy__(const Siren::ObjRef &other){ return Siren::ObjRef(other); }

#include "Helpers/str.hpp"

void register_ObjRef_class(){

    { //::Siren::ObjRef
        typedef bp::class_< Siren::ObjRef > ObjRef_exposer_t;
        ObjRef_exposer_t ObjRef_exposer = ObjRef_exposer_t( "ObjRef" );
        bp::scope ObjRef_scope( ObjRef_exposer );
        ObjRef_exposer.def( bp::init< >() );
        ObjRef_exposer.def( bp::init< Siren::Object const & >(( bp::arg("obj") )) );
        ObjRef_exposer.def( bp::init< Siren::Object * >(( bp::arg("obj") )) );
        ObjRef_exposer.def( bp::init< Siren::ObjRef const & >(( bp::arg("other") )) );
        { //::Siren::ObjRef::copy
        
            typedef void ( ::Siren::ObjRef::*copy_function_type )( ::Siren::Object const & ) ;
            copy_function_type copy_function_value( &::Siren::ObjRef::copy );
            
            ObjRef_exposer.def( 
                "copy"
                , copy_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::Siren::ObjRef::equals
        
            typedef bool ( ::Siren::ObjRef::*equals_function_type )( ::Siren::Object const & ) const;
            equals_function_type equals_function_value( &::Siren::ObjRef::equals );
            
            ObjRef_exposer.def( 
                "equals"
                , equals_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::Siren::ObjRef::getClass
        
            typedef ::Siren::Class ( ::Siren::ObjRef::*getClass_function_type )(  ) const;
            getClass_function_type getClass_function_value( &::Siren::ObjRef::getClass );
            
            ObjRef_exposer.def( 
                "getClass"
                , getClass_function_value );
        
        }
        { //::Siren::ObjRef::hashCode
        
            typedef ::uint ( ::Siren::ObjRef::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::ObjRef::hashCode );
            
            ObjRef_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::Siren::ObjRef::load
        
            typedef void ( ::Siren::ObjRef::*load_function_type )( ::Siren::Stream & ) ;
            load_function_type load_function_value( &::Siren::ObjRef::load );
            
            ObjRef_exposer.def( 
                "load"
                , load_function_value
                , ( bp::arg("s") ) );
        
        }
        ObjRef_exposer.def( bp::self != bp::self );
        ObjRef_exposer.def( bp::self != bp::other< Siren::Object >() );
        { //::Siren::ObjRef::operator=
        
            typedef ::Siren::ObjRef & ( ::Siren::ObjRef::*assign_function_type )( ::Siren::ObjRef const & ) ;
            assign_function_type assign_function_value( &::Siren::ObjRef::operator= );
            
            ObjRef_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::Siren::ObjRef::operator=
        
            typedef ::Siren::ObjRef & ( ::Siren::ObjRef::*assign_function_type )( ::Siren::Object const & ) ;
            assign_function_type assign_function_value( &::Siren::ObjRef::operator= );
            
            ObjRef_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ObjRef_exposer.def( bp::self == bp::self );
        ObjRef_exposer.def( bp::self == bp::other< Siren::Object >() );
        { //::Siren::ObjRef::save
        
            typedef void ( ::Siren::ObjRef::*save_function_type )( ::Siren::Stream & ) const;
            save_function_type save_function_value( &::Siren::ObjRef::save );
            
            ObjRef_exposer.def( 
                "save"
                , save_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::ObjRef::stream
        
            typedef void ( ::Siren::ObjRef::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::ObjRef::stream );
            
            ObjRef_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::ObjRef::test
        
            typedef bool ( ::Siren::ObjRef::*test_function_type )(  ) const;
            test_function_type test_function_value( &::Siren::ObjRef::test );
            
            ObjRef_exposer.def( 
                "test"
                , test_function_value );
        
        }
        { //::Siren::ObjRef::test
        
            typedef bool ( ::Siren::ObjRef::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::ObjRef::test );
            
            ObjRef_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::ObjRef::toString
        
            typedef ::QString ( ::Siren::ObjRef::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::ObjRef::toString );
            
            ObjRef_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Siren::ObjRef::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::ObjRef::typeName );
            
            ObjRef_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Siren::ObjRef::what
        
            typedef ::QString ( ::Siren::ObjRef::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Siren::ObjRef::what );
            
            ObjRef_exposer.def( 
                "what"
                , what_function_value );
        
        }
        ObjRef_exposer.staticmethod( "typeName" );
        ObjRef_exposer.def( "__copy__", &__copy__);
        ObjRef_exposer.def( "__deepcopy__", &__copy__);
        ObjRef_exposer.def( "clone", &__copy__);
        ObjRef_exposer.def( "__str__", &__str__< ::Siren::ObjRef > );
        ObjRef_exposer.def( "__repr__", &__str__< ::Siren::ObjRef > );
    }

}

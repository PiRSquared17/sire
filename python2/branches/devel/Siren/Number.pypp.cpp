// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Number.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "logger.h"

#include "primitive.h"

#include "tester.h"

#include <cmath>

#include <limits>

#include "primitive.h"

Siren::Number __copy__(const Siren::Number &other){ return Siren::Number(other); }

#include "Helpers/str.hpp"

void register_Number_class(){

    { //::Siren::Number
        typedef bp::class_< Siren::Number, bp::bases< Siren::Primitive<Siren::Number> > > Number_exposer_t;
        Number_exposer_t Number_exposer = Number_exposer_t( "Number" );
        bp::scope Number_scope( Number_exposer );
        Number_exposer.def( bp::init< >() );
        Number_exposer.def( bp::init< qint64 >(( bp::arg("value") )) );
        Number_exposer.def( bp::init< double >(( bp::arg("value") )) );
        Number_exposer.def( bp::init< Siren::Number const & >(( bp::arg("other") )) );
        { //::Siren::Number::fromFloat
        
            typedef ::Siren::Number ( *fromFloat_function_type )( double );
            fromFloat_function_type fromFloat_function_value( &::Siren::Number::fromFloat );
            
            Number_exposer.def( 
                "fromFloat"
                , fromFloat_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::Siren::Number::fromInteger
        
            typedef ::Siren::Number ( *fromInteger_function_type )( ::qint64 );
            fromInteger_function_type fromInteger_function_value( &::Siren::Number::fromInteger );
            
            Number_exposer.def( 
                "fromInteger"
                , fromInteger_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::Siren::Number::hashCode
        
            typedef ::uint ( ::Siren::Number::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::Number::hashCode );
            
            Number_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        Number_exposer.def( bp::self != bp::self );
        { //::Siren::Number::operator=
        
            typedef ::Siren::Number & ( ::Siren::Number::*assign_function_type )( ::Siren::Number const & ) ;
            assign_function_type assign_function_value( &::Siren::Number::operator= );
            
            Number_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Number_exposer.def( bp::self == bp::self );
        { //::Siren::Number::stream
        
            typedef void ( ::Siren::Number::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::Number::stream );
            
            Number_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Number::test
        
            typedef bool ( ::Siren::Number::*test_function_type )(  ) const;
            test_function_type test_function_value( &::Siren::Number::test );
            
            Number_exposer.def( 
                "test"
                , test_function_value );
        
        }
        { //::Siren::Number::test
        
            typedef bool ( ::Siren::Number::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::Number::test );
            
            Number_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::Number::toFloat
        
            typedef double ( ::Siren::Number::*toFloat_function_type )(  ) const;
            toFloat_function_type toFloat_function_value( &::Siren::Number::toFloat );
            
            Number_exposer.def( 
                "toFloat"
                , toFloat_function_value );
        
        }
        { //::Siren::Number::toInteger
        
            typedef ::qint64 ( ::Siren::Number::*toInteger_function_type )(  ) const;
            toInteger_function_type toInteger_function_value( &::Siren::Number::toInteger );
            
            Number_exposer.def( 
                "toInteger"
                , toInteger_function_value );
        
        }
        { //::Siren::Number::toString
        
            typedef ::QString ( ::Siren::Number::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::Number::toString );
            
            Number_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Number_exposer.staticmethod( "fromFloat" );
        Number_exposer.staticmethod( "fromInteger" );
        Number_exposer.def( "__copy__", &__copy__);
        Number_exposer.def( "__deepcopy__", &__copy__);
        Number_exposer.def( "clone", &__copy__);
        Number_exposer.def( "__str__", &__str__< ::Siren::Number > );
        Number_exposer.def( "__repr__", &__str__< ::Siren::Number > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "MD5Sum.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "datastream.h"

#include "logger.h"

#include "md5sum.h"

#include "objref.h"

#include "tester.h"

#include "xmlstream.h"

#include <QByteArray>

#include <QDebug>

#include <QFile>

#include <QRegExp>

#include <QString>

#include "md5sum.h"

Siren::MD5Sum __copy__(const Siren::MD5Sum &other){ return Siren::MD5Sum(other); }

#include "Helpers/str.hpp"

void register_MD5Sum_class(){

    { //::Siren::MD5Sum
        typedef bp::class_< Siren::MD5Sum, bp::bases< Siren::Object > > MD5Sum_exposer_t;
        MD5Sum_exposer_t MD5Sum_exposer = MD5Sum_exposer_t( "MD5Sum" );
        bp::scope MD5Sum_scope( MD5Sum_exposer );
        MD5Sum_exposer.def( bp::init< >() );
        MD5Sum_exposer.def( bp::init< Siren::MD5Sum const & >(( bp::arg("sum") )) );
        { //::Siren::MD5Sum::fromData
        
            typedef ::Siren::MD5Sum ( *fromData_function_type )( ::QByteArray const & );
            fromData_function_type fromData_function_value( &::Siren::MD5Sum::fromData );
            
            MD5Sum_exposer.def( 
                "fromData"
                , fromData_function_value
                , ( bp::arg("data") ) );
        
        }
        { //::Siren::MD5Sum::fromData
        
            typedef ::Siren::MD5Sum ( *fromData_function_type )( char const *,unsigned int );
            fromData_function_type fromData_function_value( &::Siren::MD5Sum::fromData );
            
            MD5Sum_exposer.def( 
                "fromData"
                , fromData_function_value
                , ( bp::arg("buffer"), bp::arg("sz") ) );
        
        }
        { //::Siren::MD5Sum::fromFile
        
            typedef ::Siren::MD5Sum ( *fromFile_function_type )( ::QString const & );
            fromFile_function_type fromFile_function_value( &::Siren::MD5Sum::fromFile );
            
            MD5Sum_exposer.def( 
                "fromFile"
                , fromFile_function_value
                , ( bp::arg("filename") ) );
        
        }
        { //::Siren::MD5Sum::fromText
        
            typedef ::Siren::MD5Sum ( *fromText_function_type )( ::QString const & );
            fromText_function_type fromText_function_value( &::Siren::MD5Sum::fromText );
            
            MD5Sum_exposer.def( 
                "fromText"
                , fromText_function_value
                , ( bp::arg("text") ) );
        
        }
        { //::Siren::MD5Sum::hashCode
        
            typedef ::uint ( ::Siren::MD5Sum::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::MD5Sum::hashCode );
            
            MD5Sum_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        MD5Sum_exposer.def( bp::self != bp::self );
        { //::Siren::MD5Sum::operator=
        
            typedef ::Siren::MD5Sum & ( ::Siren::MD5Sum::*assign_function_type )( ::Siren::MD5Sum const & ) ;
            assign_function_type assign_function_value( &::Siren::MD5Sum::operator= );
            
            MD5Sum_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MD5Sum_exposer.def( bp::self == bp::self );
        { //::Siren::MD5Sum::stream
        
            typedef void ( ::Siren::MD5Sum::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::MD5Sum::stream );
            
            MD5Sum_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::MD5Sum::test
        
            typedef bool ( ::Siren::MD5Sum::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::MD5Sum::test );
            
            MD5Sum_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::MD5Sum::toString
        
            typedef ::QString ( ::Siren::MD5Sum::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::MD5Sum::toString );
            
            MD5Sum_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        MD5Sum_exposer.staticmethod( "fromData" );
        MD5Sum_exposer.staticmethod( "fromFile" );
        MD5Sum_exposer.staticmethod( "fromText" );
        MD5Sum_exposer.def( "__copy__", &__copy__);
        MD5Sum_exposer.def( "__deepcopy__", &__copy__);
        MD5Sum_exposer.def( "clone", &__copy__);
        MD5Sum_exposer.def( "__str__", &__str__< ::Siren::MD5Sum > );
        MD5Sum_exposer.def( "__repr__", &__str__< ::Siren::MD5Sum > );
    }

}

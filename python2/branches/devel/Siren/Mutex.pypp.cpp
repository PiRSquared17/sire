// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Mutex.pypp.hpp"

namespace bp = boost::python;

#include "forages.h"

#include "mutex.h"

#include "mutex.h"

const char* pvt_get_name(const Siren::Mutex&){ return "Siren::Mutex";}

void register_Mutex_class(){

    { //::Siren::Mutex
        typedef bp::class_< Siren::Mutex, boost::noncopyable > Mutex_exposer_t;
        Mutex_exposer_t Mutex_exposer = Mutex_exposer_t( "Mutex", bp::no_init );
        bp::scope Mutex_scope( Mutex_exposer );
        { //::Siren::Mutex::lock
        
            typedef void ( ::Siren::Mutex::*lock_function_type )(  ) ;
            lock_function_type lock_function_value( &::Siren::Mutex::lock );
            
            Mutex_exposer.def( 
                "lock"
                , lock_function_value );
        
        }
        { //::Siren::Mutex::tryLock
        
            typedef bool ( ::Siren::Mutex::*tryLock_function_type )(  ) ;
            tryLock_function_type tryLock_function_value( &::Siren::Mutex::tryLock );
            
            Mutex_exposer.def( 
                "tryLock"
                , tryLock_function_value );
        
        }
        { //::Siren::Mutex::tryLock
        
            typedef bool ( ::Siren::Mutex::*tryLock_function_type )( int ) ;
            tryLock_function_type tryLock_function_value( &::Siren::Mutex::tryLock );
            
            Mutex_exposer.def( 
                "tryLock"
                , tryLock_function_value
                , ( bp::arg("ms") ) );
        
        }
        { //::Siren::Mutex::unlock
        
            typedef void ( ::Siren::Mutex::*unlock_function_type )(  ) ;
            unlock_function_type unlock_function_value( &::Siren::Mutex::unlock );
            
            Mutex_exposer.def( 
                "unlock"
                , unlock_function_value );
        
        }
        Mutex_exposer.def( "__str__", &pvt_get_name);
        Mutex_exposer.def( "__repr__", &pvt_get_name);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Histogram.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "histogram.h"

#include "histogram.h"

SireMaths::Histogram __copy__(const SireMaths::Histogram &other){ return SireMaths::Histogram(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Histogram_class(){

    { //::SireMaths::Histogram
        typedef bp::class_< SireMaths::Histogram, bp::bases< SireMaths::HistogramRange > > Histogram_exposer_t;
        Histogram_exposer_t Histogram_exposer = Histogram_exposer_t( "Histogram" );
        bp::scope Histogram_scope( Histogram_exposer );
        Histogram_exposer.def( bp::init< >() );
        Histogram_exposer.def( bp::init< double, double, bp::optional< int > >(( bp::arg("min"), bp::arg("max"), bp::arg("nbins")=(int)(101) )) );
        Histogram_exposer.def( bp::init< double, double, double >(( bp::arg("min"), bp::arg("max"), bp::arg("binwidth") )) );
        Histogram_exposer.def( bp::init< SireMaths::HistogramRange const & >(( bp::arg("range") )) );
        Histogram_exposer.def( bp::init< SireMaths::HistogramRange const &, QVector< double > const & >(( bp::arg("range"), bp::arg("values") )) );
        Histogram_exposer.def( bp::init< SireMaths::Histogram const & >(( bp::arg("other") )) );
        { //::SireMaths::Histogram::accumulate
        
            typedef void ( ::SireMaths::Histogram::*accumulate_function_type )( double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Histogram::accumulate );
            
            Histogram_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMaths::Histogram::accumulate
        
            typedef void ( ::SireMaths::Histogram::*accumulate_function_type )( double,double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Histogram::accumulate );
            
            Histogram_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value"), bp::arg("weight") ) );
        
        }
        { //::SireMaths::Histogram::accumulate
        
            typedef void ( ::SireMaths::Histogram::*accumulate_function_type )( ::SireMaths::Histogram const & ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Histogram::accumulate );
            
            Histogram_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("other") ) );
        
        }
        Histogram_exposer.def( bp::self != bp::self );
        { //::SireMaths::Histogram::operator=
        
            typedef ::SireMaths::Histogram & ( ::SireMaths::Histogram::*assign_function_type )( ::SireMaths::Histogram const & ) ;
            assign_function_type assign_function_value( &::SireMaths::Histogram::operator= );
            
            Histogram_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Histogram_exposer.def( bp::self == bp::self );
        { //::SireMaths::Histogram::operator[]
        
            typedef ::SireMaths::HistogramValue ( ::SireMaths::Histogram::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMaths::Histogram::operator[] );
            
            Histogram_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireMaths::Histogram::toString
        
            typedef ::QString ( ::SireMaths::Histogram::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::Histogram::toString );
            
            Histogram_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMaths::Histogram::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMaths::Histogram::typeName );
            
            Histogram_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMaths::Histogram::what
        
            typedef char const * ( ::SireMaths::Histogram::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMaths::Histogram::what );
            
            Histogram_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Histogram_exposer.staticmethod( "typeName" );
        Histogram_exposer.def( "__copy__", &__copy__);
        Histogram_exposer.def( "__deepcopy__", &__copy__);
        Histogram_exposer.def( "clone", &__copy__);
        Histogram_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMaths::Histogram >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Histogram_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMaths::Histogram >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Histogram_exposer.def( "__str__", &__str__< ::SireMaths::Histogram > );
        Histogram_exposer.def( "__repr__", &__str__< ::SireMaths::Histogram > );
    }

}

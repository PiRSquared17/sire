// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "PerturbationConstraint.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireCAS/values.h"

#include "SireMol/mgname.h"

#include "SireMol/mgnum.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/perturbation.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "perturbationconstraint.h"

#include "perturbationconstraint.h"

SireSystem::PerturbationConstraint __copy__(const SireSystem::PerturbationConstraint &other){ return SireSystem::PerturbationConstraint(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PerturbationConstraint_class(){

    { //::SireSystem::PerturbationConstraint
        typedef bp::class_< SireSystem::PerturbationConstraint, bp::bases< SireSystem::MoleculeConstraint, SireSystem::Constraint, SireBase::Property > > PerturbationConstraint_exposer_t;
        PerturbationConstraint_exposer_t PerturbationConstraint_exposer = PerturbationConstraint_exposer_t( "PerturbationConstraint" );
        bp::scope PerturbationConstraint_scope( PerturbationConstraint_exposer );
        PerturbationConstraint_exposer.def( bp::init< >() );
        PerturbationConstraint_exposer.def( bp::init< SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        PerturbationConstraint_exposer.def( bp::init< SireSystem::PerturbationConstraint const & >(( bp::arg("other") )) );
        { //::SireSystem::PerturbationConstraint::involvesMolecule
        
            typedef bool ( ::SireSystem::PerturbationConstraint::*involvesMolecule_function_type )( ::SireMol::MolNum ) const;
            involvesMolecule_function_type involvesMolecule_function_value( &::SireSystem::PerturbationConstraint::involvesMolecule );
            
            PerturbationConstraint_exposer.def( 
                "involvesMolecule"
                , involvesMolecule_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireSystem::PerturbationConstraint::involvesMoleculesFrom
        
            typedef bool ( ::SireSystem::PerturbationConstraint::*involvesMoleculesFrom_function_type )( ::SireMol::Molecules const & ) const;
            involvesMoleculesFrom_function_type involvesMoleculesFrom_function_value( &::SireSystem::PerturbationConstraint::involvesMoleculesFrom );
            
            PerturbationConstraint_exposer.def( 
                "involvesMoleculesFrom"
                , involvesMoleculesFrom_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireSystem::PerturbationConstraint::isSatisfied
        
            typedef bool ( ::SireSystem::PerturbationConstraint::*isSatisfied_function_type )( ::SireSystem::System const & ) const;
            isSatisfied_function_type isSatisfied_function_value( &::SireSystem::PerturbationConstraint::isSatisfied );
            
            PerturbationConstraint_exposer.def( 
                "isSatisfied"
                , isSatisfied_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::PerturbationConstraint::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::PerturbationConstraint::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireSystem::PerturbationConstraint::moleculeGroup );
            
            PerturbationConstraint_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        PerturbationConstraint_exposer.def( bp::self != bp::self );
        { //::SireSystem::PerturbationConstraint::operator=
        
            typedef ::SireSystem::PerturbationConstraint & ( ::SireSystem::PerturbationConstraint::*assign_function_type )( ::SireSystem::PerturbationConstraint const & ) ;
            assign_function_type assign_function_value( &::SireSystem::PerturbationConstraint::operator= );
            
            PerturbationConstraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PerturbationConstraint_exposer.def( bp::self == bp::self );
        { //::SireSystem::PerturbationConstraint::perturbationProperty
        
            typedef ::SireBase::PropertyName ( ::SireSystem::PerturbationConstraint::*perturbationProperty_function_type )(  ) const;
            perturbationProperty_function_type perturbationProperty_function_value( &::SireSystem::PerturbationConstraint::perturbationProperty );
            
            PerturbationConstraint_exposer.def( 
                "perturbationProperty"
                , perturbationProperty_function_value );
        
        }
        { //::SireSystem::PerturbationConstraint::toString
        
            typedef ::QString ( ::SireSystem::PerturbationConstraint::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSystem::PerturbationConstraint::toString );
            
            PerturbationConstraint_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSystem::PerturbationConstraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::PerturbationConstraint::typeName );
            
            PerturbationConstraint_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::PerturbationConstraint::update
        
            typedef ::SireMol::Molecules ( ::SireSystem::PerturbationConstraint::*update_function_type )( ::SireSystem::System const & ) ;
            update_function_type update_function_value( &::SireSystem::PerturbationConstraint::update );
            
            PerturbationConstraint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::PerturbationConstraint::update
        
            typedef ::SireMol::Molecules ( ::SireSystem::PerturbationConstraint::*update_function_type )( ::SireSystem::System const &,::SireMol::MolNum ) ;
            update_function_type update_function_value( &::SireSystem::PerturbationConstraint::update );
            
            PerturbationConstraint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system"), bp::arg("changed_mol") ) );
        
        }
        { //::SireSystem::PerturbationConstraint::update
        
            typedef ::SireMol::Molecules ( ::SireSystem::PerturbationConstraint::*update_function_type )( ::SireSystem::System const &,::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireSystem::PerturbationConstraint::update );
            
            PerturbationConstraint_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system"), bp::arg("molecules") ) );
        
        }
        PerturbationConstraint_exposer.staticmethod( "typeName" );
        PerturbationConstraint_exposer.def( "__copy__", &__copy__);
        PerturbationConstraint_exposer.def( "__deepcopy__", &__copy__);
        PerturbationConstraint_exposer.def( "clone", &__copy__);
        PerturbationConstraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::PerturbationConstraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PerturbationConstraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::PerturbationConstraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PerturbationConstraint_exposer.def( "__str__", &__str__< ::SireSystem::PerturbationConstraint > );
        PerturbationConstraint_exposer.def( "__repr__", &__str__< ::SireSystem::PerturbationConstraint > );
    }

}

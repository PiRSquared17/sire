// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "Delta.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "delta.h"

#include "delta.h"

SireSystem::Delta __copy__(const SireSystem::Delta &other){ return SireSystem::Delta(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireSystem::Delta&){ return "SireSystem::Delta";}

void register_Delta_class(){

    { //::SireSystem::Delta
        typedef bp::class_< SireSystem::Delta > Delta_exposer_t;
        Delta_exposer_t Delta_exposer = Delta_exposer_t( "Delta" );
        bp::scope Delta_scope( Delta_exposer );
        Delta_exposer.def( bp::init< >() );
        Delta_exposer.def( bp::init< SireMol::Molecule const &, SireMol::Molecule const & >(( bp::arg("old_molecule"), bp::arg("new_molecule") )) );
        Delta_exposer.def( bp::init< SireMol::Molecules const &, SireMol::Molecules const & >(( bp::arg("old_molecules"), bp::arg("new_molecules") )) );
        Delta_exposer.def( bp::init< SireCAS::Symbol const &, double, double >(( bp::arg("component"), bp::arg("old_value"), bp::arg("new_value") )) );
        Delta_exposer.def( bp::init< QString const &, SireBase::Property const &, SireBase::Property const & >(( bp::arg("name"), bp::arg("old_value"), bp::arg("new_value") )) );
        Delta_exposer.def( bp::init< QString const &, SireFF::FFIdx const &, SireBase::Property const &, SireBase::Property const & >(( bp::arg("name"), bp::arg("ffidx"), bp::arg("old_value"), bp::arg("new_value") )) );
        Delta_exposer.def( bp::init< QString const &, QList< SireFF::FFIdx > const &, SireBase::Property const &, SireBase::Property const & >(( bp::arg("name"), bp::arg("ffidxs"), bp::arg("old_value"), bp::arg("new_value") )) );
        Delta_exposer.def( bp::init< SireSystem::Delta const &, SireSystem::Delta const & >(( bp::arg("delta0"), bp::arg("delta1") )) );
        Delta_exposer.def( bp::init< SireSystem::Delta const & >(( bp::arg("other") )) );
        { //::SireSystem::Delta::add
        
            typedef ::SireSystem::Delta ( ::SireSystem::Delta::*add_function_type )( ::SireSystem::Delta const & ) const;
            add_function_type add_function_value( &::SireSystem::Delta::add );
            
            Delta_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireSystem::Delta::combine
        
            typedef ::SireSystem::Delta ( *combine_function_type )( ::SireSystem::Delta const &,::SireSystem::Delta const & );
            combine_function_type combine_function_value( &::SireSystem::Delta::combine );
            
            Delta_exposer.def( 
                "combine"
                , combine_function_value
                , ( bp::arg("delta0"), bp::arg("delta1") ) );
        
        }
        { //::SireSystem::Delta::involves
        
            typedef bool ( ::SireSystem::Delta::*involves_function_type )( ::SireMol::MolNum ) const;
            involves_function_type involves_function_value( &::SireSystem::Delta::involves );
            
            Delta_exposer.def( 
                "involves"
                , involves_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireSystem::Delta::involves
        
            typedef bool ( ::SireSystem::Delta::*involves_function_type )( ::SireMol::Molecules const & ) const;
            involves_function_type involves_function_value( &::SireSystem::Delta::involves );
            
            Delta_exposer.def( 
                "involves"
                , involves_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireSystem::Delta::involves
        
            typedef bool ( ::SireSystem::Delta::*involves_function_type )( ::SireCAS::Symbol const & ) const;
            involves_function_type involves_function_value( &::SireSystem::Delta::involves );
            
            Delta_exposer.def( 
                "involves"
                , involves_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::Delta::involves
        
            typedef bool ( ::SireSystem::Delta::*involves_function_type )( ::QString const & ) const;
            involves_function_type involves_function_value( &::SireSystem::Delta::involves );
            
            Delta_exposer.def( 
                "involves"
                , involves_function_value
                , ( bp::arg("property") ) );
        
        }
        { //::SireSystem::Delta::involves
        
            typedef bool ( ::SireSystem::Delta::*involves_function_type )( ::QString const &,::SireFF::FFIdx const & ) const;
            involves_function_type involves_function_value( &::SireSystem::Delta::involves );
            
            Delta_exposer.def( 
                "involves"
                , involves_function_value
                , ( bp::arg("property"), bp::arg("ffidx") ) );
        
        }
        { //::SireSystem::Delta::involves
        
            typedef bool ( ::SireSystem::Delta::*involves_function_type )( ::QString const &,::QList< SireFF::FFIdx > const & ) const;
            involves_function_type involves_function_value( &::SireSystem::Delta::involves );
            
            Delta_exposer.def( 
                "involves"
                , involves_function_value
                , ( bp::arg("property"), bp::arg("ffidxs") ) );
        
        }
        { //::SireSystem::Delta::isEmpty
        
            typedef bool ( ::SireSystem::Delta::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireSystem::Delta::isEmpty );
            
            Delta_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireSystem::Delta::isNull
        
            typedef bool ( ::SireSystem::Delta::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireSystem::Delta::isNull );
            
            Delta_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireSystem::Delta::newMolecule
        
            typedef ::SireMol::Molecule ( ::SireSystem::Delta::*newMolecule_function_type )( ::SireMol::MolNum ) const;
            newMolecule_function_type newMolecule_function_value( &::SireSystem::Delta::newMolecule );
            
            Delta_exposer.def( 
                "newMolecule"
                , newMolecule_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireSystem::Delta::newMolecules
        
            typedef ::SireMol::Molecules ( ::SireSystem::Delta::*newMolecules_function_type )(  ) const;
            newMolecules_function_type newMolecules_function_value( &::SireSystem::Delta::newMolecules );
            
            Delta_exposer.def( 
                "newMolecules"
                , newMolecules_function_value );
        
        }
        { //::SireSystem::Delta::newProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::Delta::*newProperties_function_type )(  ) const;
            newProperties_function_type newProperties_function_value( &::SireSystem::Delta::newProperties );
            
            Delta_exposer.def( 
                "newProperties"
                , newProperties_function_value );
        
        }
        { //::SireSystem::Delta::newProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::Delta::*newProperties_function_type )( ::SireFF::FFIdx const & ) const;
            newProperties_function_type newProperties_function_value( &::SireSystem::Delta::newProperties );
            
            Delta_exposer.def( 
                "newProperties"
                , newProperties_function_value
                , ( bp::arg("ffidx") ) );
        
        }
        { //::SireSystem::Delta::newProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::Delta::*newProperties_function_type )( ::QList< SireFF::FFIdx > const & ) const;
            newProperties_function_type newProperties_function_value( &::SireSystem::Delta::newProperties );
            
            Delta_exposer.def( 
                "newProperties"
                , newProperties_function_value
                , ( bp::arg("ffidxs") ) );
        
        }
        { //::SireSystem::Delta::newProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::Delta::*newProperty_function_type )( ::QString const & ) const;
            newProperty_function_type newProperty_function_value( &::SireSystem::Delta::newProperty );
            
            Delta_exposer.def( 
                "newProperty"
                , newProperty_function_value
                , ( bp::arg("property") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::Delta::newProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::Delta::*newProperty_function_type )( ::QString const &,::SireFF::FFIdx const & ) const;
            newProperty_function_type newProperty_function_value( &::SireSystem::Delta::newProperty );
            
            Delta_exposer.def( 
                "newProperty"
                , newProperty_function_value
                , ( bp::arg("property"), bp::arg("ffidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::Delta::newProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::Delta::*newProperty_function_type )( ::QString const &,::QList< SireFF::FFIdx > const & ) const;
            newProperty_function_type newProperty_function_value( &::SireSystem::Delta::newProperty );
            
            Delta_exposer.def( 
                "newProperty"
                , newProperty_function_value
                , ( bp::arg("property"), bp::arg("ffidxs") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::Delta::newValue
        
            typedef double ( ::SireSystem::Delta::*newValue_function_type )( ::SireCAS::Symbol const & ) const;
            newValue_function_type newValue_function_value( &::SireSystem::Delta::newValue );
            
            Delta_exposer.def( 
                "newValue"
                , newValue_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::Delta::newValues
        
            typedef ::SireCAS::Values const & ( ::SireSystem::Delta::*newValues_function_type )(  ) const;
            newValues_function_type newValues_function_value( &::SireSystem::Delta::newValues );
            
            Delta_exposer.def( 
                "newValues"
                , newValues_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::Delta::oldMolecule
        
            typedef ::SireMol::Molecule ( ::SireSystem::Delta::*oldMolecule_function_type )( ::SireMol::MolNum ) const;
            oldMolecule_function_type oldMolecule_function_value( &::SireSystem::Delta::oldMolecule );
            
            Delta_exposer.def( 
                "oldMolecule"
                , oldMolecule_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireSystem::Delta::oldMolecules
        
            typedef ::SireMol::Molecules ( ::SireSystem::Delta::*oldMolecules_function_type )(  ) const;
            oldMolecules_function_type oldMolecules_function_value( &::SireSystem::Delta::oldMolecules );
            
            Delta_exposer.def( 
                "oldMolecules"
                , oldMolecules_function_value );
        
        }
        { //::SireSystem::Delta::oldProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::Delta::*oldProperties_function_type )(  ) const;
            oldProperties_function_type oldProperties_function_value( &::SireSystem::Delta::oldProperties );
            
            Delta_exposer.def( 
                "oldProperties"
                , oldProperties_function_value );
        
        }
        { //::SireSystem::Delta::oldProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::Delta::*oldProperties_function_type )( ::SireFF::FFIdx const & ) const;
            oldProperties_function_type oldProperties_function_value( &::SireSystem::Delta::oldProperties );
            
            Delta_exposer.def( 
                "oldProperties"
                , oldProperties_function_value
                , ( bp::arg("ffidx") ) );
        
        }
        { //::SireSystem::Delta::oldProperties
        
            typedef ::SireBase::Properties ( ::SireSystem::Delta::*oldProperties_function_type )( ::QList< SireFF::FFIdx > const & ) const;
            oldProperties_function_type oldProperties_function_value( &::SireSystem::Delta::oldProperties );
            
            Delta_exposer.def( 
                "oldProperties"
                , oldProperties_function_value
                , ( bp::arg("ffidxs") ) );
        
        }
        { //::SireSystem::Delta::oldProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::Delta::*oldProperty_function_type )( ::QString const & ) const;
            oldProperty_function_type oldProperty_function_value( &::SireSystem::Delta::oldProperty );
            
            Delta_exposer.def( 
                "oldProperty"
                , oldProperty_function_value
                , ( bp::arg("property") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::Delta::oldProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::Delta::*oldProperty_function_type )( ::QString const &,::SireFF::FFIdx const & ) const;
            oldProperty_function_type oldProperty_function_value( &::SireSystem::Delta::oldProperty );
            
            Delta_exposer.def( 
                "oldProperty"
                , oldProperty_function_value
                , ( bp::arg("property"), bp::arg("ffidx") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::Delta::oldProperty
        
            typedef ::SireBase::Property const & ( ::SireSystem::Delta::*oldProperty_function_type )( ::QString const &,::QList< SireFF::FFIdx > const & ) const;
            oldProperty_function_type oldProperty_function_value( &::SireSystem::Delta::oldProperty );
            
            Delta_exposer.def( 
                "oldProperty"
                , oldProperty_function_value
                , ( bp::arg("property"), bp::arg("ffidxs") )
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::Delta::oldValue
        
            typedef double ( ::SireSystem::Delta::*oldValue_function_type )( ::SireCAS::Symbol const & ) const;
            oldValue_function_type oldValue_function_value( &::SireSystem::Delta::oldValue );
            
            Delta_exposer.def( 
                "oldValue"
                , oldValue_function_value
                , ( bp::arg("component") ) );
        
        }
        { //::SireSystem::Delta::oldValues
        
            typedef ::SireCAS::Values const & ( ::SireSystem::Delta::*oldValues_function_type )(  ) const;
            oldValues_function_type oldValues_function_value( &::SireSystem::Delta::oldValues );
            
            Delta_exposer.def( 
                "oldValues"
                , oldValues_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        Delta_exposer.def( bp::self != bp::self );
        Delta_exposer.def( bp::self + bp::self );
        { //::SireSystem::Delta::operator=
        
            typedef ::SireSystem::Delta & ( ::SireSystem::Delta::*assign_function_type )( ::SireSystem::Delta const & ) ;
            assign_function_type assign_function_value( &::SireSystem::Delta::operator= );
            
            Delta_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Delta_exposer.def( bp::self == bp::self );
        Delta_exposer.staticmethod( "combine" );
        Delta_exposer.def( "__copy__", &__copy__);
        Delta_exposer.def( "__deepcopy__", &__copy__);
        Delta_exposer.def( "clone", &__copy__);
        Delta_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::Delta >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Delta_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::Delta >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Delta_exposer.def( "__str__", &pvt_get_name);
        Delta_exposer.def( "__repr__", &pvt_get_name);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PolariseCharges.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "polarisecharges.h"

#include "polarisecharges.h"

SireSystem::PolariseCharges __copy__(const SireSystem::PolariseCharges &other){ return SireSystem::PolariseCharges(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_PolariseCharges_class(){

    { //::SireSystem::PolariseCharges
        typedef bp::class_< SireSystem::PolariseCharges, bp::bases< SireSystem::ChargeConstraint, SireSystem::MoleculeConstraint, SireSystem::Constraint, SireBase::Property > > PolariseCharges_exposer_t;
        PolariseCharges_exposer_t PolariseCharges_exposer = PolariseCharges_exposer_t( "PolariseCharges" );
        bp::scope PolariseCharges_scope( PolariseCharges_exposer );
        PolariseCharges_exposer.def( bp::init< >() );
        PolariseCharges_exposer.def( bp::init< SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        PolariseCharges_exposer.def( bp::init< SireMol::MoleculeGroup const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molgroup"), bp::arg("chargegroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        PolariseCharges_exposer.def( bp::init< SireSystem::PolariseCharges const & >(( bp::arg("other") )) );
        PolariseCharges_exposer.def( bp::self != bp::self );
        { //::SireSystem::PolariseCharges::operator=
        
            typedef ::SireSystem::PolariseCharges & ( ::SireSystem::PolariseCharges::*assign_function_type )( ::SireSystem::PolariseCharges const & ) ;
            assign_function_type assign_function_value( &::SireSystem::PolariseCharges::operator= );
            
            PolariseCharges_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PolariseCharges_exposer.def( bp::self == bp::self );
        { //::SireSystem::PolariseCharges::toString
        
            typedef ::QString ( ::SireSystem::PolariseCharges::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSystem::PolariseCharges::toString );
            
            PolariseCharges_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSystem::PolariseCharges::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::PolariseCharges::typeName );
            
            PolariseCharges_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        PolariseCharges_exposer.staticmethod( "typeName" );
        PolariseCharges_exposer.def( "__copy__", &__copy__);
        PolariseCharges_exposer.def( "__deepcopy__", &__copy__);
        PolariseCharges_exposer.def( "clone", &__copy__);
        PolariseCharges_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::PolariseCharges >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PolariseCharges_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::PolariseCharges >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PolariseCharges_exposer.def( "__str__", &__str__< ::SireSystem::PolariseCharges > );
        PolariseCharges_exposer.def( "__repr__", &__str__< ::SireSystem::PolariseCharges > );
    }

}

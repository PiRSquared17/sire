// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "SpaceWrapper.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/molecule.h"

#include "SireMol/molecules.h"

#include "SireMol/moleditor.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/space.h"

#include "spacewrapper.h"

#include "system.h"

#include "spacewrapper.h"

SireSystem::SpaceWrapper __copy__(const SireSystem::SpaceWrapper &other){ return SireSystem::SpaceWrapper(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_SpaceWrapper_class(){

    { //::SireSystem::SpaceWrapper
        typedef bp::class_< SireSystem::SpaceWrapper, bp::bases< SireSystem::MoleculeConstraint, SireSystem::Constraint, SireBase::Property > > SpaceWrapper_exposer_t;
        SpaceWrapper_exposer_t SpaceWrapper_exposer = SpaceWrapper_exposer_t( "SpaceWrapper" );
        bp::scope SpaceWrapper_scope( SpaceWrapper_exposer );
        SpaceWrapper_exposer.def( bp::init< >() );
        SpaceWrapper_exposer.def( bp::init< SireFF::PointRef const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("point"), bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        SpaceWrapper_exposer.def( bp::init< SireSystem::SpaceWrapper const & >(( bp::arg("other") )) );
        { //::SireSystem::SpaceWrapper::involvesMolecule
        
            typedef bool ( ::SireSystem::SpaceWrapper::*involvesMolecule_function_type )( ::SireMol::MolNum ) const;
            involvesMolecule_function_type involvesMolecule_function_value( &::SireSystem::SpaceWrapper::involvesMolecule );
            
            SpaceWrapper_exposer.def( 
                "involvesMolecule"
                , involvesMolecule_function_value
                , ( bp::arg("molnum") ) );
        
        }
        { //::SireSystem::SpaceWrapper::involvesMoleculesFrom
        
            typedef bool ( ::SireSystem::SpaceWrapper::*involvesMoleculesFrom_function_type )( ::SireMol::Molecules const & ) const;
            involvesMoleculesFrom_function_type involvesMoleculesFrom_function_value( &::SireSystem::SpaceWrapper::involvesMoleculesFrom );
            
            SpaceWrapper_exposer.def( 
                "involvesMoleculesFrom"
                , involvesMoleculesFrom_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireSystem::SpaceWrapper::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireSystem::SpaceWrapper::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireSystem::SpaceWrapper::moleculeGroup );
            
            SpaceWrapper_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        SpaceWrapper_exposer.def( bp::self != bp::self );
        { //::SireSystem::SpaceWrapper::operator=
        
            typedef ::SireSystem::SpaceWrapper & ( ::SireSystem::SpaceWrapper::*assign_function_type )( ::SireSystem::SpaceWrapper const & ) ;
            assign_function_type assign_function_value( &::SireSystem::SpaceWrapper::operator= );
            
            SpaceWrapper_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SpaceWrapper_exposer.def( bp::self == bp::self );
        { //::SireSystem::SpaceWrapper::point
        
            typedef ::SireFF::Point const & ( ::SireSystem::SpaceWrapper::*point_function_type )(  ) const;
            point_function_type point_function_value( &::SireSystem::SpaceWrapper::point );
            
            SpaceWrapper_exposer.def( 
                "point"
                , point_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::SpaceWrapper::propertyMap
        
            typedef ::SireBase::PropertyMap const & ( ::SireSystem::SpaceWrapper::*propertyMap_function_type )(  ) const;
            propertyMap_function_type propertyMap_function_value( &::SireSystem::SpaceWrapper::propertyMap );
            
            SpaceWrapper_exposer.def( 
                "propertyMap"
                , propertyMap_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::SpaceWrapper::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::SpaceWrapper::typeName );
            
            SpaceWrapper_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::SpaceWrapper::update
        
            typedef ::SireMol::Molecules ( ::SireSystem::SpaceWrapper::*update_function_type )( ::SireSystem::System const & ) ;
            update_function_type update_function_value( &::SireSystem::SpaceWrapper::update );
            
            SpaceWrapper_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::SpaceWrapper::update
        
            typedef ::SireMol::Molecules ( ::SireSystem::SpaceWrapper::*update_function_type )( ::SireSystem::System const &,::SireMol::MolNum ) ;
            update_function_type update_function_value( &::SireSystem::SpaceWrapper::update );
            
            SpaceWrapper_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system"), bp::arg("molnum") ) );
        
        }
        { //::SireSystem::SpaceWrapper::update
        
            typedef ::SireMol::Molecules ( ::SireSystem::SpaceWrapper::*update_function_type )( ::SireSystem::System const &,::SireMol::Molecules const & ) ;
            update_function_type update_function_value( &::SireSystem::SpaceWrapper::update );
            
            SpaceWrapper_exposer.def( 
                "update"
                , update_function_value
                , ( bp::arg("system"), bp::arg("molecules") ) );
        
        }
        SpaceWrapper_exposer.staticmethod( "typeName" );
        SpaceWrapper_exposer.def( "__copy__", &__copy__);
        SpaceWrapper_exposer.def( "__deepcopy__", &__copy__);
        SpaceWrapper_exposer.def( "clone", &__copy__);
        SpaceWrapper_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::SpaceWrapper >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpaceWrapper_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::SpaceWrapper >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        SpaceWrapper_exposer.def( "__str__", &__str__< ::SireSystem::SpaceWrapper > );
        SpaceWrapper_exposer.def( "__repr__", &__str__< ::SireSystem::SpaceWrapper > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "GeometryComponent.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "geometrycomponent.h"

#include "geometrycomponent.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GeometryComponent_class(){

    { //::SireSystem::GeometryComponent
        typedef bp::class_< SireSystem::GeometryComponent, bp::bases< SireSystem::Constraint, SireBase::Property >, boost::noncopyable > GeometryComponent_exposer_t;
        GeometryComponent_exposer_t GeometryComponent_exposer = GeometryComponent_exposer_t( "GeometryComponent", bp::no_init );
        bp::scope GeometryComponent_scope( GeometryComponent_exposer );
        { //::SireSystem::GeometryComponent::apply
        
            typedef bool ( ::SireSystem::GeometryComponent::*apply_function_type )( ::SireSystem::System & ) const;
            apply_function_type apply_function_value( &::SireSystem::GeometryComponent::apply );
            
            GeometryComponent_exposer.def( 
                "apply"
                , apply_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::GeometryComponent::component
        
            typedef ::SireCAS::Symbol const & ( ::SireSystem::GeometryComponent::*component_function_type )(  ) const;
            component_function_type component_function_value( &::SireSystem::GeometryComponent::component );
            
            GeometryComponent_exposer.def( 
                "component"
                , component_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::GeometryComponent::expression
        
            typedef ::SireCAS::Expression const & ( ::SireSystem::GeometryComponent::*expression_function_type )(  ) const;
            expression_function_type expression_function_value( &::SireSystem::GeometryComponent::expression );
            
            GeometryComponent_exposer.def( 
                "expression"
                , expression_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::GeometryComponent::isSatisfied
        
            typedef bool ( ::SireSystem::GeometryComponent::*isSatisfied_function_type )( ::SireSystem::System const & ) const;
            isSatisfied_function_type isSatisfied_function_value( &::SireSystem::GeometryComponent::isSatisfied );
            
            GeometryComponent_exposer.def( 
                "isSatisfied"
                , isSatisfied_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::GeometryComponent::setSpace
        
            typedef void ( ::SireSystem::GeometryComponent::*setSpace_function_type )( ::SireVol::Space const & ) ;
            setSpace_function_type setSpace_function_value( &::SireSystem::GeometryComponent::setSpace );
            
            GeometryComponent_exposer.def( 
                "setSpace"
                , setSpace_function_value
                , ( bp::arg("space") ) );
        
        }
        { //::SireSystem::GeometryComponent::space
        
            typedef ::SireVol::Space const & ( ::SireSystem::GeometryComponent::*space_function_type )(  ) const;
            space_function_type space_function_value( &::SireSystem::GeometryComponent::space );
            
            GeometryComponent_exposer.def( 
                "space"
                , space_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::GeometryComponent::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::GeometryComponent::typeName );
            
            GeometryComponent_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        GeometryComponent_exposer.staticmethod( "typeName" );
        GeometryComponent_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::GeometryComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GeometryComponent_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::GeometryComponent >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GeometryComponent_exposer.def( "__str__", &__str__< ::SireSystem::GeometryComponent > );
        GeometryComponent_exposer.def( "__repr__", &__str__< ::SireSystem::GeometryComponent > );
    }

}

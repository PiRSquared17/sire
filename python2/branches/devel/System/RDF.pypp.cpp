// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "RDF.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/pairmatrix.hpp"

#include "SireMaths/constants.h"

#include "SireMol/atom.h"

#include "SireMol/selector.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/space.h"

#include "rdfmonitor.h"

#include "system.h"

#include "rdfmonitor.h"

SireSystem::RDF __copy__(const SireSystem::RDF &other){ return SireSystem::RDF(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_RDF_class(){

    { //::SireSystem::RDF
        typedef bp::class_< SireSystem::RDF, bp::bases< SireMaths::HistogramRange > > RDF_exposer_t;
        RDF_exposer_t RDF_exposer = RDF_exposer_t( "RDF" );
        bp::scope RDF_scope( RDF_exposer );
        RDF_exposer.def( bp::init< >() );
        RDF_exposer.def( bp::init< SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, bp::optional< int > >(( bp::arg("min"), bp::arg("max"), bp::arg("nbins")=(int)(100) )) );
        RDF_exposer.def( bp::init< SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const & >(( bp::arg("min"), bp::arg("max"), bp::arg("binwidth") )) );
        RDF_exposer.def( bp::init< SireMaths::HistogramRangeT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & >(( bp::arg("range") )) );
        RDF_exposer.def( bp::init< SireSystem::RDF const & >(( bp::arg("other") )) );
        { //::SireSystem::RDF::add
        
            typedef void ( ::SireSystem::RDF::*add_function_type )( ::SireUnits::Dimension::Length const & ) ;
            add_function_type add_function_value( &::SireSystem::RDF::add );
            
            RDF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("distance") ) );
        
        }
        { //::SireSystem::RDF::add
        
            typedef void ( ::SireSystem::RDF::*add_function_type )( ::SireSystem::RDF const & ) ;
            add_function_type add_function_value( &::SireSystem::RDF::add );
            
            RDF_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireSystem::RDF::clear
        
            typedef void ( ::SireSystem::RDF::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::SireSystem::RDF::clear );
            
            RDF_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::SireSystem::RDF::distanceHistogram
        
            typedef ::SireMaths::HistogramT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > ( ::SireSystem::RDF::*distanceHistogram_function_type )(  ) ;
            distanceHistogram_function_type distanceHistogram_function_value( &::SireSystem::RDF::distanceHistogram );
            
            RDF_exposer.def( 
                "distanceHistogram"
                , distanceHistogram_function_value );
        
        }
        RDF_exposer.def( bp::self != bp::self );
        { //::SireSystem::RDF::operator=
        
            typedef ::SireSystem::RDF & ( ::SireSystem::RDF::*assign_function_type )( ::SireSystem::RDF const & ) ;
            assign_function_type assign_function_value( &::SireSystem::RDF::operator= );
            
            RDF_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RDF_exposer.def( bp::self == bp::self );
        { //::SireSystem::RDF::operator[]
        
            typedef ::SireMaths::HistogramValueT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > ( ::SireSystem::RDF::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::RDF::operator[] );
            
            RDF_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireSystem::RDF::toString
        
            typedef ::QString ( ::SireSystem::RDF::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSystem::RDF::toString );
            
            RDF_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSystem::RDF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::RDF::typeName );
            
            RDF_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireSystem::RDF::what
        
            typedef char const * ( ::SireSystem::RDF::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireSystem::RDF::what );
            
            RDF_exposer.def( 
                "what"
                , what_function_value );
        
        }
        RDF_exposer.staticmethod( "typeName" );
        RDF_exposer.def( "__copy__", &__copy__);
        RDF_exposer.def( "__deepcopy__", &__copy__);
        RDF_exposer.def( "clone", &__copy__);
        RDF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::RDF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RDF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::RDF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RDF_exposer.def( "__str__", &__str__< ::SireSystem::RDF > );
        RDF_exposer.def( "__repr__", &__str__< ::SireSystem::RDF > );
    }

}

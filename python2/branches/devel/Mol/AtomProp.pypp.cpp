// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AtomProp.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "atombeads.h"

#include "atomcharges.h"

#include "atomelements.h"

#include "atomenergies.h"

#include "atomforces.h"

#include "atommasses.h"

#include "atompolarisabilities.h"

#include "atomproperty.hpp"

#include "atomvelocities.h"

#include "atomproperty.hpp"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_AtomProp_class(){

    { //::SireMol::AtomProp
        typedef bp::class_< SireMol::AtomProp, bp::bases< SireMol::MolViewProperty, SireBase::Property >, boost::noncopyable > AtomProp_exposer_t;
        AtomProp_exposer_t AtomProp_exposer = AtomProp_exposer_t( "AtomProp", bp::no_init );
        bp::scope AtomProp_scope( AtomProp_exposer );
        { //::SireMol::AtomProp::assertCanConvert
        
            typedef void ( ::SireMol::AtomProp::*assertCanConvert_function_type )( ::QVariant const & ) const;
            assertCanConvert_function_type assertCanConvert_function_value( &::SireMol::AtomProp::assertCanConvert );
            
            AtomProp_exposer.def( 
                "assertCanConvert"
                , assertCanConvert_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMol::AtomProp::assignFrom
        
            typedef void ( ::SireMol::AtomProp::*assignFrom_function_type )( ::SireMol::AtomVariantProperty const & ) ;
            assignFrom_function_type assignFrom_function_value( &::SireMol::AtomProp::assignFrom );
            
            AtomProp_exposer.def( 
                "assignFrom"
                , assignFrom_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireMol::AtomProp::canConvert
        
            typedef bool ( ::SireMol::AtomProp::*canConvert_function_type )( ::QVariant const & ) const;
            canConvert_function_type canConvert_function_value( &::SireMol::AtomProp::canConvert );
            
            AtomProp_exposer.def( 
                "canConvert"
                , canConvert_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMol::AtomProp::operator=
        
            typedef ::SireMol::AtomProp & ( ::SireMol::AtomProp::*assign_function_type )( ::SireMol::AtomVariantProperty const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomProp::operator= );
            
            AtomProp_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::SireMol::AtomProp::toVariant
        
            typedef ::SireMol::AtomVariantProperty ( ::SireMol::AtomProp::*toVariant_function_type )(  ) const;
            toVariant_function_type toVariant_function_value( &::SireMol::AtomProp::toVariant );
            
            AtomProp_exposer.def( 
                "toVariant"
                , toVariant_function_value );
        
        }
        AtomProp_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::AtomProp >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomProp_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::AtomProp >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomProp_exposer.def( "__str__", &__str__< ::SireMol::AtomProp > );
        AtomProp_exposer.def( "__repr__", &__str__< ::SireMol::AtomProp > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "VelocityGenerator.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "velocitygenerator.h"

#include "velocitygenerator.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_VelocityGenerator_class(){

    { //::SireMove::VelocityGenerator
        typedef bp::class_< SireMove::VelocityGenerator, bp::bases< SireBase::Property >, boost::noncopyable > VelocityGenerator_exposer_t;
        VelocityGenerator_exposer_t VelocityGenerator_exposer = VelocityGenerator_exposer_t( "VelocityGenerator", bp::no_init );
        bp::scope VelocityGenerator_scope( VelocityGenerator_exposer );
        { //::SireMove::VelocityGenerator::null
        
            typedef ::SireMove::NullVelocityGenerator const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMove::VelocityGenerator::null );
            
            VelocityGenerator_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::VelocityGenerator::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::VelocityGenerator::typeName );
            
            VelocityGenerator_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        VelocityGenerator_exposer.staticmethod( "null" );
        VelocityGenerator_exposer.staticmethod( "typeName" );
        VelocityGenerator_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::VelocityGenerator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VelocityGenerator_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::VelocityGenerator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VelocityGenerator_exposer.def( "__str__", &__str__< ::SireMove::VelocityGenerator > );
        VelocityGenerator_exposer.def( "__repr__", &__str__< ::SireMove::VelocityGenerator > );
    }

}

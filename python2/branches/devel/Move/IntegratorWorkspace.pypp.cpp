// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "IntegratorWorkspace.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/quickcopy.hpp"

#include "SireMol/atomcoords.h"

#include "SireMol/errors.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculeview.h"

#include "SireMol/moleditor.h"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "integratorworkspace.h"

#include "velocitygenerator.h"

#include "integratorworkspace.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_IntegratorWorkspace_class(){

    { //::SireMove::IntegratorWorkspace
        typedef bp::class_< SireMove::IntegratorWorkspace, bp::bases< SireBase::Property >, boost::noncopyable > IntegratorWorkspace_exposer_t;
        IntegratorWorkspace_exposer_t IntegratorWorkspace_exposer = IntegratorWorkspace_exposer_t( "IntegratorWorkspace", bp::no_init );
        bp::scope IntegratorWorkspace_scope( IntegratorWorkspace_exposer );
        { //::SireMove::IntegratorWorkspace::forceTable
        
            typedef ::SireFF::ForceTable const & ( ::SireMove::IntegratorWorkspace::*forceTable_function_type )(  ) const;
            forceTable_function_type forceTable_function_value( &::SireMove::IntegratorWorkspace::forceTable );
            
            IntegratorWorkspace_exposer.def( 
                "forceTable"
                , forceTable_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::IntegratorWorkspace::kineticEnergy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireMove::IntegratorWorkspace::*kineticEnergy_function_type )(  ) const;
            kineticEnergy_function_type kineticEnergy_function_value( &::SireMove::IntegratorWorkspace::kineticEnergy );
            
            IntegratorWorkspace_exposer.def( 
                "kineticEnergy"
                , kineticEnergy_function_value );
        
        }
        { //::SireMove::IntegratorWorkspace::kineticEnergy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireMove::IntegratorWorkspace::*kineticEnergy_function_type )( ::SireMol::MoleculeView const & ) const;
            kineticEnergy_function_type kineticEnergy_function_value( &::SireMove::IntegratorWorkspace::kineticEnergy );
            
            IntegratorWorkspace_exposer.def( 
                "kineticEnergy"
                , kineticEnergy_function_value
                , ( bp::arg("molview") ) );
        
        }
        { //::SireMove::IntegratorWorkspace::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMove::IntegratorWorkspace::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireMove::IntegratorWorkspace::moleculeGroup );
            
            IntegratorWorkspace_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::IntegratorWorkspace::null
        
            typedef ::SireMove::NullIntegratorWorkspace const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMove::IntegratorWorkspace::null );
            
            IntegratorWorkspace_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::IntegratorWorkspace::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::IntegratorWorkspace::typeName );
            
            IntegratorWorkspace_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        IntegratorWorkspace_exposer.staticmethod( "null" );
        IntegratorWorkspace_exposer.staticmethod( "typeName" );
        IntegratorWorkspace_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::IntegratorWorkspace >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        IntegratorWorkspace_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::IntegratorWorkspace >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        IntegratorWorkspace_exposer.def( "__str__", &__str__< ::SireMove::IntegratorWorkspace > );
        IntegratorWorkspace_exposer.def( "__repr__", &__str__< ::SireMove::IntegratorWorkspace > );
    }

}

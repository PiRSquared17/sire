// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Titrator.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "titrator.h"

#include "titrator.h"

SireMove::Titrator __copy__(const SireMove::Titrator &other){ return SireMove::Titrator(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Titrator_class(){

    { //::SireMove::Titrator
        typedef bp::class_< SireMove::Titrator, bp::bases< SireBase::Property > > Titrator_exposer_t;
        Titrator_exposer_t Titrator_exposer = Titrator_exposer_t( "Titrator", bp::init< >() );
        bp::scope Titrator_scope( Titrator_exposer );
        Titrator_exposer.def( bp::init< SireMove::Titrator const & >(( bp::arg("other") )) );
        Titrator_exposer.def( bp::self != bp::self );
        { //::SireMove::Titrator::operator=
        
            typedef ::SireMove::Titrator & ( ::SireMove::Titrator::*assign_function_type )( ::SireMove::Titrator const & ) ;
            assign_function_type assign_function_value( &::SireMove::Titrator::operator= );
            
            Titrator_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Titrator_exposer.def( bp::self == bp::self );
        { //::SireMove::Titrator::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::Titrator::typeName );
            
            Titrator_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMove::Titrator::what
        
            typedef char const * ( ::SireMove::Titrator::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMove::Titrator::what );
            
            Titrator_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Titrator_exposer.staticmethod( "typeName" );
        Titrator_exposer.def( "__copy__", &__copy__);
        Titrator_exposer.def( "__deepcopy__", &__copy__);
        Titrator_exposer.def( "clone", &__copy__);
        Titrator_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::Titrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Titrator_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::Titrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Titrator_exposer.def( "__str__", &__str__< ::SireMove::Titrator > );
        Titrator_exposer.def( "__repr__", &__str__< ::SireMove::Titrator > );
    }

}

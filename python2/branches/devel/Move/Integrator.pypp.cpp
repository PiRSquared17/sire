// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Integrator.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireFF/forcefields.h"

#include "SireFF/forcetable.h"

#include "SireMaths/rangenerator.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleculeview.h"

#include "SireStream/datastream.h"

#include "SireSystem/system.h"

#include "integrator.h"

#include "integratorworkspace.h"

#include "integrator.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_Integrator_class(){

    { //::SireMove::Integrator
        typedef bp::class_< SireMove::Integrator, bp::bases< SireBase::Property >, boost::noncopyable > Integrator_exposer_t;
        Integrator_exposer_t Integrator_exposer = Integrator_exposer_t( "Integrator", bp::no_init );
        bp::scope Integrator_scope( Integrator_exposer );
        { //::SireMove::Integrator::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::Integrator::*createWorkspace_function_type )(  ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::Integrator::createWorkspace );
            
            Integrator_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value );
        
        }
        { //::SireMove::Integrator::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::Integrator::*createWorkspace_function_type )( ::SireMol::MoleculeGroup const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::Integrator::createWorkspace );
            
            Integrator_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMove::Integrator::integrate
        
            typedef void ( ::SireMove::Integrator::*integrate_function_type )( ::SireSystem::System &,::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const &,::SireBase::PropertyMap const & ) const;
            integrate_function_type integrate_function_value( &::SireMove::Integrator::integrate );
            
            Integrator_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("system"), bp::arg("workspace"), bp::arg("nrg_component"), bp::arg("map") ) );
        
        }
        { //::SireMove::Integrator::integrate
        
            typedef void ( ::SireMove::Integrator::*integrate_function_type )( ::SireSystem::System &,::SireMove::IntegratorWorkspace & ) const;
            integrate_function_type integrate_function_value( &::SireMove::Integrator::integrate );
            
            Integrator_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("system"), bp::arg("workspace") ) );
        
        }
        { //::SireMove::Integrator::integrate
        
            typedef void ( ::SireMove::Integrator::*integrate_function_type )( ::SireSystem::System &,::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireMove::Integrator::integrate );
            
            Integrator_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("system"), bp::arg("workspace"), bp::arg("nrg_component") ) );
        
        }
        { //::SireMove::Integrator::null
        
            typedef ::SireMove::NullIntegrator const & ( *null_function_type )(  );
            null_function_type null_function_value( &::SireMove::Integrator::null );
            
            Integrator_exposer.def( 
                "null"
                , null_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::Integrator::setGenerator
        
            typedef void ( ::SireMove::Integrator::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::Integrator::setGenerator );
            
            Integrator_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("generator") ) );
        
        }
        { //::SireMove::Integrator::setTimeStep
        
            typedef void ( ::SireMove::Integrator::*setTimeStep_function_type )( ::SireUnits::Dimension::Time const & ) ;
            setTimeStep_function_type setTimeStep_function_value( &::SireMove::Integrator::setTimeStep );
            
            Integrator_exposer.def( 
                "setTimeStep"
                , setTimeStep_function_value
                , ( bp::arg("timestep") ) );
        
        }
        { //::SireMove::Integrator::timeStep
        
            typedef ::SireUnits::Dimension::Time ( ::SireMove::Integrator::*timeStep_function_type )(  ) const;
            timeStep_function_type timeStep_function_value( &::SireMove::Integrator::timeStep );
            
            Integrator_exposer.def( 
                "timeStep"
                , timeStep_function_value );
        
        }
        { //::SireMove::Integrator::toString
        
            typedef ::QString ( ::SireMove::Integrator::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::Integrator::toString );
            
            Integrator_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::Integrator::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::Integrator::typeName );
            
            Integrator_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Integrator_exposer.staticmethod( "null" );
        Integrator_exposer.staticmethod( "typeName" );
        Integrator_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::Integrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Integrator_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::Integrator >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Integrator_exposer.def( "__str__", &__str__< ::SireMove::Integrator > );
        Integrator_exposer.def( "__repr__", &__str__< ::SireMove::Integrator > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MolecularDynamics.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/rangenerator.h"

#include "SireMol/moleculegroup.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/units.h"

#include "SireVol/space.h"

#include "moleculardynamics.h"

#include "velocityverlet.h"

#include "moleculardynamics.h"

SireMove::MolecularDynamics __copy__(const SireMove::MolecularDynamics &other){ return SireMove::MolecularDynamics(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MolecularDynamics_class(){

    { //::SireMove::MolecularDynamics
        typedef bp::class_< SireMove::MolecularDynamics, bp::bases< SireMove::Dynamics, SireMove::Move, SireBase::Property > > MolecularDynamics_exposer_t;
        MolecularDynamics_exposer_t MolecularDynamics_exposer = MolecularDynamics_exposer_t( "MolecularDynamics", bp::init< bp::optional< SireBase::PropertyMap const & > >(( bp::arg("map")=SireBase::PropertyMap() )) );
        bp::scope MolecularDynamics_scope( MolecularDynamics_exposer );
        MolecularDynamics_exposer.def( bp::init< SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        MolecularDynamics_exposer.def( bp::init< SireMove::Integrator const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("integrator"), bp::arg("map")=SireBase::PropertyMap() )) );
        MolecularDynamics_exposer.def( bp::init< SireMol::MoleculeGroup const &, SireMove::Integrator const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("molgroup"), bp::arg("integrator"), bp::arg("map")=SireBase::PropertyMap() )) );
        MolecularDynamics_exposer.def( bp::init< SireMove::Integrator const &, SireMol::MoleculeGroup const &, bp::optional< SireBase::PropertyMap const & > >(( bp::arg("integrator"), bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() )) );
        MolecularDynamics_exposer.def( bp::init< SireMove::MolecularDynamics const & >(( bp::arg("other") )) );
        { //::SireMove::MolecularDynamics::clearStatistics
        
            typedef void ( ::SireMove::MolecularDynamics::*clearStatistics_function_type )(  ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireMove::MolecularDynamics::clearStatistics );
            
            MolecularDynamics_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value );
        
        }
        { //::SireMove::MolecularDynamics::integrator
        
            typedef ::SireMove::Integrator const & ( ::SireMove::MolecularDynamics::*integrator_function_type )(  ) const;
            integrator_function_type integrator_function_value( &::SireMove::MolecularDynamics::integrator );
            
            MolecularDynamics_exposer.def( 
                "integrator"
                , integrator_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::MolecularDynamics::kineticEnergy
        
            typedef ::SireUnits::Dimension::MolarEnergy ( ::SireMove::MolecularDynamics::*kineticEnergy_function_type )(  ) const;
            kineticEnergy_function_type kineticEnergy_function_value( &::SireMove::MolecularDynamics::kineticEnergy );
            
            MolecularDynamics_exposer.def( 
                "kineticEnergy"
                , kineticEnergy_function_value );
        
        }
        { //::SireMove::MolecularDynamics::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMove::MolecularDynamics::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireMove::MolecularDynamics::moleculeGroup );
            
            MolecularDynamics_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::MolecularDynamics::move
        
            typedef void ( ::SireMove::MolecularDynamics::*move_function_type )( ::SireSystem::System &,int,bool ) ;
            move_function_type move_function_value( &::SireMove::MolecularDynamics::move );
            
            MolecularDynamics_exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("system"), bp::arg("nmoves"), bp::arg("record_stats")=(bool)(true) ) );
        
        }
        { //::SireMove::MolecularDynamics::nMoves
        
            typedef int ( ::SireMove::MolecularDynamics::*nMoves_function_type )(  ) const;
            nMoves_function_type nMoves_function_value( &::SireMove::MolecularDynamics::nMoves );
            
            MolecularDynamics_exposer.def( 
                "nMoves"
                , nMoves_function_value );
        
        }
        MolecularDynamics_exposer.def( bp::self != bp::self );
        { //::SireMove::MolecularDynamics::operator=
        
            typedef ::SireMove::MolecularDynamics & ( ::SireMove::MolecularDynamics::*assign_function_type )( ::SireMove::MolecularDynamics const & ) ;
            assign_function_type assign_function_value( &::SireMove::MolecularDynamics::operator= );
            
            MolecularDynamics_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MolecularDynamics_exposer.def( bp::self == bp::self );
        { //::SireMove::MolecularDynamics::setCoordinatesProperty
        
            typedef void ( ::SireMove::MolecularDynamics::*setCoordinatesProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setCoordinatesProperty_function_type setCoordinatesProperty_function_value( &::SireMove::MolecularDynamics::setCoordinatesProperty );
            
            MolecularDynamics_exposer.def( 
                "setCoordinatesProperty"
                , setCoordinatesProperty_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMove::MolecularDynamics::setElementProperty
        
            typedef void ( ::SireMove::MolecularDynamics::*setElementProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setElementProperty_function_type setElementProperty_function_value( &::SireMove::MolecularDynamics::setElementProperty );
            
            MolecularDynamics_exposer.def( 
                "setElementProperty"
                , setElementProperty_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMove::MolecularDynamics::setGenerator
        
            typedef void ( ::SireMove::MolecularDynamics::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::MolecularDynamics::setGenerator );
            
            MolecularDynamics_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("generator") ) );
        
        }
        { //::SireMove::MolecularDynamics::setIntegrator
        
            typedef void ( ::SireMove::MolecularDynamics::*setIntegrator_function_type )( ::SireMove::Integrator const & ) ;
            setIntegrator_function_type setIntegrator_function_value( &::SireMove::MolecularDynamics::setIntegrator );
            
            MolecularDynamics_exposer.def( 
                "setIntegrator"
                , setIntegrator_function_value
                , ( bp::arg("integrator") ) );
        
        }
        { //::SireMove::MolecularDynamics::setMassesProperty
        
            typedef void ( ::SireMove::MolecularDynamics::*setMassesProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setMassesProperty_function_type setMassesProperty_function_value( &::SireMove::MolecularDynamics::setMassesProperty );
            
            MolecularDynamics_exposer.def( 
                "setMassesProperty"
                , setMassesProperty_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMove::MolecularDynamics::setMoleculeGroup
        
            typedef void ( ::SireMove::MolecularDynamics::*setMoleculeGroup_function_type )( ::SireMol::MoleculeGroup const & ) ;
            setMoleculeGroup_function_type setMoleculeGroup_function_value( &::SireMove::MolecularDynamics::setMoleculeGroup );
            
            MolecularDynamics_exposer.def( 
                "setMoleculeGroup"
                , setMoleculeGroup_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMove::MolecularDynamics::setMoleculeGroup
        
            typedef void ( ::SireMove::MolecularDynamics::*setMoleculeGroup_function_type )( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) ;
            setMoleculeGroup_function_type setMoleculeGroup_function_value( &::SireMove::MolecularDynamics::setMoleculeGroup );
            
            MolecularDynamics_exposer.def( 
                "setMoleculeGroup"
                , setMoleculeGroup_function_value
                , ( bp::arg("molgroup"), bp::arg("map") ) );
        
        }
        { //::SireMove::MolecularDynamics::setSpaceProperty
        
            typedef void ( ::SireMove::MolecularDynamics::*setSpaceProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setSpaceProperty_function_type setSpaceProperty_function_value( &::SireMove::MolecularDynamics::setSpaceProperty );
            
            MolecularDynamics_exposer.def( 
                "setSpaceProperty"
                , setSpaceProperty_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMove::MolecularDynamics::setTimeStep
        
            typedef void ( ::SireMove::MolecularDynamics::*setTimeStep_function_type )( ::SireUnits::Dimension::Time const & ) ;
            setTimeStep_function_type setTimeStep_function_value( &::SireMove::MolecularDynamics::setTimeStep );
            
            MolecularDynamics_exposer.def( 
                "setTimeStep"
                , setTimeStep_function_value
                , ( bp::arg("timestep") ) );
        
        }
        { //::SireMove::MolecularDynamics::setVelocitiesProperty
        
            typedef void ( ::SireMove::MolecularDynamics::*setVelocitiesProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setVelocitiesProperty_function_type setVelocitiesProperty_function_value( &::SireMove::MolecularDynamics::setVelocitiesProperty );
            
            MolecularDynamics_exposer.def( 
                "setVelocitiesProperty"
                , setVelocitiesProperty_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMove::MolecularDynamics::timeStep
        
            typedef ::SireUnits::Dimension::Time ( ::SireMove::MolecularDynamics::*timeStep_function_type )(  ) const;
            timeStep_function_type timeStep_function_value( &::SireMove::MolecularDynamics::timeStep );
            
            MolecularDynamics_exposer.def( 
                "timeStep"
                , timeStep_function_value );
        
        }
        { //::SireMove::MolecularDynamics::toString
        
            typedef ::QString ( ::SireMove::MolecularDynamics::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::MolecularDynamics::toString );
            
            MolecularDynamics_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::MolecularDynamics::totalTime
        
            typedef ::SireUnits::Dimension::Time ( ::SireMove::MolecularDynamics::*totalTime_function_type )(  ) const;
            totalTime_function_type totalTime_function_value( &::SireMove::MolecularDynamics::totalTime );
            
            MolecularDynamics_exposer.def( 
                "totalTime"
                , totalTime_function_value );
        
        }
        { //::SireMove::MolecularDynamics::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::MolecularDynamics::typeName );
            
            MolecularDynamics_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        MolecularDynamics_exposer.staticmethod( "typeName" );
        MolecularDynamics_exposer.def( "__copy__", &__copy__);
        MolecularDynamics_exposer.def( "__deepcopy__", &__copy__);
        MolecularDynamics_exposer.def( "clone", &__copy__);
        MolecularDynamics_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::MolecularDynamics >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MolecularDynamics_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::MolecularDynamics >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MolecularDynamics_exposer.def( "__str__", &__str__< ::SireMove::MolecularDynamics > );
        MolecularDynamics_exposer.def( "__repr__", &__str__< ::SireMove::MolecularDynamics > );
    }

}

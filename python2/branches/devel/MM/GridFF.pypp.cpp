// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GridFF.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "cljpotential.h"

#include "gridff.h"

#include "gridff.h"

SireMM::GridFF __copy__(const SireMM::GridFF &other){ return SireMM::GridFF(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GridFF_class(){

    { //::SireMM::GridFF
        typedef bp::class_< SireMM::GridFF, bp::bases< SireFF::Inter2B2G3DFF<SireMM::CLJPotentialInterface<SireMM::InterCLJPotential> >, SireFF::FF3D, SireFF::Inter2B2GFF<SireMM::CLJPotentialInterface<SireMM::InterCLJPotential> >, SireMM::CLJPotentialInterface<SireMM::InterCLJPotential>, SireFF::G2FF, SireFF::FF, SireMol::MolGroupsBase, SireBase::Property > > GridFF_exposer_t;
        GridFF_exposer_t GridFF_exposer = GridFF_exposer_t( "GridFF", bp::init< >() );
        bp::scope GridFF_scope( GridFF_exposer );
        GridFF_exposer.def( bp::init< QString const & >(( bp::arg("name") )) );
        GridFF_exposer.def( bp::init< SireMM::GridFF const & >(( bp::arg("other") )) );
        GridFF_exposer.def( bp::self != bp::self );
        { //::SireMM::GridFF::operator=
        
            typedef ::SireMM::GridFF & ( ::SireMM::GridFF::*assign_function_type )( ::SireMM::GridFF const & ) ;
            assign_function_type assign_function_value( &::SireMM::GridFF::operator= );
            
            GridFF_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        GridFF_exposer.def( bp::self == bp::self );
        { //::SireMM::GridFF::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::GridFF::typeName );
            
            GridFF_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMM::GridFF::what
        
            typedef char const * ( ::SireMM::GridFF::*what_function_type )(  ) const;
            what_function_type what_function_value( &::SireMM::GridFF::what );
            
            GridFF_exposer.def( 
                "what"
                , what_function_value );
        
        }
        GridFF_exposer.staticmethod( "typeName" );
        GridFF_exposer.def( "__copy__", &__copy__);
        GridFF_exposer.def( "__deepcopy__", &__copy__);
        GridFF_exposer.def( "clone", &__copy__);
        GridFF_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::GridFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GridFF_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::GridFF >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GridFF_exposer.def( "__str__", &__str__< ::SireMM::GridFF > );
        GridFF_exposer.def( "__repr__", &__str__< ::SireMM::GridFF > );
    }

}

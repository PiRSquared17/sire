// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Semaphore.pypp.hpp"

namespace bp = boost::python;

#include "forages.h"

#include "semaphore.h"

#include "semaphore.h"

#include "Siren/logger.h"

const char* pvt_get_name(const Siren::Semaphore&){ return "Siren::Semaphore";}

void register_Semaphore_class(){

    { //::Siren::Semaphore
        typedef bp::class_< Siren::Semaphore, boost::noncopyable > Semaphore_exposer_t;
        Semaphore_exposer_t Semaphore_exposer = Semaphore_exposer_t( "Semaphore", bp::no_init );
        bp::scope Semaphore_scope( Semaphore_exposer );
        { //::Siren::Semaphore::acquire
        
            typedef void ( ::Siren::Semaphore::*acquire_function_type )( int ) ;
            acquire_function_type acquire_function_value( &::Siren::Semaphore::acquire );
            
            Semaphore_exposer.def( 
                "acquire"
                , acquire_function_value
                , ( bp::arg("n")=(int)(1) ) );
        
        }
        { //::Siren::Semaphore::available
        
            typedef int ( ::Siren::Semaphore::*available_function_type )(  ) const;
            available_function_type available_function_value( &::Siren::Semaphore::available );
            
            Semaphore_exposer.def( 
                "available"
                , available_function_value );
        
        }
        { //::Siren::Semaphore::release
        
            typedef void ( ::Siren::Semaphore::*release_function_type )( int ) ;
            release_function_type release_function_value( &::Siren::Semaphore::release );
            
            Semaphore_exposer.def( 
                "release"
                , release_function_value
                , ( bp::arg("n")=(int)(1) ) );
        
        }
        { //::Siren::Semaphore::tryAcquire
        
            typedef bool ( ::Siren::Semaphore::*tryAcquire_function_type )( int ) ;
            tryAcquire_function_type tryAcquire_function_value( &::Siren::Semaphore::tryAcquire );
            
            Semaphore_exposer.def( 
                "tryAcquire"
                , tryAcquire_function_value
                , ( bp::arg("n")=(int)(1) ) );
        
        }
        { //::Siren::Semaphore::tryAcquire
        
            typedef bool ( ::Siren::Semaphore::*tryAcquire_function_type )( int,int ) ;
            tryAcquire_function_type tryAcquire_function_value( &::Siren::Semaphore::tryAcquire );
            
            Semaphore_exposer.def( 
                "tryAcquire"
                , tryAcquire_function_value
                , ( bp::arg("n"), bp::arg("timeout") ) );
        
        }
        Semaphore_exposer.def( "__str__", &pvt_get_name);
        Semaphore_exposer.def( "__repr__", &pvt_get_name);
    }

}

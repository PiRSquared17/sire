// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Object.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "class.h"

#include "logger.h"

#include "object.h"

#include "objptr.hpp"

#include "objref.h"

#include "stream.h"

#include "tester.h"

#include <QMutex>

#include "object.h"

#include "Siren/logger.h"

#include "Qt/qdatastream.hpp"

#include "Siren/str.hpp"

void register_Object_class(){

    { //::Siren::Object
        typedef bp::class_< Siren::Object, boost::noncopyable > Object_exposer_t;
        Object_exposer_t Object_exposer = Object_exposer_t( "Object", bp::no_init );
        bp::scope Object_scope( Object_exposer );
        { //::Siren::Object::copy
        
            typedef void ( ::Siren::Object::*copy_function_type )( ::Siren::Object const & ) ;
            copy_function_type copy_function_value( &::Siren::Object::copy );
            
            Object_exposer.def( 
                "copy"
                , copy_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::Siren::Object::equals
        
            typedef bool ( ::Siren::Object::*equals_function_type )( ::Siren::Object const & ) const;
            equals_function_type equals_function_value( &::Siren::Object::equals );
            
            Object_exposer.def( 
                "equals"
                , equals_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::Siren::Object::getClass
        
            typedef ::Siren::Class const & ( ::Siren::Object::*getClass_function_type )(  ) const;
            getClass_function_type getClass_function_value( &::Siren::Object::getClass );
            
            Object_exposer.def( 
                "getClass"
                , getClass_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::Siren::Object::hashCode
        
            typedef ::uint ( ::Siren::Object::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::Object::hashCode );
            
            Object_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::Siren::Object::load
        
            typedef void ( ::Siren::Object::*load_function_type )( ::Siren::Stream & ) ;
            load_function_type load_function_value( &::Siren::Object::load );
            
            Object_exposer.def( 
                "load"
                , load_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Object::save
        
            typedef void ( ::Siren::Object::*save_function_type )( ::Siren::Stream & ) const;
            save_function_type save_function_value( &::Siren::Object::save );
            
            Object_exposer.def( 
                "save"
                , save_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Object::stream
        
            typedef void ( ::Siren::Object::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::Object::stream );
            
            Object_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Object::test
        
            typedef bool ( ::Siren::Object::*test_function_type )(  ) const;
            test_function_type test_function_value( &::Siren::Object::test );
            
            Object_exposer.def( 
                "test"
                , test_function_value );
        
        }
        { //::Siren::Object::test
        
            typedef bool ( ::Siren::Object::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::Object::test );
            
            Object_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::Object::toString
        
            typedef ::QString ( ::Siren::Object::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::Object::toString );
            
            Object_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Siren::Object::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::Object::typeName );
            
            Object_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Siren::Object::what
        
            typedef ::QString ( ::Siren::Object::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Siren::Object::what );
            
            Object_exposer.def( 
                "what"
                , what_function_value );
        
        }
        Object_exposer.staticmethod( "typeName" );
        Object_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Siren::Object >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Object_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Siren::Object >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Object_exposer.def( "__str__", &__str__< ::Siren::Object > );
        Object_exposer.def( "__repr__", &__str__< ::Siren::Object > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "_Siren_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "getbacktrace.h"

#include <QDebug>

#include <QObject>

#include <QRegExp>

#include <QString>

#include "getbacktrace.h"

#include "Siren/errors.h"

#include "Siren/exception.h"

#include "class.h"

#include "exception.h"

#include "getbacktrace.h"

#include "logger.h"

#include "stream.h"

#include "streamqt.h"

#include "tester.h"

#include <QTextStream>

#include <QThreadStorage>

#include "exception.h"

#include "Siren/errors.h"

#include "Siren/exception.h"

#include "class.h"

#include "exception.h"

#include "getbacktrace.h"

#include "logger.h"

#include "stream.h"

#include "streamqt.h"

#include "tester.h"

#include <QTextStream>

#include <QThreadStorage>

#include "exception.h"

#include "Siren/errors.h"

#include "Siren/exception.h"

#include "class.h"

#include "exception.h"

#include "getbacktrace.h"

#include "logger.h"

#include "stream.h"

#include "streamqt.h"

#include "tester.h"

#include <QTextStream>

#include <QThreadStorage>

#include "exception.h"

#include "Siren/errors.h"

#include "Siren/exception.h"

#include "class.h"

#include "exception.h"

#include "getbacktrace.h"

#include "logger.h"

#include "stream.h"

#include "streamqt.h"

#include "tester.h"

#include <QTextStream>

#include <QThreadStorage>

#include "exception.h"

#include "Siren/errors.h"

#include "Siren/exception.h"

#include "class.h"

#include "exception.h"

#include "getbacktrace.h"

#include "logger.h"

#include "stream.h"

#include "streamqt.h"

#include "tester.h"

#include <QTextStream>

#include <QThreadStorage>

#include "exception.h"

void register_free_functions(){

    { //::Siren::getBackTrace
    
        typedef ::QStringList ( *getBackTrace_function_type )(  );
        getBackTrace_function_type getBackTrace_function_value( &::Siren::getBackTrace );
        
        bp::def( 
            "getBackTrace"
            , getBackTrace_function_value );
    
    }

    { //::Siren::getPIDString
    
        typedef ::QString ( *getPIDString_function_type )(  );
        getPIDString_function_type getPIDString_function_value( &::Siren::getPIDString );
        
        bp::def( 
            "getPIDString"
            , getPIDString_function_value );
    
    }

    { //::Siren::getProcessString
    
        typedef ::QString ( *getProcessString_function_type )(  );
        getProcessString_function_type getProcessString_function_value( &::Siren::getProcessString );
        
        bp::def( 
            "getProcessString"
            , getProcessString_function_value );
    
    }

    { //::Siren::getThreadString
    
        typedef ::QString ( *getThreadString_function_type )(  );
        getThreadString_function_type getThreadString_function_value( &::Siren::getThreadString );
        
        bp::def( 
            "getThreadString"
            , getThreadString_function_value );
    
    }

    { //::Siren::printError
    
        typedef void ( *printError_function_type )( ::QString const & );
        printError_function_type printError_function_value( &::Siren::printError );
        
        bp::def( 
            "printError"
            , printError_function_value
            , ( bp::arg("s") ) );
    
    }

    { //::Siren::printError
    
        typedef void ( *printError_function_type )( ::Siren::exception const & );
        printError_function_type printError_function_value( &::Siren::printError );
        
        bp::def( 
            "printError"
            , printError_function_value
            , ( bp::arg("e") ) );
    
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Min.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "SireMaths/errors.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "expression.h"

#include "identities.h"

#include "minmax.h"

#include "minmax.h"

#include "Siren/logger.h"

SireCAS::Min __copy__(const SireCAS::Min &other){ return SireCAS::Min(other); }

#include "Siren/str.hpp"

void register_Min_class(){

    { //::SireCAS::Min
        typedef bp::class_< SireCAS::Min, bp::bases< SireCAS::DoubleFunc, SireCAS::CASNode, Siren::Object > > Min_exposer_t;
        Min_exposer_t Min_exposer = Min_exposer_t( "Min" );
        bp::scope Min_scope( Min_exposer );
        Min_exposer.def( bp::init< >() );
        Min_exposer.def( bp::init< SireCAS::Expression const &, SireCAS::Expression const & >(( bp::arg("x"), bp::arg("y") )) );
        Min_exposer.def( bp::init< SireCAS::Min const & >(( bp::arg("other") )) );
        { //::SireCAS::Min::evaluate
        
            typedef double ( ::SireCAS::Min::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Min::evaluate );
            
            Min_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Min::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Min::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Min::evaluate );
            
            Min_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        Min_exposer.def( bp::self != bp::self );
        { //::SireCAS::Min::operator=
        
            typedef ::SireCAS::Min & ( ::SireCAS::Min::*assign_function_type )( ::SireCAS::Min const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Min::operator= );
            
            Min_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Min_exposer.def( bp::self == bp::self );
        { //::SireCAS::Min::stream
        
            typedef void ( ::SireCAS::Min::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::Min::stream );
            
            Min_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        Min_exposer.def( "__copy__", &__copy__);
        Min_exposer.def( "__deepcopy__", &__copy__);
        Min_exposer.def( "clone", &__copy__);
        Min_exposer.def( "__str__", &__str__< ::SireCAS::Min > );
        Min_exposer.def( "__repr__", &__str__< ::SireCAS::Min > );
    }

}

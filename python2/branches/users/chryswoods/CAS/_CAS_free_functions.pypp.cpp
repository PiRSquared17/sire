// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "_CAS_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

void register_free_functions(){

    { //::SireCAS::cbrt
    
        typedef ::SireCAS::Expression ( *cbrt_function_type )( ::SireCAS::CASNode const & );
        cbrt_function_type cbrt_function_value( &::SireCAS::cbrt );
        
        bp::def( 
            "cbrt"
            , cbrt_function_value
            , ( bp::arg("node") ) );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::CASNode const &,::SireCAS::CASNode const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("node"), bp::arg("n") ) );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::CASNode const &,::SireMaths::Complex const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("node"), bp::arg("n") ) );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::CASNode const &,double );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("node"), bp::arg("n") ) );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::CASNode const &,::SireMaths::Rational const & );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("node"), bp::arg("n") ) );
    
    }

    { //::SireCAS::pow
    
        typedef ::SireCAS::Expression ( *pow_function_type )( ::SireCAS::CASNode const &,int );
        pow_function_type pow_function_value( &::SireCAS::pow );
        
        bp::def( 
            "pow"
            , pow_function_value
            , ( bp::arg("node"), bp::arg("n") ) );
    
    }

    { //::SireCAS::sqrt
    
        typedef ::SireCAS::Expression ( *sqrt_function_type )( ::SireCAS::CASNode const & );
        sqrt_function_type sqrt_function_value( &::SireCAS::sqrt );
        
        bp::def( 
            "sqrt"
            , sqrt_function_value
            , ( bp::arg("node") ) );
    
    }

}

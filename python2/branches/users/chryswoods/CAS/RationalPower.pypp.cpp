// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "RationalPower.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/errors.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "expression.h"

#include "identities.h"

#include "integrationconstant.h"

#include "powerconstant.h"

#include "symbol.h"

#include "values.h"

#include <QDebug>

#include "powerconstant.h"

#include "Siren/logger.h"

SireCAS::RationalPower __copy__(const SireCAS::RationalPower &other){ return SireCAS::RationalPower(other); }

#include "Siren/str.hpp"

void register_RationalPower_class(){

    { //::SireCAS::RationalPower
        typedef bp::class_< SireCAS::RationalPower, bp::bases< SireCAS::PowerFunction, SireCAS::CASNode, Siren::Object > > RationalPower_exposer_t;
        RationalPower_exposer_t RationalPower_exposer = RationalPower_exposer_t( "RationalPower" );
        bp::scope RationalPower_scope( RationalPower_exposer );
        RationalPower_exposer.def( bp::init< >() );
        RationalPower_exposer.def( bp::init< SireCAS::Expression const &, SireMaths::Rational const & >(( bp::arg("expression"), bp::arg("power") )) );
        RationalPower_exposer.def( bp::init< SireCAS::RationalPower const & >(( bp::arg("other") )) );
        { //::SireCAS::RationalPower::evaluate
        
            typedef double ( ::SireCAS::RationalPower::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::RationalPower::evaluate );
            
            RationalPower_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::RationalPower::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::RationalPower::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::RationalPower::evaluate );
            
            RationalPower_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        RationalPower_exposer.def( bp::self != bp::self );
        { //::SireCAS::RationalPower::operator=
        
            typedef ::SireCAS::RationalPower & ( ::SireCAS::RationalPower::*assign_function_type )( ::SireCAS::RationalPower const & ) ;
            assign_function_type assign_function_value( &::SireCAS::RationalPower::operator= );
            
            RationalPower_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RationalPower_exposer.def( bp::self == bp::self );
        { //::SireCAS::RationalPower::power
        
            typedef ::SireCAS::Expression ( ::SireCAS::RationalPower::*power_function_type )(  ) const;
            power_function_type power_function_value( &::SireCAS::RationalPower::power );
            
            RationalPower_exposer.def( 
                "power"
                , power_function_value );
        
        }
        { //::SireCAS::RationalPower::stream
        
            typedef void ( ::SireCAS::RationalPower::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::RationalPower::stream );
            
            RationalPower_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        RationalPower_exposer.def( "__copy__", &__copy__);
        RationalPower_exposer.def( "__deepcopy__", &__copy__);
        RationalPower_exposer.def( "clone", &__copy__);
        RationalPower_exposer.def( "__str__", &__str__< ::SireCAS::RationalPower > );
        RationalPower_exposer.def( "__repr__", &__str__< ::SireCAS::RationalPower > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PowerFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "exp.h"

#include "factor.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "powerconstant.h"

#include "values.h"

#include <QDebug>

#include "power.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_PowerFunction_class(){

    { //::SireCAS::PowerFunction
        typedef bp::class_< SireCAS::PowerFunction, bp::bases< SireCAS::CASNode, Siren::Object >, boost::noncopyable > PowerFunction_exposer_t;
        PowerFunction_exposer_t PowerFunction_exposer = PowerFunction_exposer_t( "PowerFunction", bp::no_init );
        bp::scope PowerFunction_scope( PowerFunction_exposer );
        { //::SireCAS::PowerFunction::children
        
            typedef ::QList< SireCAS::Expression > ( ::SireCAS::PowerFunction::*children_function_type )(  ) const;
            children_function_type children_function_value( &::SireCAS::PowerFunction::children );
            
            PowerFunction_exposer.def( 
                "children"
                , children_function_value );
        
        }
        { //::SireCAS::PowerFunction::core
        
            typedef ::SireCAS::Expression ( ::SireCAS::PowerFunction::*core_function_type )(  ) const;
            core_function_type core_function_value( &::SireCAS::PowerFunction::core );
            
            PowerFunction_exposer.def( 
                "core"
                , core_function_value );
        
        }
        { //::SireCAS::PowerFunction::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::PowerFunction::*differentiate_function_type )( ::SireCAS::Symbol const & ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::PowerFunction::differentiate );
            
            PowerFunction_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::PowerFunction::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::PowerFunction::*expand_function_type )( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::PowerFunction::expand );
            
            PowerFunction_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::PowerFunction::hashCode
        
            typedef ::uint ( ::SireCAS::PowerFunction::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::PowerFunction::hashCode );
            
            PowerFunction_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::PowerFunction::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::PowerFunction::*integrate_function_type )( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::PowerFunction::integrate );
            
            PowerFunction_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::PowerFunction::isCompound
        
            typedef bool ( ::SireCAS::PowerFunction::*isCompound_function_type )(  ) const;
            isCompound_function_type isCompound_function_value( &::SireCAS::PowerFunction::isCompound );
            
            PowerFunction_exposer.def( 
                "isCompound"
                , isCompound_function_value );
        
        }
        { //::SireCAS::PowerFunction::isConstant
        
            typedef bool ( ::SireCAS::PowerFunction::*isConstant_function_type )(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::PowerFunction::isConstant );
            
            PowerFunction_exposer.def( 
                "isConstant"
                , isConstant_function_value );
        
        }
        { //::SireCAS::PowerFunction::isFunction
        
            typedef bool ( ::SireCAS::PowerFunction::*isFunction_function_type )( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::PowerFunction::isFunction );
            
            PowerFunction_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::PowerFunction::power
        
            typedef ::SireCAS::Expression ( ::SireCAS::PowerFunction::*power_function_type )(  ) const;
            power_function_type power_function_value( &::SireCAS::PowerFunction::power );
            
            PowerFunction_exposer.def( 
                "power"
                , power_function_value );
        
        }
        { //::SireCAS::PowerFunction::reduce
        
            typedef ::SireCAS::Expression ( ::SireCAS::PowerFunction::*reduce_function_type )(  ) const;
            reduce_function_type reduce_function_value( &::SireCAS::PowerFunction::reduce );
            
            PowerFunction_exposer.def( 
                "reduce"
                , reduce_function_value );
        
        }
        { //::SireCAS::PowerFunction::stream
        
            typedef void ( ::SireCAS::PowerFunction::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::PowerFunction::stream );
            
            PowerFunction_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::PowerFunction::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::PowerFunction::*substitute_function_type )( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::PowerFunction::substitute );
            
            PowerFunction_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireCAS::PowerFunction::symbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireCAS::PowerFunction::*symbols_function_type )(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::PowerFunction::symbols );
            
            PowerFunction_exposer.def( 
                "symbols"
                , symbols_function_value );
        
        }
        { //::SireCAS::PowerFunction::toString
        
            typedef ::QString ( ::SireCAS::PowerFunction::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::PowerFunction::toString );
            
            PowerFunction_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireCAS::PowerFunction::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::PowerFunction::typeName );
            
            PowerFunction_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        PowerFunction_exposer.staticmethod( "typeName" );
        PowerFunction_exposer.def( "__str__", &__str__< ::SireCAS::PowerFunction > );
        PowerFunction_exposer.def( "__repr__", &__str__< ::SireCAS::PowerFunction > );
    }

}

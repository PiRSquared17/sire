// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CASNode.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/rational.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "casnode.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include "casnode.h"

#include "Siren/logger.h"

#include "SireMaths/complex.h"

#include "Siren/str.hpp"

void register_CASNode_class(){

    { //::SireCAS::CASNode
        typedef bp::class_< SireCAS::CASNode, bp::bases< Siren::Object >, boost::noncopyable > CASNode_exposer_t;
        CASNode_exposer_t CASNode_exposer = CASNode_exposer_t( "CASNode", bp::no_init );
        bp::scope CASNode_scope( CASNode_exposer );
        { //::SireCAS::CASNode::add
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*add_function_type )( ::SireCAS::CASNode const & ) const;
            add_function_type add_function_value( &::SireCAS::CASNode::add );
            
            CASNode_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("node") ) );
        
        }
        { //::SireCAS::CASNode::add
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*add_function_type )( double ) const;
            add_function_type add_function_value( &::SireCAS::CASNode::add );
            
            CASNode_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::add
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*add_function_type )( ::SireMaths::Complex const & ) const;
            add_function_type add_function_value( &::SireCAS::CASNode::add );
            
            CASNode_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::cbrt
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*cbrt_function_type )(  ) const;
            cbrt_function_type cbrt_function_value( &::SireCAS::CASNode::cbrt );
            
            CASNode_exposer.def( 
                "cbrt"
                , cbrt_function_value );
        
        }
        { //::SireCAS::CASNode::children
        
            typedef ::QList< SireCAS::Expression > ( ::SireCAS::CASNode::*children_function_type )(  ) const;
            children_function_type children_function_value( &::SireCAS::CASNode::children );
            
            CASNode_exposer.def( 
                "children"
                , children_function_value );
        
        }
        { //::SireCAS::CASNode::conjugate
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*conjugate_function_type )(  ) const;
            conjugate_function_type conjugate_function_value( &::SireCAS::CASNode::conjugate );
            
            CASNode_exposer.def( 
                "conjugate"
                , conjugate_function_value );
        
        }
        { //::SireCAS::CASNode::cubed
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*cubed_function_type )(  ) const;
            cubed_function_type cubed_function_value( &::SireCAS::CASNode::cubed );
            
            CASNode_exposer.def( 
                "cubed"
                , cubed_function_value );
        
        }
        { //::SireCAS::CASNode::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*differentiate_function_type )( ::SireCAS::Symbol const & ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::CASNode::differentiate );
            
            CASNode_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::CASNode::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*differentiate_function_type )( ::SireCAS::Symbol const &,int ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::CASNode::differentiate );
            
            CASNode_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol"), bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::divide
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*divide_function_type )( ::SireCAS::CASNode const & ) const;
            divide_function_type divide_function_value( &::SireCAS::CASNode::divide );
            
            CASNode_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("node") ) );
        
        }
        { //::SireCAS::CASNode::divide
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*divide_function_type )( double ) const;
            divide_function_type divide_function_value( &::SireCAS::CASNode::divide );
            
            CASNode_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::divide
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*divide_function_type )( ::SireMaths::Complex const & ) const;
            divide_function_type divide_function_value( &::SireCAS::CASNode::divide );
            
            CASNode_exposer.def( 
                "divide"
                , divide_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::evaluate
        
            typedef double ( ::SireCAS::CASNode::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::CASNode::evaluate );
            
            CASNode_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::CASNode::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::CASNode::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::CASNode::evaluate );
            
            CASNode_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::CASNode::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::CASNode::*expand_function_type )( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::CASNode::expand );
            
            CASNode_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::CASNode::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*integrate_function_type )( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::CASNode::integrate );
            
            CASNode_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::CASNode::invert
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*invert_function_type )(  ) const;
            invert_function_type invert_function_value( &::SireCAS::CASNode::invert );
            
            CASNode_exposer.def( 
                "invert"
                , invert_function_value );
        
        }
        { //::SireCAS::CASNode::isComplex
        
            typedef bool ( ::SireCAS::CASNode::*isComplex_function_type )(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::CASNode::isComplex );
            
            CASNode_exposer.def( 
                "isComplex"
                , isComplex_function_value );
        
        }
        { //::SireCAS::CASNode::isCompound
        
            typedef bool ( ::SireCAS::CASNode::*isCompound_function_type )(  ) const;
            isCompound_function_type isCompound_function_value( &::SireCAS::CASNode::isCompound );
            
            CASNode_exposer.def( 
                "isCompound"
                , isCompound_function_value );
        
        }
        { //::SireCAS::CASNode::isConstant
        
            typedef bool ( ::SireCAS::CASNode::*isConstant_function_type )(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::CASNode::isConstant );
            
            CASNode_exposer.def( 
                "isConstant"
                , isConstant_function_value );
        
        }
        { //::SireCAS::CASNode::isFunction
        
            typedef bool ( ::SireCAS::CASNode::*isFunction_function_type )( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::CASNode::isFunction );
            
            CASNode_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::SireCAS::CASNode::multiply
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*multiply_function_type )( ::SireCAS::CASNode const & ) const;
            multiply_function_type multiply_function_value( &::SireCAS::CASNode::multiply );
            
            CASNode_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("node") ) );
        
        }
        { //::SireCAS::CASNode::multiply
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*multiply_function_type )( double ) const;
            multiply_function_type multiply_function_value( &::SireCAS::CASNode::multiply );
            
            CASNode_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::multiply
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*multiply_function_type )( ::SireMaths::Complex const & ) const;
            multiply_function_type multiply_function_value( &::SireCAS::CASNode::multiply );
            
            CASNode_exposer.def( 
                "multiply"
                , multiply_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::negate
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*negate_function_type )(  ) const;
            negate_function_type negate_function_value( &::SireCAS::CASNode::negate );
            
            CASNode_exposer.def( 
                "negate"
                , negate_function_value );
        
        }
        { //::SireCAS::CASNode::operator()
        
            typedef double ( ::SireCAS::CASNode::*__call___function_type )( ::SireCAS::Values const & ) const;
            __call___function_type __call___function_value( &::SireCAS::CASNode::operator() );
            
            CASNode_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::CASNode::operator()
        
            typedef ::SireMaths::Complex ( ::SireCAS::CASNode::*__call___function_type )( ::SireCAS::ComplexValues const & ) const;
            __call___function_type __call___function_value( &::SireCAS::CASNode::operator() );
            
            CASNode_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("values") ) );
        
        }
        CASNode_exposer.def( -bp::self );
        { //::SireCAS::CASNode::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*pow_function_type )( int ) const;
            pow_function_type pow_function_value( &::SireCAS::CASNode::pow );
            
            CASNode_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*pow_function_type )( ::SireMaths::Rational const & ) const;
            pow_function_type pow_function_value( &::SireCAS::CASNode::pow );
            
            CASNode_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*pow_function_type )( double ) const;
            pow_function_type pow_function_value( &::SireCAS::CASNode::pow );
            
            CASNode_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*pow_function_type )( ::SireMaths::Complex const & ) const;
            pow_function_type pow_function_value( &::SireCAS::CASNode::pow );
            
            CASNode_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::pow
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*pow_function_type )( ::SireCAS::CASNode const & ) const;
            pow_function_type pow_function_value( &::SireCAS::CASNode::pow );
            
            CASNode_exposer.def( 
                "pow"
                , pow_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::root
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*root_function_type )( int ) const;
            root_function_type root_function_value( &::SireCAS::CASNode::root );
            
            CASNode_exposer.def( 
                "root"
                , root_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::series
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*series_function_type )( ::SireCAS::Symbol const &,int ) const;
            series_function_type series_function_value( &::SireCAS::CASNode::series );
            
            CASNode_exposer.def( 
                "series"
                , series_function_value
                , ( bp::arg("symbol"), bp::arg("n") ) );
        
        }
        { //::SireCAS::CASNode::simplify
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*simplify_function_type )( int ) const;
            simplify_function_type simplify_function_value( &::SireCAS::CASNode::simplify );
            
            CASNode_exposer.def( 
                "simplify"
                , simplify_function_value
                , ( bp::arg("options")=(int)(0) ) );
        
        }
        { //::SireCAS::CASNode::sqrt
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*sqrt_function_type )(  ) const;
            sqrt_function_type sqrt_function_value( &::SireCAS::CASNode::sqrt );
            
            CASNode_exposer.def( 
                "sqrt"
                , sqrt_function_value );
        
        }
        { //::SireCAS::CASNode::squared
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*squared_function_type )(  ) const;
            squared_function_type squared_function_value( &::SireCAS::CASNode::squared );
            
            CASNode_exposer.def( 
                "squared"
                , squared_function_value );
        
        }
        { //::SireCAS::CASNode::stream
        
            typedef void ( ::SireCAS::CASNode::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::CASNode::stream );
            
            CASNode_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::CASNode::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*substitute_function_type )( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::CASNode::substitute );
            
            CASNode_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireCAS::CASNode::subtract
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*subtract_function_type )( ::SireCAS::CASNode const & ) const;
            subtract_function_type subtract_function_value( &::SireCAS::CASNode::subtract );
            
            CASNode_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("node") ) );
        
        }
        { //::SireCAS::CASNode::subtract
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*subtract_function_type )( double ) const;
            subtract_function_type subtract_function_value( &::SireCAS::CASNode::subtract );
            
            CASNode_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::subtract
        
            typedef ::SireCAS::Expression ( ::SireCAS::CASNode::*subtract_function_type )( ::SireMaths::Complex const & ) const;
            subtract_function_type subtract_function_value( &::SireCAS::CASNode::subtract );
            
            CASNode_exposer.def( 
                "subtract"
                , subtract_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireCAS::CASNode::symbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireCAS::CASNode::*symbols_function_type )(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::CASNode::symbols );
            
            CASNode_exposer.def( 
                "symbols"
                , symbols_function_value );
        
        }
        { //::SireCAS::CASNode::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCAS::CASNode::typeName );
            
            CASNode_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        CASNode_exposer.staticmethod( "typeName" );
        CASNode_exposer.def( bp::other< SireMaths::Complex >() * bp::self );
        CASNode_exposer.def( bp::self * bp::other< SireMaths::Complex >() );
        CASNode_exposer.def( bp::other< double >() * bp::self );
        CASNode_exposer.def( bp::self * bp::other< double >() );
        CASNode_exposer.def( bp::self * bp::self );
        CASNode_exposer.def( bp::other< SireMaths::Complex >() + bp::self );
        CASNode_exposer.def( bp::self + bp::other< SireMaths::Complex >() );
        CASNode_exposer.def( bp::other< double >() + bp::self );
        CASNode_exposer.def( bp::self + bp::other< double >() );
        CASNode_exposer.def( bp::self + bp::self );
        CASNode_exposer.def( bp::other< SireMaths::Complex >() - bp::self );
        CASNode_exposer.def( bp::self - bp::other< SireMaths::Complex >() );
        CASNode_exposer.def( bp::other< double >() - bp::self );
        CASNode_exposer.def( bp::self - bp::other< double >() );
        CASNode_exposer.def( bp::self - bp::self );
        CASNode_exposer.def( bp::other< SireMaths::Complex >() / bp::self );
        CASNode_exposer.def( bp::self / bp::other< SireMaths::Complex >() );
        CASNode_exposer.def( bp::other< double >() / bp::self );
        CASNode_exposer.def( bp::self / bp::other< double >() );
        CASNode_exposer.def( bp::self / bp::self );
        CASNode_exposer.def( self + self );
        CASNode_exposer.def( self - self );
        CASNode_exposer.def( self * self );
        CASNode_exposer.def( self / self );
        CASNode_exposer.def( other<double>() + self );
        CASNode_exposer.def( other<double>() - self );
        CASNode_exposer.def( other<double>() * self );
        CASNode_exposer.def( other<double>() / self );
        CASNode_exposer.def( self + other<double>() );
        CASNode_exposer.def( self - other<double>() );
        CASNode_exposer.def( self * other<double>() );
        CASNode_exposer.def( self / other<double>() );
        CASNode_exposer.def( other<SireMaths::Complex>() + self );
        CASNode_exposer.def( other<SireMaths::Complex>() - self );
        CASNode_exposer.def( other<SireMaths::Complex>() * self );
        CASNode_exposer.def( other<SireMaths::Complex>() / self );
        CASNode_exposer.def( self + other<SireMaths::Complex>() );
        CASNode_exposer.def( self - other<SireMaths::Complex>() );
        CASNode_exposer.def( self * other<SireMaths::Complex>() );
        CASNode_exposer.def( self / other<SireMaths::Complex>() );
        CASNode_exposer.def( "__str__", &__str__< ::SireCAS::CASNode > );
        CASNode_exposer.def( "__repr__", &__str__< ::SireCAS::CASNode > );
    }

}

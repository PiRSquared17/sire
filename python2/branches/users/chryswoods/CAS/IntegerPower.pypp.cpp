// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "IntegerPower.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/errors.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "expression.h"

#include "identities.h"

#include "integrationconstant.h"

#include "powerconstant.h"

#include "symbol.h"

#include "values.h"

#include <QDebug>

#include "powerconstant.h"

#include "Siren/logger.h"

SireCAS::IntegerPower __copy__(const SireCAS::IntegerPower &other){ return SireCAS::IntegerPower(other); }

#include "Siren/str.hpp"

void register_IntegerPower_class(){

    { //::SireCAS::IntegerPower
        typedef bp::class_< SireCAS::IntegerPower, bp::bases< SireCAS::PowerFunction, SireCAS::CASNode, Siren::Object > > IntegerPower_exposer_t;
        IntegerPower_exposer_t IntegerPower_exposer = IntegerPower_exposer_t( "IntegerPower" );
        bp::scope IntegerPower_scope( IntegerPower_exposer );
        IntegerPower_exposer.def( bp::init< >() );
        IntegerPower_exposer.def( bp::init< SireCAS::Expression const &, int >(( bp::arg("expression"), bp::arg("power") )) );
        IntegerPower_exposer.def( bp::init< SireCAS::IntegerPower const & >(( bp::arg("other") )) );
        { //::SireCAS::IntegerPower::evaluate
        
            typedef double ( ::SireCAS::IntegerPower::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::IntegerPower::evaluate );
            
            IntegerPower_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::IntegerPower::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::IntegerPower::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::IntegerPower::evaluate );
            
            IntegerPower_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        IntegerPower_exposer.def( bp::self != bp::self );
        { //::SireCAS::IntegerPower::operator=
        
            typedef ::SireCAS::IntegerPower & ( ::SireCAS::IntegerPower::*assign_function_type )( ::SireCAS::IntegerPower const & ) ;
            assign_function_type assign_function_value( &::SireCAS::IntegerPower::operator= );
            
            IntegerPower_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        IntegerPower_exposer.def( bp::self == bp::self );
        { //::SireCAS::IntegerPower::power
        
            typedef ::SireCAS::Expression ( ::SireCAS::IntegerPower::*power_function_type )(  ) const;
            power_function_type power_function_value( &::SireCAS::IntegerPower::power );
            
            IntegerPower_exposer.def( 
                "power"
                , power_function_value );
        
        }
        { //::SireCAS::IntegerPower::stream
        
            typedef void ( ::SireCAS::IntegerPower::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::IntegerPower::stream );
            
            IntegerPower_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        IntegerPower_exposer.def( "__copy__", &__copy__);
        IntegerPower_exposer.def( "__deepcopy__", &__copy__);
        IntegerPower_exposer.def( "clone", &__copy__);
        IntegerPower_exposer.def( "__str__", &__str__< ::SireCAS::IntegerPower > );
        IntegerPower_exposer.def( "__repr__", &__str__< ::SireCAS::IntegerPower > );
    }

}

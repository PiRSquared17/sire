// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Exp.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "exp.h"

#include "values.h"

#include "exp.h"

#include "Siren/logger.h"

SireCAS::Exp __copy__(const SireCAS::Exp &other){ return SireCAS::Exp(other); }

#include "Siren/str.hpp"

void register_Exp_class(){

    { //::SireCAS::Exp
        typedef bp::class_< SireCAS::Exp, bp::bases< SireCAS::PowerFunction, SireCAS::CASNode, Siren::Object > > Exp_exposer_t;
        Exp_exposer_t Exp_exposer = Exp_exposer_t( "Exp" );
        bp::scope Exp_scope( Exp_exposer );
        Exp_exposer.def( bp::init< >() );
        Exp_exposer.def( bp::init< SireCAS::Expression const & >(( bp::arg("power") )) );
        Exp_exposer.def( bp::init< SireCAS::Exp const & >(( bp::arg("other") )) );
        { //::SireCAS::Exp::core
        
            typedef ::SireCAS::Expression ( ::SireCAS::Exp::*core_function_type )(  ) const;
            core_function_type core_function_value( &::SireCAS::Exp::core );
            
            Exp_exposer.def( 
                "core"
                , core_function_value );
        
        }
        { //::SireCAS::Exp::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Exp::*differentiate_function_type )( ::SireCAS::Symbol const & ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::Exp::differentiate );
            
            Exp_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Exp::evaluate
        
            typedef double ( ::SireCAS::Exp::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Exp::evaluate );
            
            Exp_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Exp::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Exp::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Exp::evaluate );
            
            Exp_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Exp::hashCode
        
            typedef ::uint ( ::SireCAS::Exp::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::Exp::hashCode );
            
            Exp_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::Exp::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Exp::*integrate_function_type )( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::Exp::integrate );
            
            Exp_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        Exp_exposer.def( bp::self != bp::self );
        { //::SireCAS::Exp::operator=
        
            typedef ::SireCAS::Exp & ( ::SireCAS::Exp::*assign_function_type )( ::SireCAS::Exp const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Exp::operator= );
            
            Exp_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Exp_exposer.def( bp::self == bp::self );
        { //::SireCAS::Exp::power
        
            typedef ::SireCAS::Expression ( ::SireCAS::Exp::*power_function_type )(  ) const;
            power_function_type power_function_value( &::SireCAS::Exp::power );
            
            Exp_exposer.def( 
                "power"
                , power_function_value );
        
        }
        { //::SireCAS::Exp::stream
        
            typedef void ( ::SireCAS::Exp::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::Exp::stream );
            
            Exp_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::Exp::toString
        
            typedef ::QString ( ::SireCAS::Exp::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::Exp::toString );
            
            Exp_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Exp_exposer.def( "__copy__", &__copy__);
        Exp_exposer.def( "__deepcopy__", &__copy__);
        Exp_exposer.def( "clone", &__copy__);
        Exp_exposer.def( "__str__", &__str__< ::SireCAS::Exp > );
        Exp_exposer.def( "__repr__", &__str__< ::SireCAS::Exp > );
    }

}

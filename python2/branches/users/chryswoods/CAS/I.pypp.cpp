// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "I.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "SireMaths/errors.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "expression.h"

#include "i.h"

#include "i.h"

#include "Siren/logger.h"

SireCAS::I __copy__(const SireCAS::I &other){ return SireCAS::I(other); }

#include "Siren/str.hpp"

void register_I_class(){

    { //::SireCAS::I
        typedef bp::class_< SireCAS::I, bp::bases< SireCAS::Constant, SireCAS::CASNode, Siren::Object > > I_exposer_t;
        I_exposer_t I_exposer = I_exposer_t( "I" );
        bp::scope I_scope( I_exposer );
        I_exposer.def( bp::init< >() );
        I_exposer.def( bp::init< SireCAS::I const & >(( bp::arg("other") )) );
        { //::SireCAS::I::conjugate
        
            typedef ::SireCAS::Expression ( ::SireCAS::I::*conjugate_function_type )(  ) const;
            conjugate_function_type conjugate_function_value( &::SireCAS::I::conjugate );
            
            I_exposer.def( 
                "conjugate"
                , conjugate_function_value );
        
        }
        { //::SireCAS::I::evaluate
        
            typedef double ( ::SireCAS::I::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::I::evaluate );
            
            I_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::SireCAS::I::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::I::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::I::evaluate );
            
            I_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::SireCAS::I::hashCode
        
            typedef ::uint ( ::SireCAS::I::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::I::hashCode );
            
            I_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::I::isComplex
        
            typedef bool ( ::SireCAS::I::*isComplex_function_type )(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::I::isComplex );
            
            I_exposer.def( 
                "isComplex"
                , isComplex_function_value );
        
        }
        I_exposer.def( bp::self != bp::self );
        { //::SireCAS::I::operator=
        
            typedef ::SireCAS::I & ( ::SireCAS::I::*assign_function_type )( ::SireCAS::I const & ) ;
            assign_function_type assign_function_value( &::SireCAS::I::operator= );
            
            I_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        I_exposer.def( bp::self == bp::self );
        { //::SireCAS::I::stream
        
            typedef void ( ::SireCAS::I::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::I::stream );
            
            I_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::I::toString
        
            typedef ::QString ( ::SireCAS::I::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::I::toString );
            
            I_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        I_exposer.def( "__copy__", &__copy__);
        I_exposer.def( "__deepcopy__", &__copy__);
        I_exposer.def( "clone", &__copy__);
        I_exposer.def( "__str__", &__str__< ::SireCAS::I > );
        I_exposer.def( "__repr__", &__str__< ::SireCAS::I > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AlwaysTrue.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "SireMaths/errors.h"

#include "Siren/errors.h"

#include "Siren/objref.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "conditional.h"

#include "factor.h"

#include "identities.h"

#include "values.h"

#include "conditional.h"

#include "Siren/logger.h"

SireCAS::AlwaysTrue __copy__(const SireCAS::AlwaysTrue &other){ return SireCAS::AlwaysTrue(other); }

#include "Siren/str.hpp"

void register_AlwaysTrue_class(){

    { //::SireCAS::AlwaysTrue
        typedef bp::class_< SireCAS::AlwaysTrue, bp::bases< SireCAS::Condition, SireCAS::CASNode, Siren::Object > > AlwaysTrue_exposer_t;
        AlwaysTrue_exposer_t AlwaysTrue_exposer = AlwaysTrue_exposer_t( "AlwaysTrue" );
        bp::scope AlwaysTrue_scope( AlwaysTrue_exposer );
        AlwaysTrue_exposer.def( bp::init< >() );
        AlwaysTrue_exposer.def( bp::init< SireCAS::AlwaysTrue const & >(( bp::arg("other") )) );
        { //::SireCAS::AlwaysTrue::alwaysFalse
        
            typedef bool ( ::SireCAS::AlwaysTrue::*alwaysFalse_function_type )(  ) const;
            alwaysFalse_function_type alwaysFalse_function_value( &::SireCAS::AlwaysTrue::alwaysFalse );
            
            AlwaysTrue_exposer.def( 
                "alwaysFalse"
                , alwaysFalse_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::alwaysTrue
        
            typedef bool ( ::SireCAS::AlwaysTrue::*alwaysTrue_function_type )(  ) const;
            alwaysTrue_function_type alwaysTrue_function_value( &::SireCAS::AlwaysTrue::alwaysTrue );
            
            AlwaysTrue_exposer.def( 
                "alwaysTrue"
                , alwaysTrue_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::children
        
            typedef ::QList< SireCAS::Expression > ( ::SireCAS::AlwaysTrue::*children_function_type )(  ) const;
            children_function_type children_function_value( &::SireCAS::AlwaysTrue::children );
            
            AlwaysTrue_exposer.def( 
                "children"
                , children_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::evaluate
        
            typedef double ( ::SireCAS::AlwaysTrue::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::AlwaysTrue::evaluate );
            
            AlwaysTrue_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::AlwaysTrue::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::AlwaysTrue::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::AlwaysTrue::evaluate );
            
            AlwaysTrue_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::AlwaysTrue::evaluateCondition
        
            typedef bool ( ::SireCAS::AlwaysTrue::*evaluateCondition_function_type )( ::SireCAS::Values const & ) const;
            evaluateCondition_function_type evaluateCondition_function_value( &::SireCAS::AlwaysTrue::evaluateCondition );
            
            AlwaysTrue_exposer.def( 
                "evaluateCondition"
                , evaluateCondition_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::AlwaysTrue::evaluateCondition
        
            typedef bool ( ::SireCAS::AlwaysTrue::*evaluateCondition_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluateCondition_function_type evaluateCondition_function_value( &::SireCAS::AlwaysTrue::evaluateCondition );
            
            AlwaysTrue_exposer.def( 
                "evaluateCondition"
                , evaluateCondition_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::AlwaysTrue::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::AlwaysTrue::*expand_function_type )( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::AlwaysTrue::expand );
            
            AlwaysTrue_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::AlwaysTrue::hashCode
        
            typedef ::uint ( ::SireCAS::AlwaysTrue::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::AlwaysTrue::hashCode );
            
            AlwaysTrue_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::isComplex
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isComplex_function_type )(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::AlwaysTrue::isComplex );
            
            AlwaysTrue_exposer.def( 
                "isComplex"
                , isComplex_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::isCompound
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isCompound_function_type )(  ) const;
            isCompound_function_type isCompound_function_value( &::SireCAS::AlwaysTrue::isCompound );
            
            AlwaysTrue_exposer.def( 
                "isCompound"
                , isCompound_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::isConstant
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isConstant_function_type )(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::AlwaysTrue::isConstant );
            
            AlwaysTrue_exposer.def( 
                "isConstant"
                , isConstant_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::isFunction
        
            typedef bool ( ::SireCAS::AlwaysTrue::*isFunction_function_type )( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::AlwaysTrue::isFunction );
            
            AlwaysTrue_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("arg0") ) );
        
        }
        AlwaysTrue_exposer.def( bp::self != bp::self );
        { //::SireCAS::AlwaysTrue::operator=
        
            typedef ::SireCAS::AlwaysTrue & ( ::SireCAS::AlwaysTrue::*assign_function_type )( ::SireCAS::AlwaysTrue const & ) ;
            assign_function_type assign_function_value( &::SireCAS::AlwaysTrue::operator= );
            
            AlwaysTrue_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        AlwaysTrue_exposer.def( bp::self == bp::self );
        { //::SireCAS::AlwaysTrue::simplify
        
            typedef ::SireCAS::Expression ( ::SireCAS::AlwaysTrue::*simplify_function_type )( int ) const;
            simplify_function_type simplify_function_value( &::SireCAS::AlwaysTrue::simplify );
            
            AlwaysTrue_exposer.def( 
                "simplify"
                , simplify_function_value
                , ( bp::arg("options") ) );
        
        }
        { //::SireCAS::AlwaysTrue::stream
        
            typedef void ( ::SireCAS::AlwaysTrue::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::AlwaysTrue::stream );
            
            AlwaysTrue_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::AlwaysTrue::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::AlwaysTrue::*substitute_function_type )( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::AlwaysTrue::substitute );
            
            AlwaysTrue_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireCAS::AlwaysTrue::symbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireCAS::AlwaysTrue::*symbols_function_type )(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::AlwaysTrue::symbols );
            
            AlwaysTrue_exposer.def( 
                "symbols"
                , symbols_function_value );
        
        }
        { //::SireCAS::AlwaysTrue::toString
        
            typedef ::QString ( ::SireCAS::AlwaysTrue::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::AlwaysTrue::toString );
            
            AlwaysTrue_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        AlwaysTrue_exposer.def( "__copy__", &__copy__);
        AlwaysTrue_exposer.def( "__deepcopy__", &__copy__);
        AlwaysTrue_exposer.def( "clone", &__copy__);
        AlwaysTrue_exposer.def( "__str__", &__str__< ::SireCAS::AlwaysTrue > );
        AlwaysTrue_exposer.def( "__repr__", &__str__< ::SireCAS::AlwaysTrue > );
    }

}

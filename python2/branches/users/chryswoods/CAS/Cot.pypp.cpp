// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Cot.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "exp.h"

#include "expression.h"

#include "identities.h"

#include "trigfuncs.h"

#include <cmath>

#include "trigfuncs.h"

#include "Siren/logger.h"

SireCAS::Cot __copy__(const SireCAS::Cot &other){ return SireCAS::Cot(other); }

#include "Siren/str.hpp"

void register_Cot_class(){

    { //::SireCAS::Cot
        typedef bp::class_< SireCAS::Cot, bp::bases< SireCAS::SingleFunc, SireCAS::CASNode, Siren::Object > > Cot_exposer_t;
        Cot_exposer_t Cot_exposer = Cot_exposer_t( "Cot" );
        bp::scope Cot_scope( Cot_exposer );
        Cot_exposer.def( bp::init< >() );
        Cot_exposer.def( bp::init< SireCAS::Expression const & >(( bp::arg("ex") )) );
        Cot_exposer.def( bp::init< SireCAS::Cot const & >(( bp::arg("other") )) );
        { //::SireCAS::Cot::evaluate
        
            typedef double ( ::SireCAS::Cot::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Cot::evaluate );
            
            Cot_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Cot::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Cot::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Cot::evaluate );
            
            Cot_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        Cot_exposer.def( bp::self != bp::self );
        { //::SireCAS::Cot::operator=
        
            typedef ::SireCAS::Cot & ( ::SireCAS::Cot::*assign_function_type )( ::SireCAS::Cot const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Cot::operator= );
            
            Cot_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Cot_exposer.def( bp::self == bp::self );
        { //::SireCAS::Cot::stream
        
            typedef void ( ::SireCAS::Cot::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::Cot::stream );
            
            Cot_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        Cot_exposer.def( "__copy__", &__copy__);
        Cot_exposer.def( "__deepcopy__", &__copy__);
        Cot_exposer.def( "clone", &__copy__);
        Cot_exposer.def( "__str__", &__str__< ::SireCAS::Cot > );
        Cot_exposer.def( "__repr__", &__str__< ::SireCAS::Cot > );
    }

}

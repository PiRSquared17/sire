// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Values.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/complex.h"

#include "SireMaths/errors.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "complexvalues.h"

#include "symbol.h"

#include "values.h"

#include "values.h"

#include "Siren/logger.h"

SireCAS::Values __copy__(const SireCAS::Values &other){ return SireCAS::Values(other); }

#include "Siren/str.hpp"

void register_Values_class(){

    { //::SireCAS::Values
        typedef bp::class_< SireCAS::Values, bp::bases< Siren::Object > > Values_exposer_t;
        Values_exposer_t Values_exposer = Values_exposer_t( "Values" );
        bp::scope Values_scope( Values_exposer );
        Values_exposer.def( bp::init< >() );
        Values_exposer.def( bp::init< SireCAS::Symbol const &, double >(( bp::arg("symbol"), bp::arg("value") )) );
        Values_exposer.def( bp::init< QHash< SireCAS::Symbol, double > const & >(( bp::arg("values") )) );
        Values_exposer.def( bp::init< SireCAS::ComplexValues const & >(( bp::arg("other") )) );
        Values_exposer.def( bp::init< SireCAS::Values const & >(( bp::arg("other") )) );
        { //::SireCAS::Values::contains
        
            typedef bool ( ::SireCAS::Values::*contains_function_type )( ::SireCAS::Symbol const & ) const;
            contains_function_type contains_function_value( &::SireCAS::Values::contains );
            
            Values_exposer.def( 
                "contains"
                , contains_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Values::count
        
            typedef int ( ::SireCAS::Values::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireCAS::Values::count );
            
            Values_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireCAS::Values::hashCode
        
            typedef ::uint ( ::SireCAS::Values::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::Values::hashCode );
            
            Values_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::Values::isEmpty
        
            typedef bool ( ::SireCAS::Values::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireCAS::Values::isEmpty );
            
            Values_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireCAS::Values::keys
        
            typedef ::QList< SireCAS::Symbol > ( ::SireCAS::Values::*keys_function_type )(  ) const;
            keys_function_type keys_function_value( &::SireCAS::Values::keys );
            
            Values_exposer.def( 
                "keys"
                , keys_function_value );
        
        }
        Values_exposer.def( bp::self != bp::self );
        { //::SireCAS::Values::operator()
        
            typedef double ( ::SireCAS::Values::*__call___function_type )( ::SireCAS::Symbol const & ) const;
            __call___function_type __call___function_value( &::SireCAS::Values::operator() );
            
            Values_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("sym") ) );
        
        }
        Values_exposer.def( bp::self + bp::self );
        { //::SireCAS::Values::operator=
        
            typedef ::SireCAS::Values & ( ::SireCAS::Values::*assign_function_type )( ::SireCAS::Values const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Values::operator= );
            
            Values_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Values_exposer.def( bp::self == bp::self );
        { //::SireCAS::Values::operator[]
        
            typedef double ( ::SireCAS::Values::*__getitem___function_type )( ::SireCAS::Symbol const & ) const;
            __getitem___function_type __getitem___function_value( &::SireCAS::Values::operator[] );
            
            Values_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("sym") ) );
        
        }
        { //::SireCAS::Values::stream
        
            typedef void ( ::SireCAS::Values::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::Values::stream );
            
            Values_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::Values::symbols
        
            typedef ::QList< SireCAS::Symbol > ( ::SireCAS::Values::*symbols_function_type )(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::Values::symbols );
            
            Values_exposer.def( 
                "symbols"
                , symbols_function_value );
        
        }
        { //::SireCAS::Values::toString
        
            typedef ::QString ( ::SireCAS::Values::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::Values::toString );
            
            Values_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireCAS::Values::value
        
            typedef double ( ::SireCAS::Values::*value_function_type )( ::SireCAS::Symbol const & ) const;
            value_function_type value_function_value( &::SireCAS::Values::value );
            
            Values_exposer.def( 
                "value"
                , value_function_value
                , ( bp::arg("sym") ) );
        
        }
        { //::SireCAS::Values::values
        
            typedef ::QHash< unsigned int, double > const & ( ::SireCAS::Values::*values_function_type )(  ) const;
            values_function_type values_function_value( &::SireCAS::Values::values );
            
            Values_exposer.def( 
                "values"
                , values_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        Values_exposer.def( "__copy__", &__copy__);
        Values_exposer.def( "__deepcopy__", &__copy__);
        Values_exposer.def( "clone", &__copy__);
        Values_exposer.def( "__str__", &__str__< ::SireCAS::Values > );
        Values_exposer.def( "__repr__", &__str__< ::SireCAS::Values > );
    }

}

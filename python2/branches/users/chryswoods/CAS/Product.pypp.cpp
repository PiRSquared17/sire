// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Product.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "Siren/errors.h"

#include "Siren/logger.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "Siren/tester.h"

#include "complexvalues.h"

#include "expression.h"

#include "factor.h"

#include "i.h"

#include "identities.h"

#include "integrationconstant.h"

#include "power.h"

#include "product.h"

#include "symbol.h"

#include <boost/assert.hpp>

#include "product.h"

#include "Siren/logger.h"

SireCAS::Product __copy__(const SireCAS::Product &other){ return SireCAS::Product(other); }

#include "Siren/str.hpp"

void register_Product_class(){

    { //::SireCAS::Product
        typedef bp::class_< SireCAS::Product, bp::bases< SireCAS::CASNode, Siren::Object > > Product_exposer_t;
        Product_exposer_t Product_exposer = Product_exposer_t( "Product" );
        bp::scope Product_scope( Product_exposer );
        Product_exposer.def( bp::init< >() );
        Product_exposer.def( bp::init< SireCAS::Expression const &, SireCAS::Expression const & >(( bp::arg("ex0"), bp::arg("ex1") )) );
        Product_exposer.def( bp::init< QList< SireCAS::Expression > const & >(( bp::arg("expressions") )) );
        Product_exposer.def( bp::init< SireCAS::Product const & >(( bp::arg("other") )) );
        { //::SireCAS::Product::children
        
            typedef ::QList< SireCAS::Expression > ( ::SireCAS::Product::*children_function_type )(  ) const;
            children_function_type children_function_value( &::SireCAS::Product::children );
            
            Product_exposer.def( 
                "children"
                , children_function_value );
        
        }
        { //::SireCAS::Product::conjugate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*conjugate_function_type )(  ) const;
            conjugate_function_type conjugate_function_value( &::SireCAS::Product::conjugate );
            
            Product_exposer.def( 
                "conjugate"
                , conjugate_function_value );
        
        }
        { //::SireCAS::Product::denominator
        
            typedef ::SireCAS::Product ( ::SireCAS::Product::*denominator_function_type )(  ) const;
            denominator_function_type denominator_function_value( &::SireCAS::Product::denominator );
            
            Product_exposer.def( 
                "denominator"
                , denominator_function_value );
        
        }
        { //::SireCAS::Product::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*differentiate_function_type )( ::SireCAS::Symbol const & ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::Product::differentiate );
            
            Product_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Product::evaluate
        
            typedef double ( ::SireCAS::Product::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Product::evaluate );
            
            Product_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Product::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Product::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Product::evaluate );
            
            Product_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Product::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::Product::*expand_function_type )( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::Product::expand );
            
            Product_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Product::hashCode
        
            typedef ::uint ( ::SireCAS::Product::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::Product::hashCode );
            
            Product_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::Product::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*integrate_function_type )( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::Product::integrate );
            
            Product_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Product::isComplex
        
            typedef bool ( ::SireCAS::Product::*isComplex_function_type )(  ) const;
            isComplex_function_type isComplex_function_value( &::SireCAS::Product::isComplex );
            
            Product_exposer.def( 
                "isComplex"
                , isComplex_function_value );
        
        }
        { //::SireCAS::Product::isCompound
        
            typedef bool ( ::SireCAS::Product::*isCompound_function_type )(  ) const;
            isCompound_function_type isCompound_function_value( &::SireCAS::Product::isCompound );
            
            Product_exposer.def( 
                "isCompound"
                , isCompound_function_value );
        
        }
        { //::SireCAS::Product::isConstant
        
            typedef bool ( ::SireCAS::Product::*isConstant_function_type )(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::Product::isConstant );
            
            Product_exposer.def( 
                "isConstant"
                , isConstant_function_value );
        
        }
        { //::SireCAS::Product::isFunction
        
            typedef bool ( ::SireCAS::Product::*isFunction_function_type )( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::Product::isFunction );
            
            Product_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("arg0") ) );
        
        }
        { //::SireCAS::Product::numerator
        
            typedef ::SireCAS::Product ( ::SireCAS::Product::*numerator_function_type )(  ) const;
            numerator_function_type numerator_function_value( &::SireCAS::Product::numerator );
            
            Product_exposer.def( 
                "numerator"
                , numerator_function_value );
        
        }
        Product_exposer.def( bp::self != bp::self );
        { //::SireCAS::Product::operator=
        
            typedef ::SireCAS::Product & ( ::SireCAS::Product::*assign_function_type )( ::SireCAS::Product const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Product::operator= );
            
            Product_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Product_exposer.def( bp::self == bp::self );
        { //::SireCAS::Product::reduce
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*reduce_function_type )(  ) const;
            reduce_function_type reduce_function_value( &::SireCAS::Product::reduce );
            
            Product_exposer.def( 
                "reduce"
                , reduce_function_value );
        
        }
        { //::SireCAS::Product::series
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*series_function_type )( ::SireCAS::Symbol const &,int ) const;
            series_function_type series_function_value( &::SireCAS::Product::series );
            
            Product_exposer.def( 
                "series"
                , series_function_value
                , ( bp::arg("symbol"), bp::arg("n") ) );
        
        }
        { //::SireCAS::Product::simplify
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*simplify_function_type )( int ) const;
            simplify_function_type simplify_function_value( &::SireCAS::Product::simplify );
            
            Product_exposer.def( 
                "simplify"
                , simplify_function_value
                , ( bp::arg("options")=(int)(0) ) );
        
        }
        { //::SireCAS::Product::stream
        
            typedef void ( ::SireCAS::Product::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::Product::stream );
            
            Product_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::Product::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::Product::*substitute_function_type )( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::Product::substitute );
            
            Product_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireCAS::Product::symbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireCAS::Product::*symbols_function_type )(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::Product::symbols );
            
            Product_exposer.def( 
                "symbols"
                , symbols_function_value );
        
        }
        { //::SireCAS::Product::test
        
            typedef bool ( ::SireCAS::Product::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::SireCAS::Product::test );
            
            Product_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::SireCAS::Product::toString
        
            typedef ::QString ( ::SireCAS::Product::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::Product::toString );
            
            Product_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Product_exposer.def( "__copy__", &__copy__);
        Product_exposer.def( "__deepcopy__", &__copy__);
        Product_exposer.def( "clone", &__copy__);
        Product_exposer.def( "__str__", &__str__< ::SireCAS::Product > );
        Product_exposer.def( "__repr__", &__str__< ::SireCAS::Product > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Symbol.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/errors.h"

#include "SireMaths/complex.h"

#include "Siren/errors.h"

#include "Siren/mutex.h"

#include "Siren/stream.h"

#include "complexvalues.h"

#include "factor.h"

#include "identities.h"

#include "symbol.h"

#include "values.h"

#include <QDebug>

#include <QHash>

#include "symbol.h"

#include "Siren/logger.h"

SireCAS::Symbol __copy__(const SireCAS::Symbol &other){ return SireCAS::Symbol(other); }

#include "Siren/str.hpp"

void register_Symbol_class(){

    { //::SireCAS::Symbol
        typedef bp::class_< SireCAS::Symbol, bp::bases< SireCAS::CASNode, Siren::Object > > Symbol_exposer_t;
        Symbol_exposer_t Symbol_exposer = Symbol_exposer_t( "Symbol" );
        bp::scope Symbol_scope( Symbol_exposer );
        Symbol_exposer.def( bp::init< >() );
        Symbol_exposer.def( bp::init< SireCAS::SymbolID >(( bp::arg("symid") )) );
        Symbol_exposer.def( bp::init< QString const & >(( bp::arg("rep") )) );
        Symbol_exposer.def( bp::init< SireCAS::Symbol const & >(( bp::arg("other") )) );
        { //::SireCAS::Symbol::ID
        
            typedef ::SireCAS::SymbolID ( ::SireCAS::Symbol::*ID_function_type )(  ) const;
            ID_function_type ID_function_value( &::SireCAS::Symbol::ID );
            
            Symbol_exposer.def( 
                "ID"
                , ID_function_value );
        
        }
        { //::SireCAS::Symbol::children
        
            typedef ::QList< SireCAS::Expression > ( ::SireCAS::Symbol::*children_function_type )(  ) const;
            children_function_type children_function_value( &::SireCAS::Symbol::children );
            
            Symbol_exposer.def( 
                "children"
                , children_function_value );
        
        }
        { //::SireCAS::Symbol::differentiate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Symbol::*differentiate_function_type )( ::SireCAS::Symbol const & ) const;
            differentiate_function_type differentiate_function_value( &::SireCAS::Symbol::differentiate );
            
            Symbol_exposer.def( 
                "differentiate"
                , differentiate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Symbol::evaluate
        
            typedef double ( ::SireCAS::Symbol::*evaluate_function_type )( ::SireCAS::Values const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Symbol::evaluate );
            
            Symbol_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Symbol::evaluate
        
            typedef ::SireMaths::Complex ( ::SireCAS::Symbol::*evaluate_function_type )( ::SireCAS::ComplexValues const & ) const;
            evaluate_function_type evaluate_function_value( &::SireCAS::Symbol::evaluate );
            
            Symbol_exposer.def( 
                "evaluate"
                , evaluate_function_value
                , ( bp::arg("values") ) );
        
        }
        { //::SireCAS::Symbol::expand
        
            typedef ::QList< SireCAS::Factor > ( ::SireCAS::Symbol::*expand_function_type )( ::SireCAS::Symbol const & ) const;
            expand_function_type expand_function_value( &::SireCAS::Symbol::expand );
            
            Symbol_exposer.def( 
                "expand"
                , expand_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Symbol::hashCode
        
            typedef ::uint ( ::SireCAS::Symbol::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCAS::Symbol::hashCode );
            
            Symbol_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCAS::Symbol::integrate
        
            typedef ::SireCAS::Expression ( ::SireCAS::Symbol::*integrate_function_type )( ::SireCAS::Symbol const & ) const;
            integrate_function_type integrate_function_value( &::SireCAS::Symbol::integrate );
            
            Symbol_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("symbol") ) );
        
        }
        { //::SireCAS::Symbol::isConstant
        
            typedef bool ( ::SireCAS::Symbol::*isConstant_function_type )(  ) const;
            isConstant_function_type isConstant_function_value( &::SireCAS::Symbol::isConstant );
            
            Symbol_exposer.def( 
                "isConstant"
                , isConstant_function_value );
        
        }
        { //::SireCAS::Symbol::isFunction
        
            typedef bool ( ::SireCAS::Symbol::*isFunction_function_type )( ::SireCAS::Symbol const & ) const;
            isFunction_function_type isFunction_function_value( &::SireCAS::Symbol::isFunction );
            
            Symbol_exposer.def( 
                "isFunction"
                , isFunction_function_value
                , ( bp::arg("arg0") ) );
        
        }
        Symbol_exposer.def( bp::self != bp::self );
        Symbol_exposer.def( bp::self < bp::self );
        Symbol_exposer.def( bp::self <= bp::self );
        { //::SireCAS::Symbol::operator=
        
            typedef ::SireCAS::Symbol & ( ::SireCAS::Symbol::*assign_function_type )( ::SireCAS::Symbol const & ) ;
            assign_function_type assign_function_value( &::SireCAS::Symbol::operator= );
            
            Symbol_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::SireCAS::Symbol::operator=
        
            typedef ::SireCAS::Symbol & ( ::SireCAS::Symbol::*assign_function_type )( ::SireCAS::SymbolID ) ;
            assign_function_type assign_function_value( &::SireCAS::Symbol::operator= );
            
            Symbol_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("symid") )
                , bp::return_self< >() );
        
        }
        Symbol_exposer.def( bp::self == bp::self );
        Symbol_exposer.def( bp::self == bp::other< double >() );
        Symbol_exposer.def( bp::self == bp::other< int >() );
        Symbol_exposer.def( bp::self == bp::other< SireMaths::Complex >() );
        Symbol_exposer.def( bp::self == bp::other< SireCAS::Expression >() );
        Symbol_exposer.def( bp::self > bp::self );
        Symbol_exposer.def( bp::self >= bp::self );
        { //::SireCAS::Symbol::stream
        
            typedef void ( ::SireCAS::Symbol::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCAS::Symbol::stream );
            
            Symbol_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCAS::Symbol::substitute
        
            typedef ::SireCAS::Expression ( ::SireCAS::Symbol::*substitute_function_type )( ::SireCAS::Identities const & ) const;
            substitute_function_type substitute_function_value( &::SireCAS::Symbol::substitute );
            
            Symbol_exposer.def( 
                "substitute"
                , substitute_function_value
                , ( bp::arg("identities") ) );
        
        }
        { //::SireCAS::Symbol::symbols
        
            typedef ::QSet< SireCAS::Symbol > ( ::SireCAS::Symbol::*symbols_function_type )(  ) const;
            symbols_function_type symbols_function_value( &::SireCAS::Symbol::symbols );
            
            Symbol_exposer.def( 
                "symbols"
                , symbols_function_value );
        
        }
        { //::SireCAS::Symbol::toString
        
            typedef ::QString ( ::SireCAS::Symbol::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCAS::Symbol::toString );
            
            Symbol_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Symbol_exposer.def( "__copy__", &__copy__);
        Symbol_exposer.def( "__deepcopy__", &__copy__);
        Symbol_exposer.def( "clone", &__copy__);
        Symbol_exposer.def( "__str__", &__str__< ::SireCAS::Symbol > );
        Symbol_exposer.def( "__repr__", &__str__< ::SireCAS::Symbol > );
    }

}

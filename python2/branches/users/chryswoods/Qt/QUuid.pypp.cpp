// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QUuid.pypp.hpp"

namespace bp = boost::python;

#include "Siren/logger.h"

QUuid __copy__(const QUuid &other){ return QUuid(other); }

#include "Qt/qdatastream.hpp"

void register_QUuid_class(){

    { //::QUuid
        typedef bp::class_< QUuid > QUuid_exposer_t;
        QUuid_exposer_t QUuid_exposer = QUuid_exposer_t( "QUuid" );
        bp::scope QUuid_scope( QUuid_exposer );
        bp::enum_< QUuid::Variant>("Variant")
            .value("VarUnknown", QUuid::VarUnknown)
            .value("NCS", QUuid::NCS)
            .value("DCE", QUuid::DCE)
            .value("Microsoft", QUuid::Microsoft)
            .value("Reserved", QUuid::Reserved)
            .export_values()
            ;
        bp::enum_< QUuid::Version>("Version")
            .value("VerUnknown", QUuid::VerUnknown)
            .value("Time", QUuid::Time)
            .value("EmbeddedPOSIX", QUuid::EmbeddedPOSIX)
            .value("Name", QUuid::Name)
            .value("Random", QUuid::Random)
            .export_values()
            ;
        QUuid_exposer.def( bp::init< >() );
        QUuid_exposer.def( bp::init< uint, ushort, ushort, uchar, uchar, uchar, uchar, uchar, uchar, uchar, uchar >(( bp::arg("l"), bp::arg("w1"), bp::arg("w2"), bp::arg("b1"), bp::arg("b2"), bp::arg("b3"), bp::arg("b4"), bp::arg("b5"), bp::arg("b6"), bp::arg("b7"), bp::arg("b8") )) );
        QUuid_exposer.def( bp::init< QString const & >(( bp::arg("arg0") )) );
        QUuid_exposer.def( bp::init< char const * >(( bp::arg("arg0") )) );
        { //::QUuid::createUuid
        
            typedef ::QUuid ( *createUuid_function_type )(  );
            createUuid_function_type createUuid_function_value( &::QUuid::createUuid );
            
            QUuid_exposer.def( 
                "createUuid"
                , createUuid_function_value );
        
        }
        { //::QUuid::isNull
        
            typedef bool ( ::QUuid::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::QUuid::isNull );
            
            QUuid_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        QUuid_exposer.def( bp::self != bp::self );
        QUuid_exposer.def( bp::self < bp::self );
        QUuid_exposer.def( bp::self == bp::self );
        QUuid_exposer.def( bp::self > bp::self );
        { //::QUuid::toString
        
            typedef ::QString ( ::QUuid::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::QUuid::toString );
            
            QUuid_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::QUuid::variant
        
            typedef ::QUuid::Variant ( ::QUuid::*variant_function_type )(  ) const;
            variant_function_type variant_function_value( &::QUuid::variant );
            
            QUuid_exposer.def( 
                "variant"
                , variant_function_value );
        
        }
        { //::QUuid::version
        
            typedef ::QUuid::Version ( ::QUuid::*version_function_type )(  ) const;
            version_function_type version_function_value( &::QUuid::version );
            
            QUuid_exposer.def( 
                "version"
                , version_function_value );
        
        }
        QUuid_exposer.staticmethod( "createUuid" );
        QUuid_exposer.def( "__copy__", &__copy__);
        QUuid_exposer.def( "__deepcopy__", &__copy__);
        QUuid_exposer.def( "clone", &__copy__);
        QUuid_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::QUuid >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QUuid_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::QUuid >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    }

}

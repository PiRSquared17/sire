// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "SortFlags.pypp.hpp"

namespace bp = boost::python;

#include "Siren/logger.h"

QFlags<QDir::SortFlag> __copy__(const QFlags<QDir::SortFlag> &other){ return QFlags<QDir::SortFlag>(other); }

void register_SortFlags_class(){

    { //::QFlags< QDir::SortFlag >
        typedef bp::class_< QFlags< QDir::SortFlag > > SortFlags_exposer_t;
        SortFlags_exposer_t SortFlags_exposer = SortFlags_exposer_t( "SortFlags", bp::init< QFlags< QDir::SortFlag > const & >(( bp::arg("f") )) );
        bp::scope SortFlags_scope( SortFlags_exposer );
        SortFlags_exposer.def( bp::init< QDir::SortFlag >(( bp::arg("f") )) );
        SortFlags_exposer.def( bp::init< bp::optional< void * * > >(( bp::arg("arg0")=bp::object() )) );
        SortFlags_exposer.def( bp::init< QFlag >(( bp::arg("f") )) );
        SortFlags_exposer.def( !bp::self );
        SortFlags_exposer.def( bp::self & bp::other< int >() );
        SortFlags_exposer.def( bp::self & bp::other< uint >() );
        SortFlags_exposer.def( bp::self & bp::other< QDir::SortFlag >() );
        { //::QFlags< QDir::SortFlag >::operator=
        
            typedef QFlags< QDir::SortFlag > exported_class_t;
            typedef ::QFlags< QDir::SortFlag > & ( ::QFlags< QDir::SortFlag >::*assign_function_type )( ::QFlags< QDir::SortFlag > const & ) ;
            assign_function_type assign_function_value( &::QFlags< QDir::SortFlag >::operator= );
            
            SortFlags_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("f") )
                , bp::return_self< >() );
        
        }
        SortFlags_exposer.def( bp::self ^ bp::self );
        SortFlags_exposer.def( bp::self ^ bp::other< QDir::SortFlag >() );
        SortFlags_exposer.def( bp::self | bp::self );
        SortFlags_exposer.def( bp::self | bp::other< QDir::SortFlag >() );
        SortFlags_exposer.def( ~bp::self );
        { //::QFlags< QDir::SortFlag >::testFlag
        
            typedef QFlags< QDir::SortFlag > exported_class_t;
            typedef bool ( ::QFlags< QDir::SortFlag >::*testFlag_function_type )( ::QDir::SortFlag ) const;
            testFlag_function_type testFlag_function_value( &::QFlags< QDir::SortFlag >::testFlag );
            
            SortFlags_exposer.def( 
                "testFlag"
                , testFlag_function_value
                , ( bp::arg("f") ) );
        
        }
        SortFlags_exposer.def( "__copy__", &__copy__);
        SortFlags_exposer.def( "__deepcopy__", &__copy__);
        SortFlags_exposer.def( "clone", &__copy__);
    }

}

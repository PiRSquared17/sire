// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "sireqt_headers.h"
#include "OpenMode.pypp.hpp"

namespace bp = boost::python;

QFlags<QIODevice::OpenModeFlag> __copy__(const QFlags<QIODevice::OpenModeFlag> &other){ return QFlags<QIODevice::OpenModeFlag>(other); }

const char* pvt_get_name(const QFlags<QIODevice::OpenModeFlag>&){ return "QFlags<QIODevice::OpenModeFlag>";}

void register_OpenMode_class(){

    { //::QFlags< QIODevice::OpenModeFlag >
        typedef bp::class_< QFlags< QIODevice::OpenModeFlag > > OpenMode_exposer_t;
        OpenMode_exposer_t OpenMode_exposer = OpenMode_exposer_t( "OpenMode", bp::init< QFlags< QIODevice::OpenModeFlag > const & >(( bp::arg("f") )) );
        bp::scope OpenMode_scope( OpenMode_exposer );
        OpenMode_exposer.def( bp::init< QIODevice::OpenModeFlag >(( bp::arg("f") )) );
        OpenMode_exposer.def( bp::init< bp::optional< void * * > >(( bp::arg("arg0")=bp::object() )) );
        OpenMode_exposer.def( bp::init< QFlag >(( bp::arg("f") )) );
        OpenMode_exposer.def( "__int__", &QFlags< QIODevice::OpenModeFlag >::operator int  );
        OpenMode_exposer.def( !bp::self );
        OpenMode_exposer.def( bp::self & bp::other< int >() );
        OpenMode_exposer.def( bp::self & bp::other< uint >() );
        OpenMode_exposer.def( bp::self & bp::other< QIODevice::OpenModeFlag >() );
        OpenMode_exposer.def( bp::self &= bp::other< int >() );
        OpenMode_exposer.def( bp::self &= bp::other< uint >() );
        { //::QFlags< QIODevice::OpenModeFlag >::operator=
        
            typedef QFlags< QIODevice::OpenModeFlag > exported_class_t;
            typedef ::QFlags< QIODevice::OpenModeFlag > & ( exported_class_t::*assign_function_type )( ::QFlags< QIODevice::OpenModeFlag > const & ) ;
            
            OpenMode_exposer.def( 
                "assign"
                , assign_function_type( &::QFlags< QIODevice::OpenModeFlag >::operator= )
                , ( bp::arg("f") )
                , bp::return_self< >() );
        
        }
        OpenMode_exposer.def( bp::self ^ bp::self );
        OpenMode_exposer.def( bp::self ^ bp::other< QIODevice::OpenModeFlag >() );
        OpenMode_exposer.def( bp::self ^= bp::self );
        OpenMode_exposer.def( bp::self ^= bp::other< QIODevice::OpenModeFlag >() );
        OpenMode_exposer.def( bp::self | bp::self );
        OpenMode_exposer.def( bp::self | bp::other< QIODevice::OpenModeFlag >() );
        OpenMode_exposer.def( bp::self |= bp::self );
        OpenMode_exposer.def( bp::self |= bp::other< QIODevice::OpenModeFlag >() );
        OpenMode_exposer.def( ~bp::self );
        { //::QFlags< QIODevice::OpenModeFlag >::testFlag
        
            typedef QFlags< QIODevice::OpenModeFlag > exported_class_t;
            typedef bool ( exported_class_t::*testFlag_function_type )( ::QIODevice::OpenModeFlag ) const;
            
            OpenMode_exposer.def( 
                "testFlag"
                , testFlag_function_type( &::QFlags< QIODevice::OpenModeFlag >::testFlag )
                , ( bp::arg("f") ) );
        
        }
        OpenMode_exposer.def( "__copy__", &__copy__);
        OpenMode_exposer.def( "__str__", &pvt_get_name);
    }

}

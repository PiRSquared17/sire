// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "sireqt_headers.h"
#include "Filters.pypp.hpp"

namespace bp = boost::python;

QFlags<QDir::Filter> __copy__(const QFlags<QDir::Filter> &other){ return QFlags<QDir::Filter>(other); }

const char* pvt_get_name(const QFlags<QDir::Filter>&){ return "QFlags<QDir::Filter>";}

void register_Filters_class(){

    { //::QFlags< QDir::Filter >
        typedef bp::class_< QFlags< QDir::Filter > > Filters_exposer_t;
        Filters_exposer_t Filters_exposer = Filters_exposer_t( "Filters", bp::init< QFlags< QDir::Filter > const & >(( bp::arg("f") )) );
        bp::scope Filters_scope( Filters_exposer );
        Filters_exposer.def( bp::init< QDir::Filter >(( bp::arg("f") )) );
        Filters_exposer.def( bp::init< bp::optional< void * * > >(( bp::arg("arg0")=bp::object() )) );
        Filters_exposer.def( bp::init< QFlag >(( bp::arg("f") )) );
        Filters_exposer.def( "__int__", &QFlags< QDir::Filter >::operator int  );
        Filters_exposer.def( !bp::self );
        Filters_exposer.def( bp::self & bp::other< int >() );
        Filters_exposer.def( bp::self & bp::other< uint >() );
        Filters_exposer.def( bp::self & bp::other< QDir::Filter >() );
        Filters_exposer.def( bp::self &= bp::other< int >() );
        Filters_exposer.def( bp::self &= bp::other< uint >() );
        { //::QFlags< QDir::Filter >::operator=
        
            typedef QFlags< QDir::Filter > exported_class_t;
            typedef ::QFlags< QDir::Filter > & ( exported_class_t::*assign_function_type )( ::QFlags< QDir::Filter > const & ) ;
            
            Filters_exposer.def( 
                "assign"
                , assign_function_type( &::QFlags< QDir::Filter >::operator= )
                , ( bp::arg("f") )
                , bp::return_self< >() );
        
        }
        Filters_exposer.def( bp::self ^ bp::self );
        Filters_exposer.def( bp::self ^ bp::other< QDir::Filter >() );
        Filters_exposer.def( bp::self ^= bp::self );
        Filters_exposer.def( bp::self ^= bp::other< QDir::Filter >() );
        Filters_exposer.def( bp::self | bp::self );
        Filters_exposer.def( bp::self | bp::other< QDir::Filter >() );
        Filters_exposer.def( bp::self |= bp::self );
        Filters_exposer.def( bp::self |= bp::other< QDir::Filter >() );
        Filters_exposer.def( ~bp::self );
        { //::QFlags< QDir::Filter >::testFlag
        
            typedef QFlags< QDir::Filter > exported_class_t;
            typedef bool ( exported_class_t::*testFlag_function_type )( ::QDir::Filter ) const;
            
            Filters_exposer.def( 
                "testFlag"
                , testFlag_function_type( &::QFlags< QDir::Filter >::testFlag )
                , ( bp::arg("f") ) );
        
        }
        Filters_exposer.def( "__copy__", &__copy__);
        Filters_exposer.def( "__str__", &pvt_get_name);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "Filters.pypp.hpp"

namespace bp = boost::python;

#include "Siren/logger.h"

QFlags<QDir::Filter> __copy__(const QFlags<QDir::Filter> &other){ return QFlags<QDir::Filter>(other); }

void register_Filters_class(){

    { //::QFlags< QDir::Filter >
        typedef bp::class_< QFlags< QDir::Filter > > Filters_exposer_t;
        Filters_exposer_t Filters_exposer = Filters_exposer_t( "Filters", bp::init< QFlags< QDir::Filter > const & >(( bp::arg("f") )) );
        bp::scope Filters_scope( Filters_exposer );
        Filters_exposer.def( bp::init< QDir::Filter >(( bp::arg("f") )) );
        Filters_exposer.def( bp::init< bp::optional< void * * > >(( bp::arg("arg0")=bp::object() )) );
        Filters_exposer.def( bp::init< QFlag >(( bp::arg("f") )) );
        Filters_exposer.def( !bp::self );
        Filters_exposer.def( bp::self & bp::other< int >() );
        Filters_exposer.def( bp::self & bp::other< uint >() );
        Filters_exposer.def( bp::self & bp::other< QDir::Filter >() );
        { //::QFlags< QDir::Filter >::operator=
        
            typedef QFlags< QDir::Filter > exported_class_t;
            typedef ::QFlags< QDir::Filter > & ( ::QFlags< QDir::Filter >::*assign_function_type )( ::QFlags< QDir::Filter > const & ) ;
            assign_function_type assign_function_value( &::QFlags< QDir::Filter >::operator= );
            
            Filters_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("f") )
                , bp::return_self< >() );
        
        }
        Filters_exposer.def( bp::self ^ bp::self );
        Filters_exposer.def( bp::self ^ bp::other< QDir::Filter >() );
        Filters_exposer.def( bp::self | bp::self );
        Filters_exposer.def( bp::self | bp::other< QDir::Filter >() );
        Filters_exposer.def( ~bp::self );
        { //::QFlags< QDir::Filter >::testFlag
        
            typedef QFlags< QDir::Filter > exported_class_t;
            typedef bool ( ::QFlags< QDir::Filter >::*testFlag_function_type )( ::QDir::Filter ) const;
            testFlag_function_type testFlag_function_value( &::QFlags< QDir::Filter >::testFlag );
            
            Filters_exposer.def( 
                "testFlag"
                , testFlag_function_value
                , ( bp::arg("f") ) );
        
        }
        Filters_exposer.def( "__copy__", &__copy__);
        Filters_exposer.def( "__deepcopy__", &__copy__);
        Filters_exposer.def( "clone", &__copy__);
    }

}

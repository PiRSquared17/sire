// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "sireqt_headers.h"
#include "QDateTime.pypp.hpp"

namespace bp = boost::python;

QDateTime __copy__(const QDateTime &other){ return QDateTime(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const QDateTime&){ return "QDateTime";}

void register_QDateTime_class(){

    { //::QDateTime
        typedef bp::class_< QDateTime > QDateTime_exposer_t;
        QDateTime_exposer_t QDateTime_exposer = QDateTime_exposer_t( "QDateTime" );
        bp::scope QDateTime_scope( QDateTime_exposer );
        QDateTime_exposer.def( bp::init< >() );
        QDateTime_exposer.def( bp::init< QDate const & >(( bp::arg("arg0") )) );
        QDateTime_exposer.def( bp::init< QDate const &, QTime const &, bp::optional< Qt::TimeSpec > >(( bp::arg("arg0"), bp::arg("arg1"), bp::arg("spec")=::Qt::LocalTime )) );
        QDateTime_exposer.def( bp::init< QDateTime const & >(( bp::arg("other") )) );
        { //::QDateTime::addDays
        
            typedef ::QDateTime ( ::QDateTime::*addDays_function_type )( int ) const;
            
            QDateTime_exposer.def( 
                "addDays"
                , addDays_function_type( &::QDateTime::addDays )
                , ( bp::arg("days") ) );
        
        }
        { //::QDateTime::addMSecs
        
            typedef ::QDateTime ( ::QDateTime::*addMSecs_function_type )( ::qint64 ) const;
            
            QDateTime_exposer.def( 
                "addMSecs"
                , addMSecs_function_type( &::QDateTime::addMSecs )
                , ( bp::arg("msecs") ) );
        
        }
        { //::QDateTime::addMonths
        
            typedef ::QDateTime ( ::QDateTime::*addMonths_function_type )( int ) const;
            
            QDateTime_exposer.def( 
                "addMonths"
                , addMonths_function_type( &::QDateTime::addMonths )
                , ( bp::arg("months") ) );
        
        }
        { //::QDateTime::addSecs
        
            typedef ::QDateTime ( ::QDateTime::*addSecs_function_type )( int ) const;
            
            QDateTime_exposer.def( 
                "addSecs"
                , addSecs_function_type( &::QDateTime::addSecs )
                , ( bp::arg("secs") ) );
        
        }
        { //::QDateTime::addYears
        
            typedef ::QDateTime ( ::QDateTime::*addYears_function_type )( int ) const;
            
            QDateTime_exposer.def( 
                "addYears"
                , addYears_function_type( &::QDateTime::addYears )
                , ( bp::arg("years") ) );
        
        }
        { //::QDateTime::currentDateTime
        
            typedef ::QDateTime ( *currentDateTime_function_type )(  );
            
            QDateTime_exposer.def( 
                "currentDateTime"
                , currentDateTime_function_type( &::QDateTime::currentDateTime ) );
        
        }
        { //::QDateTime::date
        
            typedef ::QDate ( ::QDateTime::*date_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "date"
                , date_function_type( &::QDateTime::date ) );
        
        }
        { //::QDateTime::daysTo
        
            typedef int ( ::QDateTime::*daysTo_function_type )( ::QDateTime const & ) const;
            
            QDateTime_exposer.def( 
                "daysTo"
                , daysTo_function_type( &::QDateTime::daysTo )
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDateTime::fromString
        
            typedef ::QDateTime ( *fromString_function_type )( ::QString const &,::Qt::DateFormat );
            
            QDateTime_exposer.def( 
                "fromString"
                , fromString_function_type( &::QDateTime::fromString )
                , ( bp::arg("s"), bp::arg("f")=::Qt::TextDate ) );
        
        }
        { //::QDateTime::fromString
        
            typedef ::QDateTime ( *fromString_function_type )( ::QString const &,::QString const & );
            
            QDateTime_exposer.def( 
                "fromString"
                , fromString_function_type( &::QDateTime::fromString )
                , ( bp::arg("s"), bp::arg("format") ) );
        
        }
        { //::QDateTime::isNull
        
            typedef bool ( ::QDateTime::*isNull_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "isNull"
                , isNull_function_type( &::QDateTime::isNull ) );
        
        }
        { //::QDateTime::isValid
        
            typedef bool ( ::QDateTime::*isValid_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "isValid"
                , isValid_function_type( &::QDateTime::isValid ) );
        
        }
        QDateTime_exposer.def( bp::self != bp::self );
        QDateTime_exposer.def( bp::self < bp::self );
        QDateTime_exposer.def( bp::self <= bp::self );
        QDateTime_exposer.def( bp::self == bp::self );
        QDateTime_exposer.def( bp::self > bp::self );
        QDateTime_exposer.def( bp::self >= bp::self );
        { //::QDateTime::secsTo
        
            typedef int ( ::QDateTime::*secsTo_function_type )( ::QDateTime const & ) const;
            
            QDateTime_exposer.def( 
                "secsTo"
                , secsTo_function_type( &::QDateTime::secsTo )
                , ( bp::arg("arg0") ) );
        
        }
        { //::QDateTime::setDate
        
            typedef void ( ::QDateTime::*setDate_function_type )( ::QDate const & ) ;
            
            QDateTime_exposer.def( 
                "setDate"
                , setDate_function_type( &::QDateTime::setDate )
                , ( bp::arg("date") ) );
        
        }
        { //::QDateTime::setTime
        
            typedef void ( ::QDateTime::*setTime_function_type )( ::QTime const & ) ;
            
            QDateTime_exposer.def( 
                "setTime"
                , setTime_function_type( &::QDateTime::setTime )
                , ( bp::arg("time") ) );
        
        }
        { //::QDateTime::setTimeSpec
        
            typedef void ( ::QDateTime::*setTimeSpec_function_type )( ::Qt::TimeSpec ) ;
            
            QDateTime_exposer.def( 
                "setTimeSpec"
                , setTimeSpec_function_type( &::QDateTime::setTimeSpec )
                , ( bp::arg("spec") ) );
        
        }
        { //::QDateTime::setTime_t
        
            typedef void ( ::QDateTime::*setTime_t_function_type )( ::uint ) ;
            
            QDateTime_exposer.def( 
                "setTime_t"
                , setTime_t_function_type( &::QDateTime::setTime_t )
                , ( bp::arg("secsSince1Jan1970UTC") ) );
        
        }
        { //::QDateTime::time
        
            typedef ::QTime ( ::QDateTime::*time_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "time"
                , time_function_type( &::QDateTime::time ) );
        
        }
        { //::QDateTime::timeSpec
        
            typedef ::Qt::TimeSpec ( ::QDateTime::*timeSpec_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "timeSpec"
                , timeSpec_function_type( &::QDateTime::timeSpec ) );
        
        }
        { //::QDateTime::toLocalTime
        
            typedef ::QDateTime ( ::QDateTime::*toLocalTime_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "toLocalTime"
                , toLocalTime_function_type( &::QDateTime::toLocalTime ) );
        
        }
        { //::QDateTime::toString
        
            typedef ::QString ( ::QDateTime::*toString_function_type )( ::Qt::DateFormat ) const;
            
            QDateTime_exposer.def( 
                "toString"
                , toString_function_type( &::QDateTime::toString )
                , ( bp::arg("f")=::Qt::TextDate ) );
        
        }
        { //::QDateTime::toString
        
            typedef ::QString ( ::QDateTime::*toString_function_type )( ::QString const & ) const;
            
            QDateTime_exposer.def( 
                "toString"
                , toString_function_type( &::QDateTime::toString )
                , ( bp::arg("format") ) );
        
        }
        { //::QDateTime::toTimeSpec
        
            typedef ::QDateTime ( ::QDateTime::*toTimeSpec_function_type )( ::Qt::TimeSpec ) const;
            
            QDateTime_exposer.def( 
                "toTimeSpec"
                , toTimeSpec_function_type( &::QDateTime::toTimeSpec )
                , ( bp::arg("spec") ) );
        
        }
        { //::QDateTime::toTime_t
        
            typedef ::uint ( ::QDateTime::*toTime_t_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "toTime_t"
                , toTime_t_function_type( &::QDateTime::toTime_t ) );
        
        }
        { //::QDateTime::toUTC
        
            typedef ::QDateTime ( ::QDateTime::*toUTC_function_type )(  ) const;
            
            QDateTime_exposer.def( 
                "toUTC"
                , toUTC_function_type( &::QDateTime::toUTC ) );
        
        }
        QDateTime_exposer.staticmethod( "currentDateTime" );
        QDateTime_exposer.staticmethod( "fromString" );
        QDateTime_exposer.def( "__copy__", &__copy__);
        QDateTime_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::QDateTime >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QDateTime_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::QDateTime >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QDateTime_exposer.def( "__str__", &pvt_get_name);
    }

}

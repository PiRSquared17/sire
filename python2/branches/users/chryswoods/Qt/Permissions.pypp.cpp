// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "Permissions.pypp.hpp"

namespace bp = boost::python;

#include "Siren/logger.h"

QFlags<QFile::Permission> __copy__(const QFlags<QFile::Permission> &other){ return QFlags<QFile::Permission>(other); }

void register_Permissions_class(){

    { //::QFlags< QFile::Permission >
        typedef bp::class_< QFlags< QFile::Permission > > Permissions_exposer_t;
        Permissions_exposer_t Permissions_exposer = Permissions_exposer_t( "Permissions", bp::init< QFlags< QFile::Permission > const & >(( bp::arg("f") )) );
        bp::scope Permissions_scope( Permissions_exposer );
        Permissions_exposer.def( bp::init< QFile::Permission >(( bp::arg("f") )) );
        Permissions_exposer.def( bp::init< bp::optional< void * * > >(( bp::arg("arg0")=bp::object() )) );
        Permissions_exposer.def( bp::init< QFlag >(( bp::arg("f") )) );
        Permissions_exposer.def( !bp::self );
        Permissions_exposer.def( bp::self & bp::other< int >() );
        Permissions_exposer.def( bp::self & bp::other< uint >() );
        Permissions_exposer.def( bp::self & bp::other< QFile::Permission >() );
        { //::QFlags< QFile::Permission >::operator=
        
            typedef QFlags< QFile::Permission > exported_class_t;
            typedef ::QFlags< QFile::Permission > & ( ::QFlags< QFile::Permission >::*assign_function_type )( ::QFlags< QFile::Permission > const & ) ;
            assign_function_type assign_function_value( &::QFlags< QFile::Permission >::operator= );
            
            Permissions_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("f") )
                , bp::return_self< >() );
        
        }
        Permissions_exposer.def( bp::self ^ bp::self );
        Permissions_exposer.def( bp::self ^ bp::other< QFile::Permission >() );
        Permissions_exposer.def( bp::self | bp::self );
        Permissions_exposer.def( bp::self | bp::other< QFile::Permission >() );
        Permissions_exposer.def( ~bp::self );
        { //::QFlags< QFile::Permission >::testFlag
        
            typedef QFlags< QFile::Permission > exported_class_t;
            typedef bool ( ::QFlags< QFile::Permission >::*testFlag_function_type )( ::QFile::Permission ) const;
            testFlag_function_type testFlag_function_value( &::QFlags< QFile::Permission >::testFlag );
            
            Permissions_exposer.def( 
                "testFlag"
                , testFlag_function_value
                , ( bp::arg("f") ) );
        
        }
        Permissions_exposer.def( "__copy__", &__copy__);
        Permissions_exposer.def( "__deepcopy__", &__copy__);
        Permissions_exposer.def( "clone", &__copy__);
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >=2 License

#include "boost/python.hpp"
#include "sireqt_headers.h"
#include "Permissions.pypp.hpp"

namespace bp = boost::python;

QFlags<QFile::Permission> __copy__(const QFlags<QFile::Permission> &other){ return QFlags<QFile::Permission>(other); }

const char* pvt_get_name(const QFlags<QFile::Permission>&){ return "QFlags<QFile::Permission>";}

void register_Permissions_class(){

    { //::QFlags< QFile::Permission >
        typedef bp::class_< QFlags< QFile::Permission > > Permissions_exposer_t;
        Permissions_exposer_t Permissions_exposer = Permissions_exposer_t( "Permissions", bp::init< QFlags< QFile::Permission > const & >(( bp::arg("f") )) );
        bp::scope Permissions_scope( Permissions_exposer );
        Permissions_exposer.def( bp::init< QFile::Permission >(( bp::arg("f") )) );
        Permissions_exposer.def( bp::init< bp::optional< void * * > >(( bp::arg("arg0")=bp::object() )) );
        Permissions_exposer.def( bp::init< QFlag >(( bp::arg("f") )) );
        Permissions_exposer.def( "__int__", &QFlags< QFile::Permission >::operator int  );
        Permissions_exposer.def( !bp::self );
        Permissions_exposer.def( bp::self & bp::other< int >() );
        Permissions_exposer.def( bp::self & bp::other< uint >() );
        Permissions_exposer.def( bp::self & bp::other< QFile::Permission >() );
        Permissions_exposer.def( bp::self &= bp::other< int >() );
        Permissions_exposer.def( bp::self &= bp::other< uint >() );
        { //::QFlags< QFile::Permission >::operator=
        
            typedef QFlags< QFile::Permission > exported_class_t;
            typedef ::QFlags< QFile::Permission > & ( exported_class_t::*assign_function_type )( ::QFlags< QFile::Permission > const & ) ;
            
            Permissions_exposer.def( 
                "assign"
                , assign_function_type( &::QFlags< QFile::Permission >::operator= )
                , ( bp::arg("f") )
                , bp::return_self< >() );
        
        }
        Permissions_exposer.def( bp::self ^ bp::self );
        Permissions_exposer.def( bp::self ^ bp::other< QFile::Permission >() );
        Permissions_exposer.def( bp::self ^= bp::self );
        Permissions_exposer.def( bp::self ^= bp::other< QFile::Permission >() );
        Permissions_exposer.def( bp::self | bp::self );
        Permissions_exposer.def( bp::self | bp::other< QFile::Permission >() );
        Permissions_exposer.def( bp::self |= bp::self );
        Permissions_exposer.def( bp::self |= bp::other< QFile::Permission >() );
        Permissions_exposer.def( ~bp::self );
        { //::QFlags< QFile::Permission >::testFlag
        
            typedef QFlags< QFile::Permission > exported_class_t;
            typedef bool ( exported_class_t::*testFlag_function_type )( ::QFile::Permission ) const;
            
            Permissions_exposer.def( 
                "testFlag"
                , testFlag_function_type( &::QFlags< QFile::Permission >::testFlag )
                , ( bp::arg("f") ) );
        
        }
        Permissions_exposer.def( "__copy__", &__copy__);
        Permissions_exposer.def( "__str__", &pvt_get_name);
    }

}

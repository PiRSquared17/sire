// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Nodes.pypp.hpp"

namespace bp = boost::python;

#include <QVector>

#include "Siren/errors.h"

#include "node.h"

#include "nodes.h"

#include "promise.h"

#include "promises.h"

#include "workpacket.h"

#include "nodes.h"
#include "Siren/objptr.hpp"

#include "Siren/logger.h"

SireCluster::Nodes __copy__(const SireCluster::Nodes &other){ return SireCluster::Nodes(other); }

#include "Siren/str.hpp"

void register_Nodes_class(){

    { //::SireCluster::Nodes
        typedef bp::class_< SireCluster::Nodes, bp::bases< Siren::Handle > > Nodes_exposer_t;
        Nodes_exposer_t Nodes_exposer = Nodes_exposer_t( "Nodes" );
        bp::scope Nodes_scope( Nodes_exposer );
        Nodes_exposer.def( bp::init< >() );
        Nodes_exposer.def( bp::init< SireCluster::Node const & >(( bp::arg("node") )) );
        Nodes_exposer.def( bp::init< SireCluster::Nodes const & >(( bp::arg("other") )) );
        { //::SireCluster::Nodes::count
        
            typedef int ( ::SireCluster::Nodes::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireCluster::Nodes::count );
            
            Nodes_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireCluster::Nodes::hashCode
        
            typedef ::uint ( ::SireCluster::Nodes::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCluster::Nodes::hashCode );
            
            Nodes_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCluster::Nodes::isLocalOnly
        
            typedef bool ( ::SireCluster::Nodes::*isLocalOnly_function_type )(  ) const;
            isLocalOnly_function_type isLocalOnly_function_value( &::SireCluster::Nodes::isLocalOnly );
            
            Nodes_exposer.def( 
                "isLocalOnly"
                , isLocalOnly_function_value );
        
        }
        { //::SireCluster::Nodes::merge
        
            typedef ::SireCluster::Nodes ( *merge_function_type )( ::SireCluster::Nodes,::SireCluster::Nodes );
            merge_function_type merge_function_value( &::SireCluster::Nodes::merge );
            
            Nodes_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("nodes0"), bp::arg("nodes1") ) );
        
        }
        { //::SireCluster::Nodes::merge
        
            typedef ::SireCluster::Nodes ( *merge_function_type )( ::SireCluster::Node,::SireCluster::Node );
            merge_function_type merge_function_value( &::SireCluster::Nodes::merge );
            
            Nodes_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("node0"), bp::arg("node1") ) );
        
        }
        { //::SireCluster::Nodes::merge
        
            typedef ::SireCluster::Nodes ( *merge_function_type )( ::SireCluster::Nodes,::SireCluster::Node );
            merge_function_type merge_function_value( &::SireCluster::Nodes::merge );
            
            Nodes_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("nodes0"), bp::arg("node1") ) );
        
        }
        { //::SireCluster::Nodes::merge
        
            typedef ::SireCluster::Nodes ( *merge_function_type )( ::SireCluster::Node,::SireCluster::Nodes );
            merge_function_type merge_function_value( &::SireCluster::Nodes::merge );
            
            Nodes_exposer.def( 
                "merge"
                , merge_function_value
                , ( bp::arg("node0"), bp::arg("nodes1") ) );
        
        }
        { //::SireCluster::Nodes::nBusy
        
            typedef int ( ::SireCluster::Nodes::*nBusy_function_type )(  ) const;
            nBusy_function_type nBusy_function_value( &::SireCluster::Nodes::nBusy );
            
            Nodes_exposer.def( 
                "nBusy"
                , nBusy_function_value );
        
        }
        { //::SireCluster::Nodes::nBusyFree
        
            typedef ::QPair< int, int > ( ::SireCluster::Nodes::*nBusyFree_function_type )(  ) const;
            nBusyFree_function_type nBusyFree_function_value( &::SireCluster::Nodes::nBusyFree );
            
            Nodes_exposer.def( 
                "nBusyFree"
                , nBusyFree_function_value );
        
        }
        { //::SireCluster::Nodes::nFree
        
            typedef int ( ::SireCluster::Nodes::*nFree_function_type )(  ) const;
            nFree_function_type nFree_function_value( &::SireCluster::Nodes::nFree );
            
            Nodes_exposer.def( 
                "nFree"
                , nFree_function_value );
        
        }
        { //::SireCluster::Nodes::nNodes
        
            typedef int ( ::SireCluster::Nodes::*nNodes_function_type )(  ) const;
            nNodes_function_type nNodes_function_value( &::SireCluster::Nodes::nNodes );
            
            Nodes_exposer.def( 
                "nNodes"
                , nNodes_function_value );
        
        }
        Nodes_exposer.def( bp::self != bp::self );
        { //::SireCluster::Nodes::operator=
        
            typedef ::SireCluster::Nodes & ( ::SireCluster::Nodes::*assign_function_type )( ::SireCluster::Nodes const & ) ;
            assign_function_type assign_function_value( &::SireCluster::Nodes::operator= );
            
            Nodes_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Nodes_exposer.def( bp::self == bp::self );
        { //::SireCluster::Nodes::submit
        
            typedef ::SireCluster::Promise ( ::SireCluster::Nodes::*submit_function_type )( ::SireCluster::WorkPacket const & ) ;
            submit_function_type submit_function_value( &::SireCluster::Nodes::submit );
            
            Nodes_exposer.def( 
                "submit"
                , submit_function_value
                , ( bp::arg("workpacket") ) );
        
        }
        { //::SireCluster::Nodes::submit
        
            typedef ::SireCluster::Promises ( ::SireCluster::Nodes::*submit_function_type )( ::QList< Siren::ObjPtr< SireCluster::WorkPacket > > const & ) ;
            submit_function_type submit_function_value( &::SireCluster::Nodes::submit );
            
            Nodes_exposer.def( 
                "submit"
                , submit_function_value
                , ( bp::arg("workpackets") ) );
        
        }
        { //::SireCluster::Nodes::submit
        
            typedef ::SireCluster::Promises ( ::SireCluster::Nodes::*submit_function_type )( ::QVector< Siren::ObjPtr< SireCluster::WorkPacket > > const & ) ;
            submit_function_type submit_function_value( &::SireCluster::Nodes::submit );
            
            Nodes_exposer.def( 
                "submit"
                , submit_function_value
                , ( bp::arg("workpackets") ) );
        
        }
        { //::SireCluster::Nodes::toString
        
            typedef ::QString ( ::SireCluster::Nodes::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCluster::Nodes::toString );
            
            Nodes_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Nodes_exposer.staticmethod( "merge" );
        Nodes_exposer.def( "__copy__", &__copy__);
        Nodes_exposer.def( "__deepcopy__", &__copy__);
        Nodes_exposer.def( "clone", &__copy__);
        Nodes_exposer.def( "__str__", &__str__< ::SireCluster::Nodes > );
        Nodes_exposer.def( "__repr__", &__str__< ::SireCluster::Nodes > );
    }

}

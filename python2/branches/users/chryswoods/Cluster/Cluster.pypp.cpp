// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Cluster.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "Siren/forages.h"

#include "Siren/mutex.h"

#include "Siren/waitcondition.h"

#include "cluster.h"

#include "node.h"

#include "nodes.h"

#include <QDebug>

#include <unistd.h>

#include "cluster.h"

#include "Siren/logger.h"

SireCluster::Cluster __copy__(const SireCluster::Cluster &other){ return SireCluster::Cluster(other); }

const char* pvt_get_name(const SireCluster::Cluster&){ return "SireCluster::Cluster";}

void register_Cluster_class(){

    { //::SireCluster::Cluster
        typedef bp::class_< SireCluster::Cluster > Cluster_exposer_t;
        Cluster_exposer_t Cluster_exposer = Cluster_exposer_t( "Cluster" );
        bp::scope Cluster_scope( Cluster_exposer );
        { //::SireCluster::Cluster::addThread
        
            typedef void ( *addThread_function_type )(  );
            addThread_function_type addThread_function_value( &::SireCluster::Cluster::addThread );
            
            Cluster_exposer.def( 
                "addThread"
                , addThread_function_value );
        
        }
        { //::SireCluster::Cluster::getLocalNode
        
            typedef ::SireCluster::Node ( *getLocalNode_function_type )(  );
            getLocalNode_function_type getLocalNode_function_value( &::SireCluster::Cluster::getLocalNode );
            
            Cluster_exposer.def( 
                "getLocalNode"
                , getLocalNode_function_value );
        
        }
        { //::SireCluster::Cluster::getLocalNode
        
            typedef ::SireCluster::Node ( *getLocalNode_function_type )( int );
            getLocalNode_function_type getLocalNode_function_value( &::SireCluster::Cluster::getLocalNode );
            
            Cluster_exposer.def( 
                "getLocalNode"
                , getLocalNode_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getLocalNode
        
            typedef ::SireCluster::Node ( *getLocalNode_function_type )( ::QString const & );
            getLocalNode_function_type getLocalNode_function_value( &::SireCluster::Cluster::getLocalNode );
            
            Cluster_exposer.def( 
                "getLocalNode"
                , getLocalNode_function_value
                , ( bp::arg("description") ) );
        
        }
        { //::SireCluster::Cluster::getLocalNode
        
            typedef ::SireCluster::Node ( *getLocalNode_function_type )( ::QString const &,int );
            getLocalNode_function_type getLocalNode_function_value( &::SireCluster::Cluster::getLocalNode );
            
            Cluster_exposer.def( 
                "getLocalNode"
                , getLocalNode_function_value
                , ( bp::arg("description"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getLocalNodes
        
            typedef ::SireCluster::Nodes ( *getLocalNodes_function_type )( int );
            getLocalNodes_function_type getLocalNodes_function_value( &::SireCluster::Cluster::getLocalNodes );
            
            Cluster_exposer.def( 
                "getLocalNodes"
                , getLocalNodes_function_value
                , ( bp::arg("nnodes") ) );
        
        }
        { //::SireCluster::Cluster::getLocalNodes
        
            typedef ::SireCluster::Nodes ( *getLocalNodes_function_type )( int,int );
            getLocalNodes_function_type getLocalNodes_function_value( &::SireCluster::Cluster::getLocalNodes );
            
            Cluster_exposer.def( 
                "getLocalNodes"
                , getLocalNodes_function_value
                , ( bp::arg("nnodes"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getLocalNodes
        
            typedef ::SireCluster::Nodes ( *getLocalNodes_function_type )( ::QString const &,int );
            getLocalNodes_function_type getLocalNodes_function_value( &::SireCluster::Cluster::getLocalNodes );
            
            Cluster_exposer.def( 
                "getLocalNodes"
                , getLocalNodes_function_value
                , ( bp::arg("description"), bp::arg("nnodes") ) );
        
        }
        { //::SireCluster::Cluster::getLocalNodes
        
            typedef ::SireCluster::Nodes ( *getLocalNodes_function_type )( ::QString const &,int,int );
            getLocalNodes_function_type getLocalNodes_function_value( &::SireCluster::Cluster::getLocalNodes );
            
            Cluster_exposer.def( 
                "getLocalNodes"
                , getLocalNodes_function_value
                , ( bp::arg("description"), bp::arg("nnodes"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Node ( *getNode_function_type )(  );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Node ( *getNode_function_type )( int );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Node ( *getNode_function_type )( ::QString const & );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("description") ) );
        
        }
        { //::SireCluster::Cluster::getNode
        
            typedef ::SireCluster::Node ( *getNode_function_type )( ::QString const &,int );
            getNode_function_type getNode_function_value( &::SireCluster::Cluster::getNode );
            
            Cluster_exposer.def( 
                "getNode"
                , getNode_function_value
                , ( bp::arg("description"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("nnodes") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( int,int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("nnodes"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( ::QString const &,int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("description"), bp::arg("nnodes") ) );
        
        }
        { //::SireCluster::Cluster::getNodes
        
            typedef ::SireCluster::Nodes ( *getNodes_function_type )( ::QString const &,int,int );
            getNodes_function_type getNodes_function_value( &::SireCluster::Cluster::getNodes );
            
            Cluster_exposer.def( 
                "getNodes"
                , getNodes_function_value
                , ( bp::arg("description"), bp::arg("nnodes"), bp::arg("timeout") ) );
        
        }
        { //::SireCluster::Cluster::hostName
        
            typedef ::QString ( *hostName_function_type )(  );
            hostName_function_type hostName_function_value( &::SireCluster::Cluster::hostName );
            
            Cluster_exposer.def( 
                "hostName"
                , hostName_function_value );
        
        }
        { //::SireCluster::Cluster::isInitProcess
        
            typedef bool ( *isInitProcess_function_type )(  );
            isInitProcess_function_type isInitProcess_function_value( &::SireCluster::Cluster::isInitProcess );
            
            Cluster_exposer.def( 
                "isInitProcess"
                , isInitProcess_function_value );
        
        }
        { //::SireCluster::Cluster::isRunning
        
            typedef bool ( *isRunning_function_type )(  );
            isRunning_function_type isRunning_function_value( &::SireCluster::Cluster::isRunning );
            
            Cluster_exposer.def( 
                "isRunning"
                , isRunning_function_value );
        
        }
        { //::SireCluster::Cluster::shutdown
        
            typedef void ( *shutdown_function_type )(  );
            shutdown_function_type shutdown_function_value( &::SireCluster::Cluster::shutdown );
            
            Cluster_exposer.def( 
                "shutdown"
                , shutdown_function_value );
        
        }
        { //::SireCluster::Cluster::shutdownCluster
        
            typedef void ( *shutdownCluster_function_type )(  );
            shutdownCluster_function_type shutdownCluster_function_value( &::SireCluster::Cluster::shutdownCluster );
            
            Cluster_exposer.def( 
                "shutdownCluster"
                , shutdownCluster_function_value );
        
        }
        { //::SireCluster::Cluster::start
        
            typedef void ( *start_function_type )(  );
            start_function_type start_function_value( &::SireCluster::Cluster::start );
            
            Cluster_exposer.def( 
                "start"
                , start_function_value );
        
        }
        { //::SireCluster::Cluster::wait
        
            typedef void ( *wait_function_type )(  );
            wait_function_type wait_function_value( &::SireCluster::Cluster::wait );
            
            Cluster_exposer.def( 
                "wait"
                , wait_function_value );
        
        }
        Cluster_exposer.staticmethod( "addThread" );
        Cluster_exposer.staticmethod( "getLocalNode" );
        Cluster_exposer.staticmethod( "getLocalNodes" );
        Cluster_exposer.staticmethod( "getNode" );
        Cluster_exposer.staticmethod( "getNodes" );
        Cluster_exposer.staticmethod( "hostName" );
        Cluster_exposer.staticmethod( "isInitProcess" );
        Cluster_exposer.staticmethod( "isRunning" );
        Cluster_exposer.staticmethod( "shutdown" );
        Cluster_exposer.staticmethod( "shutdownCluster" );
        Cluster_exposer.staticmethod( "start" );
        Cluster_exposer.staticmethod( "wait" );
        Cluster_exposer.def( "__copy__", &__copy__);
        Cluster_exposer.def( "__deepcopy__", &__copy__);
        Cluster_exposer.def( "clone", &__copy__);
        Cluster_exposer.def( "__str__", &pvt_get_name);
        Cluster_exposer.def( "__repr__", &pvt_get_name);
    }

}

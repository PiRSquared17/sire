// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Promises.pypp.hpp"

namespace bp = boost::python;

#include "SireID/index.h"

#include "Siren/errors.h"

#include "Siren/forages.h"

#include "promise.h"

#include "promises.h"

#include "workpacket.h"

#include <QTime>

#include <QVector>

#include "promises.h"

#include "Siren/logger.h"

SireCluster::Promises __copy__(const SireCluster::Promises &other){ return SireCluster::Promises(other); }

#include "Siren/str.hpp"

void register_Promises_class(){

    { //::SireCluster::Promises
        typedef bp::class_< SireCluster::Promises, bp::bases< Siren::Handle > > Promises_exposer_t;
        Promises_exposer_t Promises_exposer = Promises_exposer_t( "Promises" );
        bp::scope Promises_scope( Promises_exposer );
        Promises_exposer.def( bp::init< >() );
        Promises_exposer.def( bp::init< SireCluster::Promises const & >(( bp::arg("other") )) );
        { //::SireCluster::Promises::at
        
            typedef ::SireCluster::Promise ( ::SireCluster::Promises::*at_function_type )( int ) const;
            at_function_type at_function_value( &::SireCluster::Promises::at );
            
            Promises_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireCluster::Promises::count
        
            typedef int ( ::SireCluster::Promises::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireCluster::Promises::count );
            
            Promises_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireCluster::Promises::hashCode
        
            typedef ::uint ( ::SireCluster::Promises::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCluster::Promises::hashCode );
            
            Promises_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireCluster::Promises::isEmpty
        
            typedef bool ( ::SireCluster::Promises::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireCluster::Promises::isEmpty );
            
            Promises_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireCluster::Promises::nPromises
        
            typedef int ( ::SireCluster::Promises::*nPromises_function_type )(  ) const;
            nPromises_function_type nPromises_function_value( &::SireCluster::Promises::nPromises );
            
            Promises_exposer.def( 
                "nPromises"
                , nPromises_function_value );
        
        }
        Promises_exposer.def( bp::self != bp::self );
        { //::SireCluster::Promises::operator=
        
            typedef ::SireCluster::Promises & ( ::SireCluster::Promises::*assign_function_type )( ::SireCluster::Promises const & ) ;
            assign_function_type assign_function_value( &::SireCluster::Promises::operator= );
            
            Promises_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Promises_exposer.def( bp::self == bp::self );
        { //::SireCluster::Promises::operator[]
        
            typedef ::SireCluster::Promise ( ::SireCluster::Promises::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireCluster::Promises::operator[] );
            
            Promises_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireCluster::Promises::runLocal
        
            typedef ::SireCluster::Promises ( *runLocal_function_type )( ::QList< Siren::ObjPtr< SireCluster::WorkPacket > > const & );
            runLocal_function_type runLocal_function_value( &::SireCluster::Promises::runLocal );
            
            Promises_exposer.def( 
                "runLocal"
                , runLocal_function_value
                , ( bp::arg("workpackets") ) );
        
        }
        { //::SireCluster::Promises::runLocal
        
            typedef ::SireCluster::Promises ( *runLocal_function_type )( ::QVector< Siren::ObjPtr< SireCluster::WorkPacket > > const & );
            runLocal_function_type runLocal_function_value( &::SireCluster::Promises::runLocal );
            
            Promises_exposer.def( 
                "runLocal"
                , runLocal_function_value
                , ( bp::arg("workpackets") ) );
        
        }
        { //::SireCluster::Promises::toString
        
            typedef ::QString ( ::SireCluster::Promises::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCluster::Promises::toString );
            
            Promises_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireCluster::Promises::wait
        
            typedef void ( ::SireCluster::Promises::*wait_function_type )(  ) ;
            wait_function_type wait_function_value( &::SireCluster::Promises::wait );
            
            Promises_exposer.def( 
                "wait"
                , wait_function_value );
        
        }
        { //::SireCluster::Promises::wait
        
            typedef bool ( ::SireCluster::Promises::*wait_function_type )( int ) ;
            wait_function_type wait_function_value( &::SireCluster::Promises::wait );
            
            Promises_exposer.def( 
                "wait"
                , wait_function_value
                , ( bp::arg("ms") ) );
        
        }
        Promises_exposer.staticmethod( "runLocal" );
        Promises_exposer.def( "__copy__", &__copy__);
        Promises_exposer.def( "__deepcopy__", &__copy__);
        Promises_exposer.def( "clone", &__copy__);
        Promises_exposer.def( "__str__", &__str__< ::SireCluster::Promises > );
        Promises_exposer.def( "__repr__", &__str__< ::SireCluster::Promises > );
    }

}

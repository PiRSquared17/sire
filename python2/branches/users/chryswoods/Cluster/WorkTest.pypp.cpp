// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "WorkTest.pypp.hpp"

namespace bp = boost::python;

#include "Siren/datastream.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "workpacket.h"

#include <QDebug>

#include <QTextStream>

#include "workpacket.h"

#include "Siren/logger.h"

SireCluster::WorkTest __copy__(const SireCluster::WorkTest &other){ return SireCluster::WorkTest(other); }

#include "Siren/str.hpp"

void register_WorkTest_class(){

    { //::SireCluster::WorkTest
        typedef bp::class_< SireCluster::WorkTest, bp::bases< SireCluster::WorkPacket, Siren::Object > > WorkTest_exposer_t;
        WorkTest_exposer_t WorkTest_exposer = WorkTest_exposer_t( "WorkTest" );
        bp::scope WorkTest_scope( WorkTest_exposer );
        WorkTest_exposer.def( bp::init< >() );
        WorkTest_exposer.def( bp::init< int, int, bp::optional< int > >(( bp::arg("start"), bp::arg("end"), bp::arg("step")=(int)(1) )) );
        WorkTest_exposer.def( bp::init< SireCluster::WorkTest const & >(( bp::arg("other") )) );
        { //::SireCluster::WorkTest::approximatePacketSize
        
            typedef int ( ::SireCluster::WorkTest::*approximatePacketSize_function_type )(  ) const;
            approximatePacketSize_function_type approximatePacketSize_function_value( &::SireCluster::WorkTest::approximatePacketSize );
            
            WorkTest_exposer.def( 
                "approximatePacketSize"
                , approximatePacketSize_function_value );
        
        }
        { //::SireCluster::WorkTest::hasFinished
        
            typedef bool ( ::SireCluster::WorkTest::*hasFinished_function_type )(  ) const;
            hasFinished_function_type hasFinished_function_value( &::SireCluster::WorkTest::hasFinished );
            
            WorkTest_exposer.def( 
                "hasFinished"
                , hasFinished_function_value );
        
        }
        { //::SireCluster::WorkTest::hashCode
        
            typedef ::uint ( ::SireCluster::WorkTest::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireCluster::WorkTest::hashCode );
            
            WorkTest_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        WorkTest_exposer.def( bp::self != bp::self );
        { //::SireCluster::WorkTest::operator=
        
            typedef ::SireCluster::WorkTest & ( ::SireCluster::WorkTest::*assign_function_type )( ::SireCluster::WorkTest const & ) ;
            assign_function_type assign_function_value( &::SireCluster::WorkTest::operator= );
            
            WorkTest_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        WorkTest_exposer.def( bp::self == bp::self );
        { //::SireCluster::WorkTest::stream
        
            typedef void ( ::SireCluster::WorkTest::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCluster::WorkTest::stream );
            
            WorkTest_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCluster::WorkTest::toString
        
            typedef ::QString ( ::SireCluster::WorkTest::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireCluster::WorkTest::toString );
            
            WorkTest_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        WorkTest_exposer.def( "__copy__", &__copy__);
        WorkTest_exposer.def( "__deepcopy__", &__copy__);
        WorkTest_exposer.def( "clone", &__copy__);
        WorkTest_exposer.def( "__str__", &__str__< ::SireCluster::WorkTest > );
        WorkTest_exposer.def( "__repr__", &__str__< ::SireCluster::WorkTest > );
    }

}

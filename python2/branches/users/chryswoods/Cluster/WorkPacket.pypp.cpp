// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "WorkPacket.pypp.hpp"

namespace bp = boost::python;

#include "Siren/datastream.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "workpacket.h"

#include <QDebug>

#include <QTextStream>

#include "workpacket.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_WorkPacket_class(){

    { //::SireCluster::WorkPacket
        typedef bp::class_< SireCluster::WorkPacket, bp::bases< Siren::Object >, boost::noncopyable > WorkPacket_exposer_t;
        WorkPacket_exposer_t WorkPacket_exposer = WorkPacket_exposer_t( "WorkPacket", bp::no_init );
        bp::scope WorkPacket_scope( WorkPacket_exposer );
        { //::SireCluster::WorkPacket::approximatePacketSize
        
            typedef int ( ::SireCluster::WorkPacket::*approximatePacketSize_function_type )(  ) const;
            approximatePacketSize_function_type approximatePacketSize_function_value( &::SireCluster::WorkPacket::approximatePacketSize );
            
            WorkPacket_exposer.def( 
                "approximatePacketSize"
                , approximatePacketSize_function_value );
        
        }
        { //::SireCluster::WorkPacket::hasFinished
        
            typedef bool ( ::SireCluster::WorkPacket::*hasFinished_function_type )(  ) const;
            hasFinished_function_type hasFinished_function_value( &::SireCluster::WorkPacket::hasFinished );
            
            WorkPacket_exposer.def( 
                "hasFinished"
                , hasFinished_function_value );
        
        }
        { //::SireCluster::WorkPacket::isError
        
            typedef bool ( ::SireCluster::WorkPacket::*isError_function_type )(  ) const;
            isError_function_type isError_function_value( &::SireCluster::WorkPacket::isError );
            
            WorkPacket_exposer.def( 
                "isError"
                , isError_function_value );
        
        }
        { //::SireCluster::WorkPacket::pack
        
            typedef ::QByteArray ( ::SireCluster::WorkPacket::*pack_function_type )(  ) const;
            pack_function_type pack_function_value( &::SireCluster::WorkPacket::pack );
            
            WorkPacket_exposer.def( 
                "pack"
                , pack_function_value );
        
        }
        { //::SireCluster::WorkPacket::progress
        
            typedef float ( ::SireCluster::WorkPacket::*progress_function_type )(  ) const;
            progress_function_type progress_function_value( &::SireCluster::WorkPacket::progress );
            
            WorkPacket_exposer.def( 
                "progress"
                , progress_function_value );
        
        }
        { //::SireCluster::WorkPacket::runChunk
        
            typedef ::SireCluster::WorkPacketPtr ( ::SireCluster::WorkPacket::*runChunk_function_type )(  ) const;
            runChunk_function_type runChunk_function_value( &::SireCluster::WorkPacket::runChunk );
            
            WorkPacket_exposer.def( 
                "runChunk"
                , runChunk_function_value );
        
        }
        { //::SireCluster::WorkPacket::shouldPack
        
            typedef bool ( ::SireCluster::WorkPacket::*shouldPack_function_type )(  ) const;
            shouldPack_function_type shouldPack_function_value( &::SireCluster::WorkPacket::shouldPack );
            
            WorkPacket_exposer.def( 
                "shouldPack"
                , shouldPack_function_value );
        
        }
        { //::SireCluster::WorkPacket::stream
        
            typedef void ( ::SireCluster::WorkPacket::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireCluster::WorkPacket::stream );
            
            WorkPacket_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireCluster::WorkPacket::throwError
        
            typedef void ( ::SireCluster::WorkPacket::*throwError_function_type )(  ) const;
            throwError_function_type throwError_function_value( &::SireCluster::WorkPacket::throwError );
            
            WorkPacket_exposer.def( 
                "throwError"
                , throwError_function_value );
        
        }
        { //::SireCluster::WorkPacket::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireCluster::WorkPacket::typeName );
            
            WorkPacket_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireCluster::WorkPacket::unpack
        
            typedef ::SireCluster::WorkPacketPtr ( *unpack_function_type )( ::QByteArray const & );
            unpack_function_type unpack_function_value( &::SireCluster::WorkPacket::unpack );
            
            WorkPacket_exposer.def( 
                "unpack"
                , unpack_function_value
                , ( bp::arg("data") ) );
        
        }
        { //::SireCluster::WorkPacket::wasAborted
        
            typedef bool ( ::SireCluster::WorkPacket::*wasAborted_function_type )(  ) const;
            wasAborted_function_type wasAborted_function_value( &::SireCluster::WorkPacket::wasAborted );
            
            WorkPacket_exposer.def( 
                "wasAborted"
                , wasAborted_function_value );
        
        }
        WorkPacket_exposer.staticmethod( "typeName" );
        WorkPacket_exposer.staticmethod( "unpack" );
        WorkPacket_exposer.def( "__str__", &__str__< ::SireCluster::WorkPacket > );
        WorkPacket_exposer.def( "__repr__", &__str__< ::SireCluster::WorkPacket > );
    }

}

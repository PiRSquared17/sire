// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CoordGroupEditor.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/quickcopy.hpp"

#include "SireMaths/axisset.h"

#include "SireMaths/matrix.h"

#include "SireMaths/quaternion.h"

#include "SireMaths/rotate.h"

#include "Siren/errors.h"

#include "Siren/logger.h"

#include "Siren/stream.h"

#include "Siren/tester.h"

#include "coordgroup.h"

#include <QDebug>

#include "coordgroup.h"

#include "Siren/logger.h"

SireVol::CoordGroupEditor __copy__(const SireVol::CoordGroupEditor &other){ return SireVol::CoordGroupEditor(other); }

#include "Siren/str.hpp"

void register_CoordGroupEditor_class(){

    { //::SireVol::CoordGroupEditor
        typedef bp::class_< SireVol::CoordGroupEditor, bp::bases< Siren::Mutable, SireVol::CoordGroupBase, Siren::Object > > CoordGroupEditor_exposer_t;
        CoordGroupEditor_exposer_t CoordGroupEditor_exposer = CoordGroupEditor_exposer_t( "CoordGroupEditor" );
        bp::scope CoordGroupEditor_scope( CoordGroupEditor_exposer );
        CoordGroupEditor_exposer.def( bp::init< >() );
        CoordGroupEditor_exposer.def( bp::init< SireVol::CoordGroup const & >(( bp::arg("other") )) );
        CoordGroupEditor_exposer.def( bp::init< SireVol::CoordGroupEditor const & >(( bp::arg("other") )) );
        { //::SireVol::CoordGroupEditor::changeFrame
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*changeFrame_function_type )( ::SireMaths::AxisSet const &,::SireMaths::AxisSet const & ) ;
            changeFrame_function_type changeFrame_function_value( &::SireVol::CoordGroupEditor::changeFrame );
            
            CoordGroupEditor_exposer.def( 
                "changeFrame"
                , changeFrame_function_value
                , ( bp::arg("from_frame"), bp::arg("to_frame") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::changeFrame
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*changeFrame_function_type )( ::quint32,::SireMaths::AxisSet const &,::SireMaths::AxisSet const & ) ;
            changeFrame_function_type changeFrame_function_value( &::SireVol::CoordGroupEditor::changeFrame );
            
            CoordGroupEditor_exposer.def( 
                "changeFrame"
                , changeFrame_function_value
                , ( bp::arg("i"), bp::arg("from_frame"), bp::arg("to_frame") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::commit
        
            typedef ::SireVol::CoordGroup ( ::SireVol::CoordGroupEditor::*commit_function_type )(  ) ;
            commit_function_type commit_function_value( &::SireVol::CoordGroupEditor::commit );
            
            CoordGroupEditor_exposer.def( 
                "commit"
                , commit_function_value );
        
        }
        { //::SireVol::CoordGroupEditor::hashCode
        
            typedef ::uint ( ::SireVol::CoordGroupEditor::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireVol::CoordGroupEditor::hashCode );
            
            CoordGroupEditor_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireVol::CoordGroupEditor::mapInto
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*mapInto_function_type )( ::SireMaths::AxisSet const & ) ;
            mapInto_function_type mapInto_function_value( &::SireVol::CoordGroupEditor::mapInto );
            
            CoordGroupEditor_exposer.def( 
                "mapInto"
                , mapInto_function_value
                , ( bp::arg("axes") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::mapInto
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*mapInto_function_type )( ::quint32,::SireMaths::AxisSet const & ) ;
            mapInto_function_type mapInto_function_value( &::SireVol::CoordGroupEditor::mapInto );
            
            CoordGroupEditor_exposer.def( 
                "mapInto"
                , mapInto_function_value
                , ( bp::arg("i"), bp::arg("axes") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::operator=
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*assign_function_type )( ::SireVol::CoordGroup const & ) ;
            assign_function_type assign_function_value( &::SireVol::CoordGroupEditor::operator= );
            
            CoordGroupEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("cgroup") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::operator=
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*assign_function_type )( ::SireVol::CoordGroupEditor const & ) ;
            assign_function_type assign_function_value( &::SireVol::CoordGroupEditor::operator= );
            
            CoordGroupEditor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::operator[]
        
            typedef ::SireMaths::Vector & ( ::SireVol::CoordGroupEditor::*__getitem___function_type )( ::quint32 ) ;
            __getitem___function_type __getitem___function_value( &::SireVol::CoordGroupEditor::operator[] );
            
            CoordGroupEditor_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_internal_reference< >() );
        
        }
        { //::SireVol::CoordGroupEditor::restoreState
        
            typedef void ( ::SireVol::CoordGroupEditor::*restoreState_function_type )( ::Siren::Object const & ) ;
            restoreState_function_type restoreState_function_value( &::SireVol::CoordGroupEditor::restoreState );
            
            CoordGroupEditor_exposer.def( 
                "restoreState"
                , restoreState_function_value
                , ( bp::arg("object") ) );
        
        }
        { //::SireVol::CoordGroupEditor::rotate
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*rotate_function_type )( ::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupEditor::rotate );
            
            CoordGroupEditor_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("quat"), bp::arg("point") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::rotate
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*rotate_function_type )( ::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupEditor::rotate );
            
            CoordGroupEditor_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("rotmat"), bp::arg("point") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::rotate
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*rotate_function_type )( ::quint32,::SireMaths::Quaternion const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupEditor::rotate );
            
            CoordGroupEditor_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("i"), bp::arg("quat"), bp::arg("point") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::rotate
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*rotate_function_type )( ::quint32,::SireMaths::Matrix const &,::SireMaths::Vector const & ) ;
            rotate_function_type rotate_function_value( &::SireVol::CoordGroupEditor::rotate );
            
            CoordGroupEditor_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("i"), bp::arg("rotmat"), bp::arg("point") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::saveState
        
            typedef ::Siren::ObjRef ( ::SireVol::CoordGroupEditor::*saveState_function_type )(  ) const;
            saveState_function_type saveState_function_value( &::SireVol::CoordGroupEditor::saveState );
            
            CoordGroupEditor_exposer.def( 
                "saveState"
                , saveState_function_value );
        
        }
        { //::SireVol::CoordGroupEditor::setCoordinates
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*setCoordinates_function_type )( ::QVector< SireMaths::Vector > const & ) ;
            setCoordinates_function_type setCoordinates_function_value( &::SireVol::CoordGroupEditor::setCoordinates );
            
            CoordGroupEditor_exposer.def( 
                "setCoordinates"
                , setCoordinates_function_value
                , ( bp::arg("newcoords") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::setCoordinates
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*setCoordinates_function_type )( ::SireVol::CoordGroupBase const & ) ;
            setCoordinates_function_type setCoordinates_function_value( &::SireVol::CoordGroupEditor::setCoordinates );
            
            CoordGroupEditor_exposer.def( 
                "setCoordinates"
                , setCoordinates_function_value
                , ( bp::arg("newcoords") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::setCoordinates
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*setCoordinates_function_type )( ::quint32,::SireMaths::Vector const & ) ;
            setCoordinates_function_type setCoordinates_function_value( &::SireVol::CoordGroupEditor::setCoordinates );
            
            CoordGroupEditor_exposer.def( 
                "setCoordinates"
                , setCoordinates_function_value
                , ( bp::arg("i"), bp::arg("newcoords") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::stream
        
            typedef void ( ::SireVol::CoordGroupEditor::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireVol::CoordGroupEditor::stream );
            
            CoordGroupEditor_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireVol::CoordGroupEditor::test
        
            typedef bool ( ::SireVol::CoordGroupEditor::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::SireVol::CoordGroupEditor::test );
            
            CoordGroupEditor_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::SireVol::CoordGroupEditor::toString
        
            typedef ::QString ( ::SireVol::CoordGroupEditor::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireVol::CoordGroupEditor::toString );
            
            CoordGroupEditor_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireVol::CoordGroupEditor::translate
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*translate_function_type )( ::SireMaths::Vector const & ) ;
            translate_function_type translate_function_value( &::SireVol::CoordGroupEditor::translate );
            
            CoordGroupEditor_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("delta") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::translate
        
            typedef ::SireVol::CoordGroupEditor & ( ::SireVol::CoordGroupEditor::*translate_function_type )( ::quint32,::SireMaths::Vector const & ) ;
            translate_function_type translate_function_value( &::SireVol::CoordGroupEditor::translate );
            
            CoordGroupEditor_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("i"), bp::arg("delta") )
                , bp::return_self< >() );
        
        }
        { //::SireVol::CoordGroupEditor::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::CoordGroupEditor::typeName );
            
            CoordGroupEditor_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        CoordGroupEditor_exposer.staticmethod( "typeName" );
        CoordGroupEditor_exposer.def( "__copy__", &__copy__);
        CoordGroupEditor_exposer.def( "__deepcopy__", &__copy__);
        CoordGroupEditor_exposer.def( "clone", &__copy__);
        CoordGroupEditor_exposer.def( "__str__", &__str__< ::SireVol::CoordGroupEditor > );
        CoordGroupEditor_exposer.def( "__repr__", &__str__< ::SireVol::CoordGroupEditor > );
    }

}

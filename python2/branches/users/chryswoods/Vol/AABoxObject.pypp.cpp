// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AABoxObject.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/sphere.h"

#include "Siren/datastream.h"

#include "Siren/errors.h"

#include "Siren/logger.h"

#include "Siren/tester.h"

#include "aabox.h"

#include "coordgroup.h"

#include <QDebug>

#include "aabox.h"

#include "Siren/logger.h"

Siren::PrimitiveObject<SireVol::AABox> __copy__(const Siren::PrimitiveObject<SireVol::AABox> &other){ return Siren::PrimitiveObject<SireVol::AABox>(other); }

#include "Siren/str.hpp"

void register_AABoxObject_class(){

    { //::Siren::PrimitiveObject< SireVol::AABox >
        typedef bp::class_< Siren::PrimitiveObject< SireVol::AABox >, bp::bases< Siren::Object > > AABoxObject_exposer_t;
        AABoxObject_exposer_t AABoxObject_exposer = AABoxObject_exposer_t( "AABoxObject" );
        bp::scope AABoxObject_scope( AABoxObject_exposer );
        AABoxObject_exposer.def( bp::init< >() );
        AABoxObject_exposer.def( bp::init< SireVol::AABox const & >(( bp::arg("primitive") )) );
        AABoxObject_exposer.def( bp::init< Siren::PrimitiveObject< SireVol::AABox > const & >(( bp::arg("other") )) );
        { //::Siren::PrimitiveObject< SireVol::AABox >::hashCode
        
            typedef Siren::PrimitiveObject< SireVol::AABox > exported_class_t;
            typedef ::uint ( ::Siren::PrimitiveObject< SireVol::AABox >::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::PrimitiveObject< SireVol::AABox >::hashCode );
            
            AABoxObject_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        AABoxObject_exposer.def( bp::self != bp::self );
        AABoxObject_exposer.def( bp::self != bp::other< SireVol::AABox >() );
        { //::Siren::PrimitiveObject< SireVol::AABox >::operator=
        
            typedef Siren::PrimitiveObject< SireVol::AABox > exported_class_t;
            typedef ::Siren::PrimitiveObject< SireVol::AABox > & ( ::Siren::PrimitiveObject< SireVol::AABox >::*assign_function_type )( ::Siren::PrimitiveObject< SireVol::AABox > const & ) ;
            assign_function_type assign_function_value( &::Siren::PrimitiveObject< SireVol::AABox >::operator= );
            
            AABoxObject_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::Siren::PrimitiveObject< SireVol::AABox >::operator=
        
            typedef Siren::PrimitiveObject< SireVol::AABox > exported_class_t;
            typedef ::Siren::PrimitiveObject< SireVol::AABox > & ( ::Siren::PrimitiveObject< SireVol::AABox >::*assign_function_type )( ::SireVol::AABox const & ) ;
            assign_function_type assign_function_value( &::Siren::PrimitiveObject< SireVol::AABox >::operator= );
            
            AABoxObject_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("primitive") )
                , bp::return_self< >() );
        
        }
        AABoxObject_exposer.def( bp::self == bp::self );
        AABoxObject_exposer.def( bp::self == bp::other< SireVol::AABox >() );
        { //::Siren::PrimitiveObject< SireVol::AABox >::stream
        
            typedef Siren::PrimitiveObject< SireVol::AABox > exported_class_t;
            typedef void ( ::Siren::PrimitiveObject< SireVol::AABox >::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::PrimitiveObject< SireVol::AABox >::stream );
            
            AABoxObject_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::PrimitiveObject< SireVol::AABox >::test
        
            typedef Siren::PrimitiveObject< SireVol::AABox > exported_class_t;
            typedef bool ( ::Siren::PrimitiveObject< SireVol::AABox >::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::PrimitiveObject< SireVol::AABox >::test );
            
            AABoxObject_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::PrimitiveObject< SireVol::AABox >::toString
        
            typedef Siren::PrimitiveObject< SireVol::AABox > exported_class_t;
            typedef ::QString ( ::Siren::PrimitiveObject< SireVol::AABox >::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::PrimitiveObject< SireVol::AABox >::toString );
            
            AABoxObject_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        AABoxObject_exposer.def( "__copy__", &__copy__);
        AABoxObject_exposer.def( "__deepcopy__", &__copy__);
        AABoxObject_exposer.def( "clone", &__copy__);
        AABoxObject_exposer.def( "__str__", &__str__< ::Siren::PrimitiveObject<SireVol::AABox> > );
        AABoxObject_exposer.def( "__repr__", &__str__< ::Siren::PrimitiveObject<SireVol::AABox> > );
    }

}

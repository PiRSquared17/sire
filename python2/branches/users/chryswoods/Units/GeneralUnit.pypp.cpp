// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GeneralUnit.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "Siren/logger.h"

#include "Siren/tester.h"

#include "dimensions.h"

#include "generalunit.h"

#include "temperature.h"

#include <QHash>

#include <QStringList>

#include "generalunit.h"

#include "Siren/logger.h"

SireUnits::Dimension::GeneralUnit __copy__(const SireUnits::Dimension::GeneralUnit &other){ return SireUnits::Dimension::GeneralUnit(other); }

#include "Siren/str.hpp"

void register_GeneralUnit_class(){

    { //::SireUnits::Dimension::GeneralUnit
        typedef bp::class_< SireUnits::Dimension::GeneralUnit, bp::bases< Siren::Primitive<SireUnits::Dimension::GeneralUnit>, SireUnits::Dimension::Unit > > GeneralUnit_exposer_t;
        GeneralUnit_exposer_t GeneralUnit_exposer = GeneralUnit_exposer_t( "GeneralUnit" );
        bp::scope GeneralUnit_scope( GeneralUnit_exposer );
        GeneralUnit_exposer.def( bp::init< >() );
        GeneralUnit_exposer.def( bp::init< int, int, int, int, int, int, int >(( bp::arg("M"), bp::arg("L"), bp::arg("T"), bp::arg("C"), bp::arg("t"), bp::arg("Q"), bp::arg("A") )) );
        GeneralUnit_exposer.def( bp::init< SireUnits::Dimension::GeneralUnit const & >(( bp::arg("other") )) );
        { //::SireUnits::Dimension::GeneralUnit::ANGLE
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*ANGLE_function_type )(  ) const;
            ANGLE_function_type ANGLE_function_value( &::SireUnits::Dimension::GeneralUnit::ANGLE );
            
            GeneralUnit_exposer.def( 
                "ANGLE"
                , ANGLE_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::CHARGE
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*CHARGE_function_type )(  ) const;
            CHARGE_function_type CHARGE_function_value( &::SireUnits::Dimension::GeneralUnit::CHARGE );
            
            GeneralUnit_exposer.def( 
                "CHARGE"
                , CHARGE_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::LENGTH
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*LENGTH_function_type )(  ) const;
            LENGTH_function_type LENGTH_function_value( &::SireUnits::Dimension::GeneralUnit::LENGTH );
            
            GeneralUnit_exposer.def( 
                "LENGTH"
                , LENGTH_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::MASS
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*MASS_function_type )(  ) const;
            MASS_function_type MASS_function_value( &::SireUnits::Dimension::GeneralUnit::MASS );
            
            GeneralUnit_exposer.def( 
                "MASS"
                , MASS_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::QUANTITY
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*QUANTITY_function_type )(  ) const;
            QUANTITY_function_type QUANTITY_function_value( &::SireUnits::Dimension::GeneralUnit::QUANTITY );
            
            GeneralUnit_exposer.def( 
                "QUANTITY"
                , QUANTITY_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::TEMPERATURE
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*TEMPERATURE_function_type )(  ) const;
            TEMPERATURE_function_type TEMPERATURE_function_value( &::SireUnits::Dimension::GeneralUnit::TEMPERATURE );
            
            GeneralUnit_exposer.def( 
                "TEMPERATURE"
                , TEMPERATURE_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::TIME
        
            typedef int ( ::SireUnits::Dimension::GeneralUnit::*TIME_function_type )(  ) const;
            TIME_function_type TIME_function_value( &::SireUnits::Dimension::GeneralUnit::TIME );
            
            GeneralUnit_exposer.def( 
                "TIME"
                , TIME_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::hashCode
        
            typedef ::uint ( ::SireUnits::Dimension::GeneralUnit::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireUnits::Dimension::GeneralUnit::hashCode );
            
            GeneralUnit_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::invert
        
            typedef ::SireUnits::Dimension::GeneralUnit ( ::SireUnits::Dimension::GeneralUnit::*invert_function_type )(  ) const;
            invert_function_type invert_function_value( &::SireUnits::Dimension::GeneralUnit::invert );
            
            GeneralUnit_exposer.def( 
                "invert"
                , invert_function_value );
        
        }
        GeneralUnit_exposer.def( bp::self != bp::self );
        GeneralUnit_exposer.def( bp::self * bp::self );
        GeneralUnit_exposer.def( bp::self * bp::other< double >() );
        GeneralUnit_exposer.def( bp::self * bp::other< int >() );
        GeneralUnit_exposer.def( bp::self *= bp::self );
        GeneralUnit_exposer.def( bp::self + bp::self );
        GeneralUnit_exposer.def( -bp::self );
        GeneralUnit_exposer.def( bp::self - bp::self );
        GeneralUnit_exposer.def( bp::self / bp::self );
        GeneralUnit_exposer.def( bp::self / bp::other< double >() );
        GeneralUnit_exposer.def( bp::self / bp::other< int >() );
        GeneralUnit_exposer.def( bp::self /= bp::self );
        { //::SireUnits::Dimension::GeneralUnit::operator=
        
            typedef ::SireUnits::Dimension::GeneralUnit & ( ::SireUnits::Dimension::GeneralUnit::*assign_function_type )( ::SireUnits::Dimension::GeneralUnit const & ) ;
            assign_function_type assign_function_value( &::SireUnits::Dimension::GeneralUnit::operator= );
            
            GeneralUnit_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        GeneralUnit_exposer.def( bp::self == bp::self );
        { //::SireUnits::Dimension::GeneralUnit::stream
        
            typedef void ( ::SireUnits::Dimension::GeneralUnit::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireUnits::Dimension::GeneralUnit::stream );
            
            GeneralUnit_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::test
        
            typedef bool ( ::SireUnits::Dimension::GeneralUnit::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::SireUnits::Dimension::GeneralUnit::test );
            
            GeneralUnit_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::to
        
            typedef double ( ::SireUnits::Dimension::GeneralUnit::*to_function_type )( ::SireUnits::Dimension::detail::Temperature const & ) const;
            to_function_type to_function_value( &::SireUnits::Dimension::GeneralUnit::to );
            
            GeneralUnit_exposer.def( 
                "to"
                , to_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::to
        
            typedef double ( ::SireUnits::Dimension::GeneralUnit::*to_function_type )( ::SireUnits::Dimension::GeneralUnit const & ) const;
            to_function_type to_function_value( &::SireUnits::Dimension::GeneralUnit::to );
            
            GeneralUnit_exposer.def( 
                "to"
                , to_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireUnits::Dimension::GeneralUnit::toString
        
            typedef ::QString ( ::SireUnits::Dimension::GeneralUnit::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireUnits::Dimension::GeneralUnit::toString );
            
            GeneralUnit_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        GeneralUnit_exposer.def( bp::other< int >() * bp::self );
        GeneralUnit_exposer.def( bp::other< double >() * bp::self );
        GeneralUnit_exposer.def( bp::other< int >() / bp::self );
        GeneralUnit_exposer.def( bp::other< double >() / bp::self );
        GeneralUnit_exposer.def( bp::other<double>() * bp::self );
        GeneralUnit_exposer.def( bp::other<double>() / bp::self );
        GeneralUnit_exposer.def( "__copy__", &__copy__);
        GeneralUnit_exposer.def( "__deepcopy__", &__copy__);
        GeneralUnit_exposer.def( "clone", &__copy__);
        GeneralUnit_exposer.def( "__str__", &__str__< ::SireUnits::Dimension::GeneralUnit > );
        GeneralUnit_exposer.def( "__repr__", &__str__< ::SireUnits::Dimension::GeneralUnit > );
    }

}

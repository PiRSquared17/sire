// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Temperature.pypp.hpp"

namespace bp = boost::python;

#include "temperature.h"

#include "temperature.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_Temperature_class(){

    { //::SireUnits::Dimension::detail::Temperature
        typedef bp::class_< SireUnits::Dimension::detail::Temperature, bp::bases< Siren::Object >, boost::noncopyable > Temperature_exposer_t;
        Temperature_exposer_t Temperature_exposer = Temperature_exposer_t( "Temperature", bp::no_init );
        bp::scope Temperature_scope( Temperature_exposer );
        { //::SireUnits::Dimension::detail::Temperature::convertFromInternal
        
            typedef double ( ::SireUnits::Dimension::detail::Temperature::*convertFromInternal_function_type )( double ) const;
            convertFromInternal_function_type convertFromInternal_function_value( &::SireUnits::Dimension::detail::Temperature::convertFromInternal );
            
            Temperature_exposer.def( 
                "convertFromInternal"
                , convertFromInternal_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::convertFromInternal
        
            typedef double ( ::SireUnits::Dimension::detail::Temperature::*convertFromInternal_function_type )(  ) const;
            convertFromInternal_function_type convertFromInternal_function_value( &::SireUnits::Dimension::detail::Temperature::convertFromInternal );
            
            Temperature_exposer.def( 
                "convertFromInternal"
                , convertFromInternal_function_value );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::convertToInternal
        
            typedef double ( ::SireUnits::Dimension::detail::Temperature::*convertToInternal_function_type )( double ) const;
            convertToInternal_function_type convertToInternal_function_value( &::SireUnits::Dimension::detail::Temperature::convertToInternal );
            
            Temperature_exposer.def( 
                "convertToInternal"
                , convertToInternal_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::hashCode
        
            typedef ::uint ( ::SireUnits::Dimension::detail::Temperature::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireUnits::Dimension::detail::Temperature::hashCode );
            
            Temperature_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::in
        
            typedef double ( ::SireUnits::Dimension::detail::Temperature::*in_function_type )( ::SireUnits::Dimension::detail::Temperature const & ) const;
            in_function_type in_function_value( &::SireUnits::Dimension::detail::Temperature::in );
            
            Temperature_exposer.def( 
                "in"
                , in_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::in
        
            typedef double ( ::SireUnits::Dimension::detail::Temperature::*in_function_type )( ::SireUnits::Dimension::Temperature const & ) const;
            in_function_type in_function_value( &::SireUnits::Dimension::detail::Temperature::in );
            
            Temperature_exposer.def( 
                "in"
                , in_function_value
                , ( bp::arg("temp") ) );
        
        }
        Temperature_exposer.def( bp::self != bp::other< SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 1, 0, 0 > >() );
        Temperature_exposer.def( bp::self != bp::self );
        { //::SireUnits::Dimension::detail::Temperature::operator=
        
            typedef ::SireUnits::Dimension::detail::Temperature & ( ::SireUnits::Dimension::detail::Temperature::*assign_function_type )( ::SireUnits::Dimension::Temperature const & ) ;
            assign_function_type assign_function_value( &::SireUnits::Dimension::detail::Temperature::operator= );
            
            Temperature_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("temperature") )
                , bp::return_self< >() );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::operator=
        
            typedef ::SireUnits::Dimension::detail::Temperature & ( ::SireUnits::Dimension::detail::Temperature::*assign_function_type )( ::SireUnits::Dimension::detail::Temperature const & ) ;
            assign_function_type assign_function_value( &::SireUnits::Dimension::detail::Temperature::operator= );
            
            Temperature_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Temperature_exposer.def( bp::self == bp::other< SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 1, 0, 0 > >() );
        Temperature_exposer.def( bp::self == bp::self );
        { //::SireUnits::Dimension::detail::Temperature::stream
        
            typedef void ( ::SireUnits::Dimension::detail::Temperature::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireUnits::Dimension::detail::Temperature::stream );
            
            Temperature_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::to
        
            typedef double ( ::SireUnits::Dimension::detail::Temperature::*to_function_type )( ::SireUnits::Dimension::detail::Temperature const & ) const;
            to_function_type to_function_value( &::SireUnits::Dimension::detail::Temperature::to );
            
            Temperature_exposer.def( 
                "to"
                , to_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireUnits::Dimension::detail::Temperature::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireUnits::Dimension::detail::Temperature::typeName );
            
            Temperature_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Temperature_exposer.staticmethod( "typeName" );
        Temperature_exposer.def( "__str__", &__str__< ::SireUnits::Dimension::detail::Temperature > );
        Temperature_exposer.def( "__repr__", &__str__< ::SireUnits::Dimension::detail::Temperature > );
    }

}

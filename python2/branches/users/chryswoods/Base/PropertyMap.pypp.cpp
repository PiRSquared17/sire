// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PropertyMap.pypp.hpp"

namespace bp = boost::python;

#include "Siren/objref.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "propertymap.h"

#include <QDebug>

#include "propertymap.h"

#include "Siren/logger.h"

SireBase::PropertyMap __copy__(const SireBase::PropertyMap &other){ return SireBase::PropertyMap(other); }

#include "Siren/str.hpp"

void register_PropertyMap_class(){

    { //::SireBase::PropertyMap
        typedef bp::class_< SireBase::PropertyMap, bp::bases< Siren::Object > > PropertyMap_exposer_t;
        PropertyMap_exposer_t PropertyMap_exposer = PropertyMap_exposer_t( "PropertyMap" );
        bp::scope PropertyMap_scope( PropertyMap_exposer );
        PropertyMap_exposer.def( bp::init< >() );
        PropertyMap_exposer.def( bp::init< QString const &, SireBase::PropertyName const & >(( bp::arg("property"), bp::arg("propname") )) );
        PropertyMap_exposer.def( bp::init< QHash< QString, SireBase::PropertyName > const & >(( bp::arg("propnames") )) );
        PropertyMap_exposer.def( bp::init< SireBase::PropertyMap const & >(( bp::arg("other") )) );
        { //::SireBase::PropertyMap::hashCode
        
            typedef ::uint ( ::SireBase::PropertyMap::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireBase::PropertyMap::hashCode );
            
            PropertyMap_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireBase::PropertyMap::isDefault
        
            typedef bool ( ::SireBase::PropertyMap::*isDefault_function_type )(  ) const;
            isDefault_function_type isDefault_function_value( &::SireBase::PropertyMap::isDefault );
            
            PropertyMap_exposer.def( 
                "isDefault"
                , isDefault_function_value );
        
        }
        PropertyMap_exposer.def( bp::self != bp::self );
        PropertyMap_exposer.def( bp::self + bp::self );
        { //::SireBase::PropertyMap::operator=
        
            typedef ::SireBase::PropertyMap & ( ::SireBase::PropertyMap::*assign_function_type )( ::SireBase::PropertyMap const & ) ;
            assign_function_type assign_function_value( &::SireBase::PropertyMap::operator= );
            
            PropertyMap_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PropertyMap_exposer.def( bp::self == bp::self );
        { //::SireBase::PropertyMap::operator[]
        
            typedef ::SireBase::PropertyName ( ::SireBase::PropertyMap::*__getitem___function_type )( char const * ) const;
            __getitem___function_type __getitem___function_value( &::SireBase::PropertyMap::operator[] );
            
            PropertyMap_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireBase::PropertyMap::operator[]
        
            typedef ::SireBase::PropertyName ( ::SireBase::PropertyMap::*__getitem___function_type )( ::QString const & ) const;
            __getitem___function_type __getitem___function_value( &::SireBase::PropertyMap::operator[] );
            
            PropertyMap_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireBase::PropertyMap::operator[]
        
            typedef ::SireBase::PropertyName ( ::SireBase::PropertyMap::*__getitem___function_type )( ::SireBase::PropertyName const & ) const;
            __getitem___function_type __getitem___function_value( &::SireBase::PropertyMap::operator[] );
            
            PropertyMap_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireBase::PropertyMap::set
        
            typedef void ( ::SireBase::PropertyMap::*set_function_type )( ::QString const &,::SireBase::PropertyName const & ) ;
            set_function_type set_function_value( &::SireBase::PropertyMap::set );
            
            PropertyMap_exposer.def( 
                "set"
                , set_function_value
                , ( bp::arg("name"), bp::arg("source") ) );
        
        }
        { //::SireBase::PropertyMap::specified
        
            typedef bool ( ::SireBase::PropertyMap::*specified_function_type )( char const * ) const;
            specified_function_type specified_function_value( &::SireBase::PropertyMap::specified );
            
            PropertyMap_exposer.def( 
                "specified"
                , specified_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireBase::PropertyMap::specified
        
            typedef bool ( ::SireBase::PropertyMap::*specified_function_type )( ::QString const & ) const;
            specified_function_type specified_function_value( &::SireBase::PropertyMap::specified );
            
            PropertyMap_exposer.def( 
                "specified"
                , specified_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireBase::PropertyMap::specified
        
            typedef bool ( ::SireBase::PropertyMap::*specified_function_type )( ::SireBase::PropertyName const & ) const;
            specified_function_type specified_function_value( &::SireBase::PropertyMap::specified );
            
            PropertyMap_exposer.def( 
                "specified"
                , specified_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::SireBase::PropertyMap::stream
        
            typedef void ( ::SireBase::PropertyMap::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireBase::PropertyMap::stream );
            
            PropertyMap_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireBase::PropertyMap::toString
        
            typedef ::QString ( ::SireBase::PropertyMap::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireBase::PropertyMap::toString );
            
            PropertyMap_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        PropertyMap_exposer.def( "__copy__", &__copy__);
        PropertyMap_exposer.def( "__deepcopy__", &__copy__);
        PropertyMap_exposer.def( "clone", &__copy__);
        PropertyMap_exposer.def( "__str__", &__str__< ::SireBase::PropertyMap > );
        PropertyMap_exposer.def( "__repr__", &__str__< ::SireBase::PropertyMap > );
    }

}

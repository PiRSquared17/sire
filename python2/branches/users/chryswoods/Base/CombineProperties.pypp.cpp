// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CombineProperties.pypp.hpp"

namespace bp = boost::python;

#include "SireID/index.h"

#include "Siren/objref.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "combineproperties.h"

#include "properties.h"

#include "combineproperties.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_CombineProperties_class(){

    { //::SireBase::CombineProperties
        typedef bp::class_< SireBase::CombineProperties, bp::bases< Siren::Object >, boost::noncopyable > CombineProperties_exposer_t;
        CombineProperties_exposer_t CombineProperties_exposer = CombineProperties_exposer_t( "CombineProperties", bp::no_init );
        bp::scope CombineProperties_scope( CombineProperties_exposer );
        { //::SireBase::CombineProperties::at
        
            typedef ::SireBase::PropertyName const & ( ::SireBase::CombineProperties::*at_function_type )( int ) const;
            at_function_type at_function_value( &::SireBase::CombineProperties::at );
            
            CombineProperties_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireBase::CombineProperties::combine
        
            typedef ::Siren::ObjRef ( ::SireBase::CombineProperties::*combine_function_type )( ::SireBase::Properties const & ) const;
            combine_function_type combine_function_value( &::SireBase::CombineProperties::combine );
            
            CombineProperties_exposer.def( 
                "combine"
                , combine_function_value
                , ( bp::arg("properties") ) );
        
        }
        { //::SireBase::CombineProperties::count
        
            typedef int ( ::SireBase::CombineProperties::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireBase::CombineProperties::count );
            
            CombineProperties_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireBase::CombineProperties::hashCode
        
            typedef ::uint ( ::SireBase::CombineProperties::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireBase::CombineProperties::hashCode );
            
            CombineProperties_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireBase::CombineProperties::isEmpty
        
            typedef bool ( ::SireBase::CombineProperties::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireBase::CombineProperties::isEmpty );
            
            CombineProperties_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireBase::CombineProperties::nSources
        
            typedef int ( ::SireBase::CombineProperties::*nSources_function_type )(  ) const;
            nSources_function_type nSources_function_value( &::SireBase::CombineProperties::nSources );
            
            CombineProperties_exposer.def( 
                "nSources"
                , nSources_function_value );
        
        }
        { //::SireBase::CombineProperties::operator[]
        
            typedef ::SireBase::PropertyName const & ( ::SireBase::CombineProperties::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireBase::CombineProperties::operator[] );
            
            CombineProperties_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireBase::CombineProperties::size
        
            typedef int ( ::SireBase::CombineProperties::*size_function_type )(  ) const;
            size_function_type size_function_value( &::SireBase::CombineProperties::size );
            
            CombineProperties_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::SireBase::CombineProperties::stream
        
            typedef void ( ::SireBase::CombineProperties::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireBase::CombineProperties::stream );
            
            CombineProperties_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireBase::CombineProperties::toString
        
            typedef ::QString ( ::SireBase::CombineProperties::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireBase::CombineProperties::toString );
            
            CombineProperties_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireBase::CombineProperties::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::CombineProperties::typeName );
            
            CombineProperties_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        CombineProperties_exposer.staticmethod( "typeName" );
        CombineProperties_exposer.def( "__str__", &__str__< ::SireBase::CombineProperties > );
        CombineProperties_exposer.def( "__repr__", &__str__< ::SireBase::CombineProperties > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "StringMangler.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "stringmangler.h"

#include <QMutex>

#include "stringmangler.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_StringMangler_class(){

    { //::SireBase::StringMangler
        typedef bp::class_< SireBase::StringMangler, bp::bases< Siren::Object >, boost::noncopyable > StringMangler_exposer_t;
        StringMangler_exposer_t StringMangler_exposer = StringMangler_exposer_t( "StringMangler", bp::no_init );
        bp::scope StringMangler_scope( StringMangler_exposer );
        { //::SireBase::StringMangler::mangle
        
            typedef ::QString ( ::SireBase::StringMangler::*mangle_function_type )( ::QString const & ) const;
            mangle_function_type mangle_function_value( &::SireBase::StringMangler::mangle );
            
            StringMangler_exposer.def( 
                "mangle"
                , mangle_function_value
                , ( bp::arg("input") ) );
        
        }
        { //::SireBase::StringMangler::operator()
        
            typedef ::QString ( ::SireBase::StringMangler::*__call___function_type )( ::QString const & ) const;
            __call___function_type __call___function_value( &::SireBase::StringMangler::operator() );
            
            StringMangler_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("input") ) );
        
        }
        { //::SireBase::StringMangler::stream
        
            typedef void ( ::SireBase::StringMangler::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireBase::StringMangler::stream );
            
            StringMangler_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireBase::StringMangler::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::StringMangler::typeName );
            
            StringMangler_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        StringMangler_exposer.staticmethod( "typeName" );
        StringMangler_exposer.def( "__str__", &__str__< ::SireBase::StringMangler > );
        StringMangler_exposer.def( "__repr__", &__str__< ::SireBase::StringMangler > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "LowerCaseString.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "stringmangler.h"

#include "stringmangler.h"

#include "Siren/logger.h"

SireBase::LowerCaseString __copy__(const SireBase::LowerCaseString &other){ return SireBase::LowerCaseString(other); }

#include "Siren/str.hpp"

void register_LowerCaseString_class(){

    { //::SireBase::LowerCaseString
        typedef bp::class_< SireBase::LowerCaseString, bp::bases< SireBase::StringMangler, Siren::Object > > LowerCaseString_exposer_t;
        LowerCaseString_exposer_t LowerCaseString_exposer = LowerCaseString_exposer_t( "LowerCaseString" );
        bp::scope LowerCaseString_scope( LowerCaseString_exposer );
        LowerCaseString_exposer.def( bp::init< >() );
        LowerCaseString_exposer.def( bp::init< SireBase::LowerCaseString const & >(( bp::arg("other") )) );
        { //::SireBase::LowerCaseString::hashCode
        
            typedef ::uint ( ::SireBase::LowerCaseString::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireBase::LowerCaseString::hashCode );
            
            LowerCaseString_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireBase::LowerCaseString::mangle
        
            typedef ::QString ( ::SireBase::LowerCaseString::*mangle_function_type )( ::QString const & ) const;
            mangle_function_type mangle_function_value( &::SireBase::LowerCaseString::mangle );
            
            LowerCaseString_exposer.def( 
                "mangle"
                , mangle_function_value
                , ( bp::arg("input") ) );
        
        }
        LowerCaseString_exposer.def( bp::self != bp::self );
        { //::SireBase::LowerCaseString::operator=
        
            typedef ::SireBase::LowerCaseString & ( ::SireBase::LowerCaseString::*assign_function_type )( ::SireBase::LowerCaseString const & ) ;
            assign_function_type assign_function_value( &::SireBase::LowerCaseString::operator= );
            
            LowerCaseString_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LowerCaseString_exposer.def( bp::self == bp::self );
        { //::SireBase::LowerCaseString::stream
        
            typedef void ( ::SireBase::LowerCaseString::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireBase::LowerCaseString::stream );
            
            LowerCaseString_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireBase::LowerCaseString::toString
        
            typedef ::QString ( ::SireBase::LowerCaseString::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireBase::LowerCaseString::toString );
            
            LowerCaseString_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        LowerCaseString_exposer.def( "__copy__", &__copy__);
        LowerCaseString_exposer.def( "__deepcopy__", &__copy__);
        LowerCaseString_exposer.def( "clone", &__copy__);
        LowerCaseString_exposer.def( "__str__", &__str__< ::SireBase::LowerCaseString > );
        LowerCaseString_exposer.def( "__repr__", &__str__< ::SireBase::LowerCaseString > );
    }

}

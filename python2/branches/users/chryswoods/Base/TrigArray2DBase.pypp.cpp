// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TrigArray2DBase.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "trigarray2d.h"

#include "trigarray2d.hpp"

#include "trigarray2d.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_TrigArray2DBase_class(){

    { //::SireBase::TrigArray2DBase
        typedef bp::class_< SireBase::TrigArray2DBase, bp::bases< Siren::Object >, boost::noncopyable > TrigArray2DBase_exposer_t;
        TrigArray2DBase_exposer_t TrigArray2DBase_exposer = TrigArray2DBase_exposer_t( "TrigArray2DBase", bp::no_init );
        bp::scope TrigArray2DBase_scope( TrigArray2DBase_exposer );
        { //::SireBase::TrigArray2DBase::assertValidIndex
        
            typedef void ( ::SireBase::TrigArray2DBase::*assertValidIndex_function_type )( int,int ) const;
            assertValidIndex_function_type assertValidIndex_function_value( &::SireBase::TrigArray2DBase::assertValidIndex );
            
            TrigArray2DBase_exposer.def( 
                "assertValidIndex"
                , assertValidIndex_function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::SireBase::TrigArray2DBase::checkedOffset
        
            typedef int ( ::SireBase::TrigArray2DBase::*checkedOffset_function_type )( int,int ) const;
            checkedOffset_function_type checkedOffset_function_value( &::SireBase::TrigArray2DBase::checkedOffset );
            
            TrigArray2DBase_exposer.def( 
                "checkedOffset"
                , checkedOffset_function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::SireBase::TrigArray2DBase::count
        
            typedef int ( ::SireBase::TrigArray2DBase::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireBase::TrigArray2DBase::count );
            
            TrigArray2DBase_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireBase::TrigArray2DBase::hashCode
        
            typedef ::uint ( ::SireBase::TrigArray2DBase::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireBase::TrigArray2DBase::hashCode );
            
            TrigArray2DBase_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireBase::TrigArray2DBase::map
        
            typedef int ( ::SireBase::TrigArray2DBase::*map_function_type )( int,int ) const;
            map_function_type map_function_value( &::SireBase::TrigArray2DBase::map );
            
            TrigArray2DBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::SireBase::TrigArray2DBase::nColumns
        
            typedef int ( ::SireBase::TrigArray2DBase::*nColumns_function_type )(  ) const;
            nColumns_function_type nColumns_function_value( &::SireBase::TrigArray2DBase::nColumns );
            
            TrigArray2DBase_exposer.def( 
                "nColumns"
                , nColumns_function_value );
        
        }
        { //::SireBase::TrigArray2DBase::nRows
        
            typedef int ( ::SireBase::TrigArray2DBase::*nRows_function_type )(  ) const;
            nRows_function_type nRows_function_value( &::SireBase::TrigArray2DBase::nRows );
            
            TrigArray2DBase_exposer.def( 
                "nRows"
                , nRows_function_value );
        
        }
        { //::SireBase::TrigArray2DBase::offset
        
            typedef int ( ::SireBase::TrigArray2DBase::*offset_function_type )( int,int ) const;
            offset_function_type offset_function_value( &::SireBase::TrigArray2DBase::offset );
            
            TrigArray2DBase_exposer.def( 
                "offset"
                , offset_function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        { //::SireBase::TrigArray2DBase::size
        
            typedef int ( ::SireBase::TrigArray2DBase::*size_function_type )(  ) const;
            size_function_type size_function_value( &::SireBase::TrigArray2DBase::size );
            
            TrigArray2DBase_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::SireBase::TrigArray2DBase::stream
        
            typedef void ( ::SireBase::TrigArray2DBase::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireBase::TrigArray2DBase::stream );
            
            TrigArray2DBase_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireBase::TrigArray2DBase::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::TrigArray2DBase::typeName );
            
            TrigArray2DBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        TrigArray2DBase_exposer.staticmethod( "typeName" );
        TrigArray2DBase_exposer.def( "__str__", &__str__< ::SireBase::TrigArray2DBase > );
        TrigArray2DBase_exposer.def( "__repr__", &__str__< ::SireBase::TrigArray2DBase > );
    }

}

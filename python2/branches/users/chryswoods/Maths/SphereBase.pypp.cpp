// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SphereBase.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "sphere.h"

#include "sphere.h"

#include "Siren/logger.h"

Siren::Primitive<SireMaths::Sphere> __copy__(const Siren::Primitive<SireMaths::Sphere> &other){ return Siren::Primitive<SireMaths::Sphere>(other); }

const char* pvt_get_name(const Siren::Primitive<SireMaths::Sphere>&){ return "Siren::Primitive<SireMaths::Sphere>";}

void register_SphereBase_class(){

    { //::Siren::Primitive< SireMaths::Sphere >
        typedef bp::class_< Siren::Primitive< SireMaths::Sphere > > SphereBase_exposer_t;
        SphereBase_exposer_t SphereBase_exposer = SphereBase_exposer_t( "SphereBase" );
        bp::scope SphereBase_scope( SphereBase_exposer );
        SphereBase_exposer.def( bp::init< >() );
        { //::Siren::Primitive< SireMaths::Sphere >::getClass
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef ::Siren::Class ( ::Siren::Primitive< SireMaths::Sphere >::*getClass_function_type )(  ) const;
            getClass_function_type getClass_function_value( &::Siren::Primitive< SireMaths::Sphere >::getClass );
            
            SphereBase_exposer.def( 
                "getClass"
                , getClass_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::hashCode
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef ::uint ( ::Siren::Primitive< SireMaths::Sphere >::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::Primitive< SireMaths::Sphere >::hashCode );
            
            SphereBase_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::load
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef void ( ::Siren::Primitive< SireMaths::Sphere >::*load_function_type )( ::Siren::Stream & ) ;
            load_function_type load_function_value( &::Siren::Primitive< SireMaths::Sphere >::load );
            
            SphereBase_exposer.def( 
                "load"
                , load_function_value
                , ( bp::arg("s") ) );
        
        }
        SphereBase_exposer.def( bp::self != bp::other< SireMaths::Sphere >() );
        { //::Siren::Primitive< SireMaths::Sphere >::save
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef void ( ::Siren::Primitive< SireMaths::Sphere >::*save_function_type )( ::Siren::Stream & ) const;
            save_function_type save_function_value( &::Siren::Primitive< SireMaths::Sphere >::save );
            
            SphereBase_exposer.def( 
                "save"
                , save_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::stream
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef void ( ::Siren::Primitive< SireMaths::Sphere >::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::Primitive< SireMaths::Sphere >::stream );
            
            SphereBase_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::test
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef bool ( ::Siren::Primitive< SireMaths::Sphere >::*test_function_type )(  ) const;
            test_function_type test_function_value( &::Siren::Primitive< SireMaths::Sphere >::test );
            
            SphereBase_exposer.def( 
                "test"
                , test_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::test
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef bool ( ::Siren::Primitive< SireMaths::Sphere >::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::Primitive< SireMaths::Sphere >::test );
            
            SphereBase_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::typeName
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::Primitive< SireMaths::Sphere >::typeName );
            
            SphereBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Sphere >::what
        
            typedef Siren::Primitive< SireMaths::Sphere > exported_class_t;
            typedef ::QString ( ::Siren::Primitive< SireMaths::Sphere >::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Siren::Primitive< SireMaths::Sphere >::what );
            
            SphereBase_exposer.def( 
                "what"
                , what_function_value );
        
        }
        SphereBase_exposer.staticmethod( "typeName" );
        SphereBase_exposer.def( "__copy__", &__copy__);
        SphereBase_exposer.def( "__deepcopy__", &__copy__);
        SphereBase_exposer.def( "clone", &__copy__);
        SphereBase_exposer.def( "__str__", &pvt_get_name);
        SphereBase_exposer.def( "__repr__", &pvt_get_name);
    }

}

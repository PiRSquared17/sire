// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PlaneObject.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "plane.h"

#include "plane.h"

#include "Siren/logger.h"

Siren::PrimitiveObject<SireMaths::Plane> __copy__(const Siren::PrimitiveObject<SireMaths::Plane> &other){ return Siren::PrimitiveObject<SireMaths::Plane>(other); }

#include "Siren/str.hpp"

void register_PlaneObject_class(){

    { //::Siren::PrimitiveObject< SireMaths::Plane >
        typedef bp::class_< Siren::PrimitiveObject< SireMaths::Plane >, bp::bases< Siren::Object > > PlaneObject_exposer_t;
        PlaneObject_exposer_t PlaneObject_exposer = PlaneObject_exposer_t( "PlaneObject" );
        bp::scope PlaneObject_scope( PlaneObject_exposer );
        PlaneObject_exposer.def( bp::init< >() );
        PlaneObject_exposer.def( bp::init< SireMaths::Plane const & >(( bp::arg("primitive") )) );
        PlaneObject_exposer.def( bp::init< Siren::PrimitiveObject< SireMaths::Plane > const & >(( bp::arg("other") )) );
        { //::Siren::PrimitiveObject< SireMaths::Plane >::hashCode
        
            typedef Siren::PrimitiveObject< SireMaths::Plane > exported_class_t;
            typedef ::uint ( ::Siren::PrimitiveObject< SireMaths::Plane >::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::PrimitiveObject< SireMaths::Plane >::hashCode );
            
            PlaneObject_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        PlaneObject_exposer.def( bp::self != bp::self );
        PlaneObject_exposer.def( bp::self != bp::other< SireMaths::Plane >() );
        { //::Siren::PrimitiveObject< SireMaths::Plane >::operator=
        
            typedef Siren::PrimitiveObject< SireMaths::Plane > exported_class_t;
            typedef ::Siren::PrimitiveObject< SireMaths::Plane > & ( ::Siren::PrimitiveObject< SireMaths::Plane >::*assign_function_type )( ::Siren::PrimitiveObject< SireMaths::Plane > const & ) ;
            assign_function_type assign_function_value( &::Siren::PrimitiveObject< SireMaths::Plane >::operator= );
            
            PlaneObject_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::Siren::PrimitiveObject< SireMaths::Plane >::operator=
        
            typedef Siren::PrimitiveObject< SireMaths::Plane > exported_class_t;
            typedef ::Siren::PrimitiveObject< SireMaths::Plane > & ( ::Siren::PrimitiveObject< SireMaths::Plane >::*assign_function_type )( ::SireMaths::Plane const & ) ;
            assign_function_type assign_function_value( &::Siren::PrimitiveObject< SireMaths::Plane >::operator= );
            
            PlaneObject_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("primitive") )
                , bp::return_self< >() );
        
        }
        PlaneObject_exposer.def( bp::self == bp::self );
        PlaneObject_exposer.def( bp::self == bp::other< SireMaths::Plane >() );
        { //::Siren::PrimitiveObject< SireMaths::Plane >::stream
        
            typedef Siren::PrimitiveObject< SireMaths::Plane > exported_class_t;
            typedef void ( ::Siren::PrimitiveObject< SireMaths::Plane >::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::PrimitiveObject< SireMaths::Plane >::stream );
            
            PlaneObject_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::PrimitiveObject< SireMaths::Plane >::test
        
            typedef Siren::PrimitiveObject< SireMaths::Plane > exported_class_t;
            typedef bool ( ::Siren::PrimitiveObject< SireMaths::Plane >::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::PrimitiveObject< SireMaths::Plane >::test );
            
            PlaneObject_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::PrimitiveObject< SireMaths::Plane >::toString
        
            typedef Siren::PrimitiveObject< SireMaths::Plane > exported_class_t;
            typedef ::QString ( ::Siren::PrimitiveObject< SireMaths::Plane >::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::PrimitiveObject< SireMaths::Plane >::toString );
            
            PlaneObject_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        PlaneObject_exposer.def( "__copy__", &__copy__);
        PlaneObject_exposer.def( "__deepcopy__", &__copy__);
        PlaneObject_exposer.def( "clone", &__copy__);
        PlaneObject_exposer.def( "__str__", &__str__< ::Siren::PrimitiveObject<SireMaths::Plane> > );
        PlaneObject_exposer.def( "__repr__", &__str__< ::Siren::PrimitiveObject<SireMaths::Plane> > );
    }

}

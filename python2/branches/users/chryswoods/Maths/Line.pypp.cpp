// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Line.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "line.h"

#include <QDataStream>

#include "line.h"

#include "Siren/logger.h"

SireMaths::Line __copy__(const SireMaths::Line &other){ return SireMaths::Line(other); }

#include "Siren/str.hpp"

void register_Line_class(){

    { //::SireMaths::Line
        typedef bp::class_< SireMaths::Line, bp::bases< Siren::Primitive<SireMaths::Line> > > Line_exposer_t;
        Line_exposer_t Line_exposer = Line_exposer_t( "Line" );
        bp::scope Line_scope( Line_exposer );
        Line_exposer.def( bp::init< >() );
        Line_exposer.def( bp::init< SireMaths::Vector const &, SireMaths::Vector const & >(( bp::arg("point0"), bp::arg("point1") )) );
        { //::SireMaths::Line::at
        
            typedef ::SireMaths::Vector const & ( ::SireMaths::Line::*at_function_type )( int ) const;
            at_function_type at_function_value( &::SireMaths::Line::at );
            
            Line_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMaths::Line::count
        
            typedef int ( ::SireMaths::Line::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireMaths::Line::count );
            
            Line_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireMaths::Line::hashCode
        
            typedef ::uint ( ::SireMaths::Line::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireMaths::Line::hashCode );
            
            Line_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireMaths::Line::length
        
            typedef double ( ::SireMaths::Line::*length_function_type )(  ) const;
            length_function_type length_function_value( &::SireMaths::Line::length );
            
            Line_exposer.def( 
                "length"
                , length_function_value );
        
        }
        Line_exposer.def( bp::self != bp::self );
        { //::SireMaths::Line::operator=
        
            typedef ::SireMaths::Line & ( ::SireMaths::Line::*assign_function_type )( ::SireMaths::Line const & ) ;
            assign_function_type assign_function_value( &::SireMaths::Line::operator= );
            
            Line_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Line_exposer.def( bp::self == bp::self );
        { //::SireMaths::Line::operator[]
        
            typedef ::SireMaths::Vector const & ( ::SireMaths::Line::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMaths::Line::operator[] );
            
            Line_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMaths::Line::point
        
            typedef ::SireMaths::Vector const & ( ::SireMaths::Line::*point_function_type )( int ) const;
            point_function_type point_function_value( &::SireMaths::Line::point );
            
            Line_exposer.def( 
                "point"
                , point_function_value
                , ( bp::arg("i") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMaths::Line::stream
        
            typedef void ( ::SireMaths::Line::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireMaths::Line::stream );
            
            Line_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireMaths::Line::toString
        
            typedef ::QString ( ::SireMaths::Line::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::Line::toString );
            
            Line_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMaths::Line::vector
        
            typedef ::SireMaths::Vector ( ::SireMaths::Line::*vector_function_type )(  ) const;
            vector_function_type vector_function_value( &::SireMaths::Line::vector );
            
            Line_exposer.def( 
                "vector"
                , vector_function_value );
        
        }
        Line_exposer.def( "__copy__", &__copy__);
        Line_exposer.def( "__deepcopy__", &__copy__);
        Line_exposer.def( "clone", &__copy__);
        Line_exposer.def( "__str__", &__str__< ::SireMaths::Line > );
        Line_exposer.def( "__repr__", &__str__< ::SireMaths::Line > );
    }

}

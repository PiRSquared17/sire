// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "LineBase.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "line.h"

#include <QDataStream>

#include "line.h"

#include "Siren/logger.h"

Siren::Primitive<SireMaths::Line> __copy__(const Siren::Primitive<SireMaths::Line> &other){ return Siren::Primitive<SireMaths::Line>(other); }

const char* pvt_get_name(const Siren::Primitive<SireMaths::Line>&){ return "Siren::Primitive<SireMaths::Line>";}

void register_LineBase_class(){

    { //::Siren::Primitive< SireMaths::Line >
        typedef bp::class_< Siren::Primitive< SireMaths::Line > > LineBase_exposer_t;
        LineBase_exposer_t LineBase_exposer = LineBase_exposer_t( "LineBase" );
        bp::scope LineBase_scope( LineBase_exposer );
        LineBase_exposer.def( bp::init< >() );
        { //::Siren::Primitive< SireMaths::Line >::getClass
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef ::Siren::Class ( ::Siren::Primitive< SireMaths::Line >::*getClass_function_type )(  ) const;
            getClass_function_type getClass_function_value( &::Siren::Primitive< SireMaths::Line >::getClass );
            
            LineBase_exposer.def( 
                "getClass"
                , getClass_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::hashCode
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef ::uint ( ::Siren::Primitive< SireMaths::Line >::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::Primitive< SireMaths::Line >::hashCode );
            
            LineBase_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::load
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef void ( ::Siren::Primitive< SireMaths::Line >::*load_function_type )( ::Siren::Stream & ) ;
            load_function_type load_function_value( &::Siren::Primitive< SireMaths::Line >::load );
            
            LineBase_exposer.def( 
                "load"
                , load_function_value
                , ( bp::arg("s") ) );
        
        }
        LineBase_exposer.def( bp::self != bp::other< SireMaths::Line >() );
        { //::Siren::Primitive< SireMaths::Line >::save
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef void ( ::Siren::Primitive< SireMaths::Line >::*save_function_type )( ::Siren::Stream & ) const;
            save_function_type save_function_value( &::Siren::Primitive< SireMaths::Line >::save );
            
            LineBase_exposer.def( 
                "save"
                , save_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::stream
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef void ( ::Siren::Primitive< SireMaths::Line >::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::Primitive< SireMaths::Line >::stream );
            
            LineBase_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::test
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef bool ( ::Siren::Primitive< SireMaths::Line >::*test_function_type )(  ) const;
            test_function_type test_function_value( &::Siren::Primitive< SireMaths::Line >::test );
            
            LineBase_exposer.def( 
                "test"
                , test_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::test
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef bool ( ::Siren::Primitive< SireMaths::Line >::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::Primitive< SireMaths::Line >::test );
            
            LineBase_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::typeName
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::Primitive< SireMaths::Line >::typeName );
            
            LineBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Siren::Primitive< SireMaths::Line >::what
        
            typedef Siren::Primitive< SireMaths::Line > exported_class_t;
            typedef ::QString ( ::Siren::Primitive< SireMaths::Line >::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Siren::Primitive< SireMaths::Line >::what );
            
            LineBase_exposer.def( 
                "what"
                , what_function_value );
        
        }
        LineBase_exposer.staticmethod( "typeName" );
        LineBase_exposer.def( "__copy__", &__copy__);
        LineBase_exposer.def( "__deepcopy__", &__copy__);
        LineBase_exposer.def( "clone", &__copy__);
        LineBase_exposer.def( "__str__", &pvt_get_name);
        LineBase_exposer.def( "__repr__", &pvt_get_name);
    }

}

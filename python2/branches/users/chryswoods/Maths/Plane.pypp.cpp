// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Plane.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "plane.h"

#include "plane.h"

#include "Siren/logger.h"

SireMaths::Plane __copy__(const SireMaths::Plane &other){ return SireMaths::Plane(other); }

#include "Siren/str.hpp"

void register_Plane_class(){

    { //::SireMaths::Plane
        typedef bp::class_< SireMaths::Plane, bp::bases< Siren::Primitive<SireMaths::Plane> > > Plane_exposer_t;
        Plane_exposer_t Plane_exposer = Plane_exposer_t( "Plane" );
        bp::scope Plane_scope( Plane_exposer );
        Plane_exposer.def( bp::init< >() );
        Plane_exposer.def( bp::init< SireMaths::Vector const &, double const & >(( bp::arg("normal"), bp::arg("distance") )) );
        Plane_exposer.def( bp::init< double const &, double const &, double const &, double const & >(( bp::arg("a"), bp::arg("b"), bp::arg("c"), bp::arg("d") )) );
        Plane_exposer.def( bp::init< SireMaths::Vector const &, SireMaths::Vector const & >(( bp::arg("normal"), bp::arg("contains_point") )) );
        Plane_exposer.def( bp::init< SireMaths::Plane const & >(( bp::arg("other") )) );
        { //::SireMaths::Plane::a
        
            typedef double ( ::SireMaths::Plane::*a_function_type )(  ) const;
            a_function_type a_function_value( &::SireMaths::Plane::a );
            
            Plane_exposer.def( 
                "a"
                , a_function_value );
        
        }
        { //::SireMaths::Plane::b
        
            typedef double ( ::SireMaths::Plane::*b_function_type )(  ) const;
            b_function_type b_function_value( &::SireMaths::Plane::b );
            
            Plane_exposer.def( 
                "b"
                , b_function_value );
        
        }
        { //::SireMaths::Plane::c
        
            typedef double ( ::SireMaths::Plane::*c_function_type )(  ) const;
            c_function_type c_function_value( &::SireMaths::Plane::c );
            
            Plane_exposer.def( 
                "c"
                , c_function_value );
        
        }
        { //::SireMaths::Plane::d
        
            typedef double ( ::SireMaths::Plane::*d_function_type )(  ) const;
            d_function_type d_function_value( &::SireMaths::Plane::d );
            
            Plane_exposer.def( 
                "d"
                , d_function_value );
        
        }
        { //::SireMaths::Plane::distance
        
            typedef double ( ::SireMaths::Plane::*distance_function_type )( ::SireMaths::Vector const & ) const;
            distance_function_type distance_function_value( &::SireMaths::Plane::distance );
            
            Plane_exposer.def( 
                "distance"
                , distance_function_value
                , ( bp::arg("point") ) );
        
        }
        { //::SireMaths::Plane::distanceFromOrigin
        
            typedef double const & ( ::SireMaths::Plane::*distanceFromOrigin_function_type )(  ) const;
            distanceFromOrigin_function_type distanceFromOrigin_function_value( &::SireMaths::Plane::distanceFromOrigin );
            
            Plane_exposer.def( 
                "distanceFromOrigin"
                , distanceFromOrigin_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMaths::Plane::hashCode
        
            typedef ::uint ( ::SireMaths::Plane::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireMaths::Plane::hashCode );
            
            Plane_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireMaths::Plane::normal
        
            typedef ::SireMaths::Vector const & ( ::SireMaths::Plane::*normal_function_type )(  ) const;
            normal_function_type normal_function_value( &::SireMaths::Plane::normal );
            
            Plane_exposer.def( 
                "normal"
                , normal_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        Plane_exposer.def( bp::self != bp::self );
        { //::SireMaths::Plane::operator=
        
            typedef ::SireMaths::Plane & ( ::SireMaths::Plane::*assign_function_type )( ::SireMaths::Plane const & ) ;
            assign_function_type assign_function_value( &::SireMaths::Plane::operator= );
            
            Plane_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Plane_exposer.def( bp::self == bp::self );
        { //::SireMaths::Plane::stream
        
            typedef void ( ::SireMaths::Plane::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireMaths::Plane::stream );
            
            Plane_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireMaths::Plane::toString
        
            typedef ::QString ( ::SireMaths::Plane::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::Plane::toString );
            
            Plane_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Plane_exposer.def( "__copy__", &__copy__);
        Plane_exposer.def( "__deepcopy__", &__copy__);
        Plane_exposer.def( "clone", &__copy__);
        Plane_exposer.def( "__str__", &__str__< ::SireMaths::Plane > );
        Plane_exposer.def( "__repr__", &__str__< ::SireMaths::Plane > );
    }

}

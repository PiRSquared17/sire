// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Rational.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/errors.h"

#include "Siren/tostring.h"

#include "maths.h"

#include "rational.h"

#include "rational.h"

#include "Siren/logger.h"

SireMaths::Rational __copy__(const SireMaths::Rational &other){ return SireMaths::Rational(other); }

#include "Siren/str.hpp"

void register_Rational_class(){

    { //::SireMaths::Rational
        typedef bp::class_< SireMaths::Rational, bp::bases< Siren::Primitive<SireMaths::Rational> > > Rational_exposer_t;
        Rational_exposer_t Rational_exposer = Rational_exposer_t( "Rational" );
        bp::scope Rational_scope( Rational_exposer );
        Rational_exposer.def( bp::init< >() );
        Rational_exposer.def( bp::init< int >(( bp::arg("n") )) );
        Rational_exposer.def( bp::init< int, int >(( bp::arg("n"), bp::arg("d") )) );
        Rational_exposer.def( bp::init< double >(( bp::arg("value") )) );
        Rational_exposer.def( bp::init< SireMaths::Rational const & >(( bp::arg("other") )) );
        { //::SireMaths::Rational::denominator
        
            typedef int ( ::SireMaths::Rational::*denominator_function_type )(  ) const;
            denominator_function_type denominator_function_value( &::SireMaths::Rational::denominator );
            
            Rational_exposer.def( 
                "denominator"
                , denominator_function_value );
        
        }
        { //::SireMaths::Rational::hashCode
        
            typedef ::uint ( ::SireMaths::Rational::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireMaths::Rational::hashCode );
            
            Rational_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireMaths::Rational::isRational
        
            typedef bool ( *isRational_function_type )( double,int );
            isRational_function_type isRational_function_value( &::SireMaths::Rational::isRational );
            
            Rational_exposer.def( 
                "isRational"
                , isRational_function_value
                , ( bp::arg("val"), bp::arg("maxdenom") ) );
        
        }
        { //::SireMaths::Rational::isRational
        
            typedef bool ( *isRational_function_type )( double );
            isRational_function_type isRational_function_value( &::SireMaths::Rational::isRational );
            
            Rational_exposer.def( 
                "isRational"
                , isRational_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireMaths::Rational::numerator
        
            typedef int ( ::SireMaths::Rational::*numerator_function_type )(  ) const;
            numerator_function_type numerator_function_value( &::SireMaths::Rational::numerator );
            
            Rational_exposer.def( 
                "numerator"
                , numerator_function_value );
        
        }
        Rational_exposer.def( !bp::self );
        Rational_exposer.def( bp::self != bp::self );
        Rational_exposer.def( bp::self < bp::self );
        Rational_exposer.def( bp::self < bp::other< int >() );
        { //::SireMaths::Rational::operator=
        
            typedef ::SireMaths::Rational & ( ::SireMaths::Rational::*assign_function_type )( ::SireMaths::Rational const & ) ;
            assign_function_type assign_function_value( &::SireMaths::Rational::operator= );
            
            Rational_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Rational_exposer.def( bp::self == bp::self );
        Rational_exposer.def( bp::self == bp::other< int >() );
        Rational_exposer.def( bp::self > bp::other< int >() );
        { //::SireMaths::Rational::stream
        
            typedef void ( ::SireMaths::Rational::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireMaths::Rational::stream );
            
            Rational_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireMaths::Rational::toRational
        
            typedef ::SireMaths::Rational ( *toRational_function_type )( double,int );
            toRational_function_type toRational_function_value( &::SireMaths::Rational::toRational );
            
            Rational_exposer.def( 
                "toRational"
                , toRational_function_value
                , ( bp::arg("val"), bp::arg("maxdenom") ) );
        
        }
        { //::SireMaths::Rational::toRational
        
            typedef ::SireMaths::Rational ( *toRational_function_type )( double );
            toRational_function_type toRational_function_value( &::SireMaths::Rational::toRational );
            
            Rational_exposer.def( 
                "toRational"
                , toRational_function_value
                , ( bp::arg("val") ) );
        
        }
        { //::SireMaths::Rational::toString
        
            typedef ::QString ( ::SireMaths::Rational::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::Rational::toString );
            
            Rational_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Rational_exposer.staticmethod( "isRational" );
        Rational_exposer.staticmethod( "toRational" );
        Rational_exposer.def( "__copy__", &__copy__);
        Rational_exposer.def( "__deepcopy__", &__copy__);
        Rational_exposer.def( "clone", &__copy__);
        Rational_exposer.def( "__str__", &__str__< ::SireMaths::Rational > );
        Rational_exposer.def( "__repr__", &__str__< ::SireMaths::Rational > );
    }

}

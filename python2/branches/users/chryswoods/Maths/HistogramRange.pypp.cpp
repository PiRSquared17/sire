// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "HistogramRange.pypp.hpp"

namespace bp = boost::python;

#include "SireID/index.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "histogram.h"

#include "histogram.h"

#include "Siren/logger.h"

SireMaths::HistogramRange __copy__(const SireMaths::HistogramRange &other){ return SireMaths::HistogramRange(other); }

#include "Siren/str.hpp"

void register_HistogramRange_class(){

    { //::SireMaths::HistogramRange
        typedef bp::class_< SireMaths::HistogramRange, bp::bases< Siren::Object > > HistogramRange_exposer_t;
        HistogramRange_exposer_t HistogramRange_exposer = HistogramRange_exposer_t( "HistogramRange" );
        bp::scope HistogramRange_scope( HistogramRange_exposer );
        HistogramRange_exposer.def( bp::init< >() );
        HistogramRange_exposer.def( bp::init< double, double, bp::optional< int > >(( bp::arg("min"), bp::arg("max"), bp::arg("nbins")=(int)(101) )) );
        HistogramRange_exposer.def( bp::init< double, double, double >(( bp::arg("min"), bp::arg("max"), bp::arg("binwidth") )) );
        HistogramRange_exposer.def( bp::init< SireMaths::HistogramRange const & >(( bp::arg("other") )) );
        { //::SireMaths::HistogramRange::bin
        
            typedef int ( ::SireMaths::HistogramRange::*bin_function_type )( double ) const;
            bin_function_type bin_function_value( &::SireMaths::HistogramRange::bin );
            
            HistogramRange_exposer.def( 
                "bin"
                , bin_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMaths::HistogramRange::binWidth
        
            typedef double ( ::SireMaths::HistogramRange::*binWidth_function_type )(  ) const;
            binWidth_function_type binWidth_function_value( &::SireMaths::HistogramRange::binWidth );
            
            HistogramRange_exposer.def( 
                "binWidth"
                , binWidth_function_value );
        
        }
        { //::SireMaths::HistogramRange::count
        
            typedef int ( ::SireMaths::HistogramRange::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireMaths::HistogramRange::count );
            
            HistogramRange_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireMaths::HistogramRange::hashCode
        
            typedef ::uint ( ::SireMaths::HistogramRange::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireMaths::HistogramRange::hashCode );
            
            HistogramRange_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireMaths::HistogramRange::maximum
        
            typedef double ( ::SireMaths::HistogramRange::*maximum_function_type )(  ) const;
            maximum_function_type maximum_function_value( &::SireMaths::HistogramRange::maximum );
            
            HistogramRange_exposer.def( 
                "maximum"
                , maximum_function_value );
        
        }
        { //::SireMaths::HistogramRange::middle
        
            typedef double ( ::SireMaths::HistogramRange::*middle_function_type )(  ) const;
            middle_function_type middle_function_value( &::SireMaths::HistogramRange::middle );
            
            HistogramRange_exposer.def( 
                "middle"
                , middle_function_value );
        
        }
        { //::SireMaths::HistogramRange::minimum
        
            typedef double ( ::SireMaths::HistogramRange::*minimum_function_type )(  ) const;
            minimum_function_type minimum_function_value( &::SireMaths::HistogramRange::minimum );
            
            HistogramRange_exposer.def( 
                "minimum"
                , minimum_function_value );
        
        }
        { //::SireMaths::HistogramRange::nBins
        
            typedef int ( ::SireMaths::HistogramRange::*nBins_function_type )(  ) const;
            nBins_function_type nBins_function_value( &::SireMaths::HistogramRange::nBins );
            
            HistogramRange_exposer.def( 
                "nBins"
                , nBins_function_value );
        
        }
        HistogramRange_exposer.def( bp::self != bp::self );
        { //::SireMaths::HistogramRange::operator=
        
            typedef ::SireMaths::HistogramRange & ( ::SireMaths::HistogramRange::*assign_function_type )( ::SireMaths::HistogramRange const & ) ;
            assign_function_type assign_function_value( &::SireMaths::HistogramRange::operator= );
            
            HistogramRange_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        HistogramRange_exposer.def( bp::self == bp::self );
        { //::SireMaths::HistogramRange::operator[]
        
            typedef ::SireMaths::HistogramBin ( ::SireMaths::HistogramRange::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMaths::HistogramRange::operator[] );
            
            HistogramRange_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireMaths::HistogramRange::stream
        
            typedef void ( ::SireMaths::HistogramRange::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireMaths::HistogramRange::stream );
            
            HistogramRange_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireMaths::HistogramRange::toString
        
            typedef ::QString ( ::SireMaths::HistogramRange::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::HistogramRange::toString );
            
            HistogramRange_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        HistogramRange_exposer.def( "__copy__", &__copy__);
        HistogramRange_exposer.def( "__deepcopy__", &__copy__);
        HistogramRange_exposer.def( "clone", &__copy__);
        HistogramRange_exposer.def( "__str__", &__str__< ::SireMaths::HistogramRange > );
        HistogramRange_exposer.def( "__repr__", &__str__< ::SireMaths::HistogramRange > );
    }

}

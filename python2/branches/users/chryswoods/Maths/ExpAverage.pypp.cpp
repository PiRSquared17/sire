// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ExpAverage.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/maths.h"

#include "Siren/errors.h"

#include "Siren/objref.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "accumulator.h"

#include <QDebug>

#include <QMutex>

#include <cmath>

#include "accumulator.h"

#include "Siren/logger.h"

SireMaths::ExpAverage __copy__(const SireMaths::ExpAverage &other){ return SireMaths::ExpAverage(other); }

#include "Siren/str.hpp"

void register_ExpAverage_class(){

    { //::SireMaths::ExpAverage
        typedef bp::class_< SireMaths::ExpAverage, bp::bases< SireMaths::Accumulator, Siren::Mutable, Siren::Object > > ExpAverage_exposer_t;
        ExpAverage_exposer_t ExpAverage_exposer = ExpAverage_exposer_t( "ExpAverage", bp::init< bp::optional< double > >(( bp::arg("scale")=1 )) );
        bp::scope ExpAverage_scope( ExpAverage_exposer );
        ExpAverage_exposer.def( bp::init< SireMaths::ExpAverage const & >(( bp::arg("other") )) );
        { //::SireMaths::ExpAverage::accumulate
        
            typedef void ( ::SireMaths::ExpAverage::*accumulate_function_type )( double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::ExpAverage::accumulate );
            
            ExpAverage_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMaths::ExpAverage::average
        
            typedef double ( ::SireMaths::ExpAverage::*average_function_type )(  ) const;
            average_function_type average_function_value( &::SireMaths::ExpAverage::average );
            
            ExpAverage_exposer.def( 
                "average"
                , average_function_value );
        
        }
        { //::SireMaths::ExpAverage::clear
        
            typedef void ( ::SireMaths::ExpAverage::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::SireMaths::ExpAverage::clear );
            
            ExpAverage_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        ExpAverage_exposer.def( bp::self != bp::self );
        { //::SireMaths::ExpAverage::operator=
        
            typedef ::SireMaths::ExpAverage & ( ::SireMaths::ExpAverage::*assign_function_type )( ::SireMaths::ExpAverage const & ) ;
            assign_function_type assign_function_value( &::SireMaths::ExpAverage::operator= );
            
            ExpAverage_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        ExpAverage_exposer.def( bp::self == bp::self );
        { //::SireMaths::ExpAverage::stream
        
            typedef void ( ::SireMaths::ExpAverage::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireMaths::ExpAverage::stream );
            
            ExpAverage_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireMaths::ExpAverage::toString
        
            typedef ::QString ( ::SireMaths::ExpAverage::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::ExpAverage::toString );
            
            ExpAverage_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        ExpAverage_exposer.def( "__copy__", &__copy__);
        ExpAverage_exposer.def( "__deepcopy__", &__copy__);
        ExpAverage_exposer.def( "clone", &__copy__);
        ExpAverage_exposer.def( "__str__", &__str__< ::SireMaths::ExpAverage > );
        ExpAverage_exposer.def( "__repr__", &__str__< ::SireMaths::ExpAverage > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "RationalObject.pypp.hpp"

namespace bp = boost::python;

#include "SireMaths/errors.h"

#include "Siren/tostring.h"

#include "maths.h"

#include "rational.h"

#include "rational.h"

#include "Siren/logger.h"

Siren::PrimitiveObject<SireMaths::Rational> __copy__(const Siren::PrimitiveObject<SireMaths::Rational> &other){ return Siren::PrimitiveObject<SireMaths::Rational>(other); }

#include "Siren/str.hpp"

void register_RationalObject_class(){

    { //::Siren::PrimitiveObject< SireMaths::Rational >
        typedef bp::class_< Siren::PrimitiveObject< SireMaths::Rational >, bp::bases< Siren::Object > > RationalObject_exposer_t;
        RationalObject_exposer_t RationalObject_exposer = RationalObject_exposer_t( "RationalObject" );
        bp::scope RationalObject_scope( RationalObject_exposer );
        RationalObject_exposer.def( bp::init< >() );
        RationalObject_exposer.def( bp::init< SireMaths::Rational const & >(( bp::arg("primitive") )) );
        RationalObject_exposer.def( bp::init< Siren::PrimitiveObject< SireMaths::Rational > const & >(( bp::arg("other") )) );
        { //::Siren::PrimitiveObject< SireMaths::Rational >::hashCode
        
            typedef Siren::PrimitiveObject< SireMaths::Rational > exported_class_t;
            typedef ::uint ( ::Siren::PrimitiveObject< SireMaths::Rational >::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::PrimitiveObject< SireMaths::Rational >::hashCode );
            
            RationalObject_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        RationalObject_exposer.def( bp::self != bp::self );
        RationalObject_exposer.def( bp::self != bp::other< SireMaths::Rational >() );
        { //::Siren::PrimitiveObject< SireMaths::Rational >::operator=
        
            typedef Siren::PrimitiveObject< SireMaths::Rational > exported_class_t;
            typedef ::Siren::PrimitiveObject< SireMaths::Rational > & ( ::Siren::PrimitiveObject< SireMaths::Rational >::*assign_function_type )( ::Siren::PrimitiveObject< SireMaths::Rational > const & ) ;
            assign_function_type assign_function_value( &::Siren::PrimitiveObject< SireMaths::Rational >::operator= );
            
            RationalObject_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::Siren::PrimitiveObject< SireMaths::Rational >::operator=
        
            typedef Siren::PrimitiveObject< SireMaths::Rational > exported_class_t;
            typedef ::Siren::PrimitiveObject< SireMaths::Rational > & ( ::Siren::PrimitiveObject< SireMaths::Rational >::*assign_function_type )( ::SireMaths::Rational const & ) ;
            assign_function_type assign_function_value( &::Siren::PrimitiveObject< SireMaths::Rational >::operator= );
            
            RationalObject_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("primitive") )
                , bp::return_self< >() );
        
        }
        RationalObject_exposer.def( bp::self == bp::self );
        RationalObject_exposer.def( bp::self == bp::other< SireMaths::Rational >() );
        { //::Siren::PrimitiveObject< SireMaths::Rational >::stream
        
            typedef Siren::PrimitiveObject< SireMaths::Rational > exported_class_t;
            typedef void ( ::Siren::PrimitiveObject< SireMaths::Rational >::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::PrimitiveObject< SireMaths::Rational >::stream );
            
            RationalObject_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::PrimitiveObject< SireMaths::Rational >::test
        
            typedef Siren::PrimitiveObject< SireMaths::Rational > exported_class_t;
            typedef bool ( ::Siren::PrimitiveObject< SireMaths::Rational >::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::PrimitiveObject< SireMaths::Rational >::test );
            
            RationalObject_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::PrimitiveObject< SireMaths::Rational >::toString
        
            typedef Siren::PrimitiveObject< SireMaths::Rational > exported_class_t;
            typedef ::QString ( ::Siren::PrimitiveObject< SireMaths::Rational >::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::PrimitiveObject< SireMaths::Rational >::toString );
            
            RationalObject_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        RationalObject_exposer.def( "__copy__", &__copy__);
        RationalObject_exposer.def( "__deepcopy__", &__copy__);
        RationalObject_exposer.def( "clone", &__copy__);
        RationalObject_exposer.def( "__str__", &__str__< ::Siren::PrimitiveObject<SireMaths::Rational> > );
        RationalObject_exposer.def( "__repr__", &__str__< ::Siren::PrimitiveObject<SireMaths::Rational> > );
    }

}

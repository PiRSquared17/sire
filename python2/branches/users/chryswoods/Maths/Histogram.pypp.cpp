// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Histogram.pypp.hpp"

namespace bp = boost::python;

#include "SireID/index.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "Siren/streamqt.h"

#include "histogram.h"

#include "histogram.h"

#include "Siren/logger.h"

SireMaths::Histogram __copy__(const SireMaths::Histogram &other){ return SireMaths::Histogram(other); }

#include "Siren/str.hpp"

void register_Histogram_class(){

    { //::SireMaths::Histogram
        typedef bp::class_< SireMaths::Histogram, bp::bases< Siren::Mutable, Siren::Object > > Histogram_exposer_t;
        Histogram_exposer_t Histogram_exposer = Histogram_exposer_t( "Histogram" );
        bp::scope Histogram_scope( Histogram_exposer );
        Histogram_exposer.def( bp::init< >() );
        Histogram_exposer.def( bp::init< double, double, bp::optional< int > >(( bp::arg("min"), bp::arg("max"), bp::arg("nbins")=(int)(101) )) );
        Histogram_exposer.def( bp::init< double, double, double >(( bp::arg("min"), bp::arg("max"), bp::arg("binwidth") )) );
        Histogram_exposer.def( bp::init< SireMaths::HistogramRange const & >(( bp::arg("range") )) );
        Histogram_exposer.def( bp::init< SireMaths::HistogramRange const &, QVector< double > const & >(( bp::arg("range"), bp::arg("values") )) );
        Histogram_exposer.def( bp::init< SireMaths::Histogram const & >(( bp::arg("other") )) );
        { //::SireMaths::Histogram::accumulate
        
            typedef void ( ::SireMaths::Histogram::*accumulate_function_type )( double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Histogram::accumulate );
            
            Histogram_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value") ) );
        
        }
        { //::SireMaths::Histogram::accumulate
        
            typedef void ( ::SireMaths::Histogram::*accumulate_function_type )( double,double ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Histogram::accumulate );
            
            Histogram_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("value"), bp::arg("weight") ) );
        
        }
        { //::SireMaths::Histogram::accumulate
        
            typedef void ( ::SireMaths::Histogram::*accumulate_function_type )( ::SireMaths::Histogram const & ) ;
            accumulate_function_type accumulate_function_value( &::SireMaths::Histogram::accumulate );
            
            Histogram_exposer.def( 
                "accumulate"
                , accumulate_function_value
                , ( bp::arg("other") ) );
        
        }
        { //::SireMaths::Histogram::at
        
            typedef double ( ::SireMaths::Histogram::*at_function_type )( int ) const;
            at_function_type at_function_value( &::SireMaths::Histogram::at );
            
            Histogram_exposer.def( 
                "at"
                , at_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireMaths::Histogram::bins
        
            typedef ::SireMaths::HistogramRange const & ( ::SireMaths::Histogram::*bins_function_type )(  ) const;
            bins_function_type bins_function_value( &::SireMaths::Histogram::bins );
            
            Histogram_exposer.def( 
                "bins"
                , bins_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMaths::Histogram::hashCode
        
            typedef ::uint ( ::SireMaths::Histogram::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireMaths::Histogram::hashCode );
            
            Histogram_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        Histogram_exposer.def( bp::self != bp::self );
        { //::SireMaths::Histogram::operator=
        
            typedef ::SireMaths::Histogram & ( ::SireMaths::Histogram::*assign_function_type )( ::SireMaths::Histogram const & ) ;
            assign_function_type assign_function_value( &::SireMaths::Histogram::operator= );
            
            Histogram_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Histogram_exposer.def( bp::self == bp::self );
        { //::SireMaths::Histogram::operator[]
        
            typedef double ( ::SireMaths::Histogram::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMaths::Histogram::operator[] );
            
            Histogram_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireMaths::Histogram::range
        
            typedef ::SireMaths::HistogramRange const & ( ::SireMaths::Histogram::*range_function_type )(  ) const;
            range_function_type range_function_value( &::SireMaths::Histogram::range );
            
            Histogram_exposer.def( 
                "range"
                , range_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMaths::Histogram::stream
        
            typedef void ( ::SireMaths::Histogram::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireMaths::Histogram::stream );
            
            Histogram_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireMaths::Histogram::toString
        
            typedef ::QString ( ::SireMaths::Histogram::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::Histogram::toString );
            
            Histogram_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMaths::Histogram::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMaths::Histogram::typeName );
            
            Histogram_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Histogram_exposer.staticmethod( "typeName" );
        Histogram_exposer.def( "__copy__", &__copy__);
        Histogram_exposer.def( "__deepcopy__", &__copy__);
        Histogram_exposer.def( "clone", &__copy__);
        Histogram_exposer.def( "__str__", &__str__< ::SireMaths::Histogram > );
        Histogram_exposer.def( "__repr__", &__str__< ::SireMaths::Histogram > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "IndexBase.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "index.h"

#include "index.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_IndexBase_class(){

    { //::SireID::IndexBase
        typedef bp::class_< SireID::IndexBase, bp::bases< SireID::ID, Siren::Object >, boost::noncopyable > IndexBase_exposer_t;
        IndexBase_exposer_t IndexBase_exposer = IndexBase_exposer_t( "IndexBase", bp::no_init );
        bp::scope IndexBase_scope( IndexBase_exposer );
        { //::SireID::IndexBase::hashCode
        
            typedef ::uint ( ::SireID::IndexBase::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireID::IndexBase::hashCode );
            
            IndexBase_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireID::IndexBase::isNull
        
            typedef bool ( ::SireID::IndexBase::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireID::IndexBase::isNull );
            
            IndexBase_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireID::IndexBase::map
        
            typedef ::qint32 ( ::SireID::IndexBase::*map_function_type )( ::qint32 ) const;
            map_function_type map_function_value( &::SireID::IndexBase::map );
            
            IndexBase_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("n") ) );
        
        }
        { //::SireID::IndexBase::null
        
            typedef ::qint32 ( *null_function_type )(  );
            null_function_type null_function_value( &::SireID::IndexBase::null );
            
            IndexBase_exposer.def( 
                "null"
                , null_function_value );
        
        }
        { //::SireID::IndexBase::stream
        
            typedef void ( ::SireID::IndexBase::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireID::IndexBase::stream );
            
            IndexBase_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireID::IndexBase::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireID::IndexBase::typeName );
            
            IndexBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireID::IndexBase::value
        
            typedef ::qint32 ( ::SireID::IndexBase::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireID::IndexBase::value );
            
            IndexBase_exposer.def( 
                "value"
                , value_function_value );
        
        }
        IndexBase_exposer.staticmethod( "null" );
        IndexBase_exposer.staticmethod( "typeName" );
        IndexBase_exposer.def( "__str__", &__str__< ::SireID::IndexBase > );
        IndexBase_exposer.def( "__repr__", &__str__< ::SireID::IndexBase > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Name.pypp.hpp"

namespace bp = boost::python;

#include "name.h"

#include "name.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_Name_class(){

    { //::SireID::Name
        typedef bp::class_< SireID::Name, bp::bases< SireID::ID, Siren::Object >, boost::noncopyable > Name_exposer_t;
        Name_exposer_t Name_exposer = Name_exposer_t( "Name", bp::no_init );
        bp::scope Name_scope( Name_exposer );
        { //::SireID::Name::hashCode
        
            typedef ::uint ( ::SireID::Name::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireID::Name::hashCode );
            
            Name_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireID::Name::isCaseSensitive
        
            typedef bool ( ::SireID::Name::*isCaseSensitive_function_type )(  ) const;
            isCaseSensitive_function_type isCaseSensitive_function_value( &::SireID::Name::isCaseSensitive );
            
            Name_exposer.def( 
                "isCaseSensitive"
                , isCaseSensitive_function_value );
        
        }
        { //::SireID::Name::isEmpty
        
            typedef bool ( ::SireID::Name::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireID::Name::isEmpty );
            
            Name_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::SireID::Name::isNull
        
            typedef bool ( ::SireID::Name::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireID::Name::isNull );
            
            Name_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireID::Name::stream
        
            typedef void ( ::SireID::Name::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireID::Name::stream );
            
            Name_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireID::Name::value
        
            typedef ::QString const & ( ::SireID::Name::*value_function_type )(  ) const;
            value_function_type value_function_value( &::SireID::Name::value );
            
            Name_exposer.def( 
                "value"
                , value_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        Name_exposer.def( "__str__", &__str__< ::SireID::Name > );
        Name_exposer.def( "__repr__", &__str__< ::SireID::Name > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "ID.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "id.h"

#include "name.h"

#include "number.h"

#include "id.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_ID_class(){

    { //::SireID::ID
        typedef bp::class_< SireID::ID, bp::bases< Siren::Object >, boost::noncopyable > ID_exposer_t;
        ID_exposer_t ID_exposer = ID_exposer_t( "ID", bp::no_init );
        bp::scope ID_scope( ID_exposer );
        { //::SireID::ID::isNull
        
            typedef bool ( ::SireID::ID::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::SireID::ID::isNull );
            
            ID_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::SireID::ID::stream
        
            typedef void ( ::SireID::ID::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireID::ID::stream );
            
            ID_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireID::ID::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireID::ID::typeName );
            
            ID_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        ID_exposer.staticmethod( "typeName" );
        ID_exposer.def( "__str__", &__str__< ::SireID::ID > );
        ID_exposer.def( "__repr__", &__str__< ::SireID::ID > );
    }

}

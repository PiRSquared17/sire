// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PasswordLock.pypp.hpp"

namespace bp = boost::python;

#include "SireSec/errors.h"

#include "Siren/errors.h"

#include "Siren/mutex.h"

#include "Siren/stream.h"

#include "password.h"

#include <QDebug>

#include <QThreadStorage>

#include <QUuid>

#include <boost/bind.hpp>

#include <boost/noncopyable.hpp>

#include "password.h"

#include "Siren/logger.h"

SireSec::PasswordLock __copy__(const SireSec::PasswordLock &other){ return SireSec::PasswordLock(other); }

#include "Siren/str.hpp"

void register_PasswordLock_class(){

    { //::SireSec::PasswordLock
        typedef bp::class_< SireSec::PasswordLock, bp::bases< SireSec::Lock, Siren::Object > > PasswordLock_exposer_t;
        PasswordLock_exposer_t PasswordLock_exposer = PasswordLock_exposer_t( "PasswordLock" );
        bp::scope PasswordLock_scope( PasswordLock_exposer );
        PasswordLock_exposer.def( bp::init< >() );
        PasswordLock_exposer.def( bp::init< SireSec::Key const & >(( bp::arg("key") )) );
        PasswordLock_exposer.def( bp::init< SireSec::Password const & >(( bp::arg("password") )) );
        PasswordLock_exposer.def( bp::init< SireSec::PasswordLock const & >(( bp::arg("other") )) );
        { //::SireSec::PasswordLock::hashCode
        
            typedef ::uint ( ::SireSec::PasswordLock::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireSec::PasswordLock::hashCode );
            
            PasswordLock_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        PasswordLock_exposer.def( bp::self != bp::self );
        { //::SireSec::PasswordLock::operator=
        
            typedef ::SireSec::PasswordLock & ( ::SireSec::PasswordLock::*assign_function_type )( ::SireSec::PasswordLock const & ) ;
            assign_function_type assign_function_value( &::SireSec::PasswordLock::operator= );
            
            PasswordLock_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PasswordLock_exposer.def( bp::self == bp::self );
        { //::SireSec::PasswordLock::stream
        
            typedef void ( ::SireSec::PasswordLock::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::PasswordLock::stream );
            
            PasswordLock_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::PasswordLock::toString
        
            typedef ::QString ( ::SireSec::PasswordLock::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSec::PasswordLock::toString );
            
            PasswordLock_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        PasswordLock_exposer.def( "__copy__", &__copy__);
        PasswordLock_exposer.def( "__deepcopy__", &__copy__);
        PasswordLock_exposer.def( "clone", &__copy__);
        PasswordLock_exposer.def( "__str__", &__str__< ::SireSec::PasswordLock > );
        PasswordLock_exposer.def( "__repr__", &__str__< ::SireSec::PasswordLock > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SignatureLock.pypp.hpp"

namespace bp = boost::python;

#include "SireSec/errors.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "privatekey.h"

#include "publickey.h"

#include "signaturelock.h"

#include <QDebug>

#include <boost/bind.hpp>

#include "signaturelock.h"

#include "Siren/logger.h"

SireSec::SignatureLock __copy__(const SireSec::SignatureLock &other){ return SireSec::SignatureLock(other); }

#include "Siren/str.hpp"

void register_SignatureLock_class(){

    { //::SireSec::SignatureLock
        typedef bp::class_< SireSec::SignatureLock, bp::bases< SireSec::Lock, Siren::Object > > SignatureLock_exposer_t;
        SignatureLock_exposer_t SignatureLock_exposer = SignatureLock_exposer_t( "SignatureLock" );
        bp::scope SignatureLock_scope( SignatureLock_exposer );
        SignatureLock_exposer.def( bp::init< >() );
        SignatureLock_exposer.def( bp::init< SireSec::PublicKey const &, bp::optional< SireSec::MACTypes::MACType > >(( bp::arg("public_key"), bp::arg("mactype")=::SireSec::MACTypes::DEFAULT )) );
        SignatureLock_exposer.def( bp::init< SireSec::PublicKey const &, SireSec::PrivateKey const &, bp::optional< SireSec::MACTypes::MACType > >(( bp::arg("public_key"), bp::arg("private_key"), bp::arg("mactype")=::SireSec::MACTypes::DEFAULT )) );
        SignatureLock_exposer.def( bp::init< SireSec::SignatureLock const & >(( bp::arg("other") )) );
        { //::SireSec::SignatureLock::hasPrivateKey
        
            typedef bool ( ::SireSec::SignatureLock::*hasPrivateKey_function_type )(  ) const;
            hasPrivateKey_function_type hasPrivateKey_function_value( &::SireSec::SignatureLock::hasPrivateKey );
            
            SignatureLock_exposer.def( 
                "hasPrivateKey"
                , hasPrivateKey_function_value );
        
        }
        { //::SireSec::SignatureLock::hasPublicKey
        
            typedef bool ( ::SireSec::SignatureLock::*hasPublicKey_function_type )(  ) const;
            hasPublicKey_function_type hasPublicKey_function_value( &::SireSec::SignatureLock::hasPublicKey );
            
            SignatureLock_exposer.def( 
                "hasPublicKey"
                , hasPublicKey_function_value );
        
        }
        { //::SireSec::SignatureLock::hashCode
        
            typedef ::uint ( ::SireSec::SignatureLock::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireSec::SignatureLock::hashCode );
            
            SignatureLock_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireSec::SignatureLock::macType
        
            typedef ::SireSec::MACTypes::MACType ( ::SireSec::SignatureLock::*macType_function_type )(  ) const;
            macType_function_type macType_function_value( &::SireSec::SignatureLock::macType );
            
            SignatureLock_exposer.def( 
                "macType"
                , macType_function_value );
        
        }
        SignatureLock_exposer.def( bp::self != bp::self );
        { //::SireSec::SignatureLock::operator=
        
            typedef ::SireSec::SignatureLock & ( ::SireSec::SignatureLock::*assign_function_type )( ::SireSec::SignatureLock const & ) ;
            assign_function_type assign_function_value( &::SireSec::SignatureLock::operator= );
            
            SignatureLock_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SignatureLock_exposer.def( bp::self == bp::self );
        { //::SireSec::SignatureLock::sign
        
            typedef void ( ::SireSec::SignatureLock::*sign_function_type )( ::QDataStream &,::QDataStream & ) const;
            sign_function_type sign_function_value( &::SireSec::SignatureLock::sign );
            
            SignatureLock_exposer.def( 
                "sign"
                , sign_function_value
                , ( bp::arg("in_stream"), bp::arg("out_stream") ) );
        
        }
        { //::SireSec::SignatureLock::sign
        
            typedef ::QByteArray ( ::SireSec::SignatureLock::*sign_function_type )( ::QByteArray const & ) const;
            sign_function_type sign_function_value( &::SireSec::SignatureLock::sign );
            
            SignatureLock_exposer.def( 
                "sign"
                , sign_function_value
                , ( bp::arg("data") ) );
        
        }
        { //::SireSec::SignatureLock::signString
        
            typedef ::QByteArray ( ::SireSec::SignatureLock::*signString_function_type )( ::QString const & ) const;
            signString_function_type signString_function_value( &::SireSec::SignatureLock::signString );
            
            SignatureLock_exposer.def( 
                "signString"
                , signString_function_value
                , ( bp::arg("string") ) );
        
        }
        { //::SireSec::SignatureLock::stream
        
            typedef void ( ::SireSec::SignatureLock::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::SignatureLock::stream );
            
            SignatureLock_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::SignatureLock::toString
        
            typedef ::QString ( ::SireSec::SignatureLock::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSec::SignatureLock::toString );
            
            SignatureLock_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireSec::SignatureLock::verify
        
            typedef void ( ::SireSec::SignatureLock::*verify_function_type )( ::QDataStream &,::QDataStream & ) const;
            verify_function_type verify_function_value( &::SireSec::SignatureLock::verify );
            
            SignatureLock_exposer.def( 
                "verify"
                , verify_function_value
                , ( bp::arg("in_stream"), bp::arg("out_stream") ) );
        
        }
        { //::SireSec::SignatureLock::verify
        
            typedef ::QByteArray ( ::SireSec::SignatureLock::*verify_function_type )( ::QByteArray const & ) const;
            verify_function_type verify_function_value( &::SireSec::SignatureLock::verify );
            
            SignatureLock_exposer.def( 
                "verify"
                , verify_function_value
                , ( bp::arg("data") ) );
        
        }
        { //::SireSec::SignatureLock::verifyString
        
            typedef ::QString ( ::SireSec::SignatureLock::*verifyString_function_type )( ::QByteArray const & ) const;
            verifyString_function_type verifyString_function_value( &::SireSec::SignatureLock::verifyString );
            
            SignatureLock_exposer.def( 
                "verifyString"
                , verifyString_function_value
                , ( bp::arg("string") ) );
        
        }
        SignatureLock_exposer.def( "__copy__", &__copy__);
        SignatureLock_exposer.def( "__deepcopy__", &__copy__);
        SignatureLock_exposer.def( "clone", &__copy__);
        SignatureLock_exposer.def( "__str__", &__str__< ::SireSec::SignatureLock > );
        SignatureLock_exposer.def( "__repr__", &__str__< ::SireSec::SignatureLock > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PublicKey.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "privatekey.h"

#include "publickey.h"

#include "publickey.h"

#include "Siren/logger.h"

SireSec::PublicKey __copy__(const SireSec::PublicKey &other){ return SireSec::PublicKey(other); }

#include "Siren/str.hpp"

void register_PublicKey_class(){

    { //::SireSec::PublicKey
        typedef bp::class_< SireSec::PublicKey, bp::bases< SireSec::Key, Siren::Object > > PublicKey_exposer_t;
        PublicKey_exposer_t PublicKey_exposer = PublicKey_exposer_t( "PublicKey" );
        bp::scope PublicKey_scope( PublicKey_exposer );
        PublicKey_exposer.def( bp::init< >() );
        PublicKey_exposer.def( bp::init< SireSec::PublicKey const & >(( bp::arg("other") )) );
        { //::SireSec::PublicKey::availableToThisThread
        
            typedef bool ( ::SireSec::PublicKey::*availableToThisThread_function_type )(  ) const;
            availableToThisThread_function_type availableToThisThread_function_value( &::SireSec::PublicKey::availableToThisThread );
            
            PublicKey_exposer.def( 
                "availableToThisThread"
                , availableToThisThread_function_value );
        
        }
        { //::SireSec::PublicKey::hashCode
        
            typedef ::uint ( ::SireSec::PublicKey::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireSec::PublicKey::hashCode );
            
            PublicKey_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireSec::PublicKey::isValid
        
            typedef bool ( ::SireSec::PublicKey::*isValid_function_type )(  ) const;
            isValid_function_type isValid_function_value( &::SireSec::PublicKey::isValid );
            
            PublicKey_exposer.def( 
                "isValid"
                , isValid_function_value );
        
        }
        PublicKey_exposer.def( bp::self != bp::self );
        { //::SireSec::PublicKey::operator=
        
            typedef ::SireSec::PublicKey & ( ::SireSec::PublicKey::*assign_function_type )( ::SireSec::PublicKey const & ) ;
            assign_function_type assign_function_value( &::SireSec::PublicKey::operator= );
            
            PublicKey_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PublicKey_exposer.def( bp::self == bp::self );
        { //::SireSec::PublicKey::stream
        
            typedef void ( ::SireSec::PublicKey::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::PublicKey::stream );
            
            PublicKey_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::PublicKey::toString
        
            typedef ::QString ( ::SireSec::PublicKey::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSec::PublicKey::toString );
            
            PublicKey_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        PublicKey_exposer.def( "__copy__", &__copy__);
        PublicKey_exposer.def( "__deepcopy__", &__copy__);
        PublicKey_exposer.def( "clone", &__copy__);
        PublicKey_exposer.def( "__str__", &__str__< ::SireSec::PublicKey > );
        PublicKey_exposer.def( "__repr__", &__str__< ::SireSec::PublicKey > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PubPriLock.pypp.hpp"

namespace bp = boost::python;

#include "Siren/stream.h"

#include "privatekey.h"

#include "publickey.h"

#include "pubprilock.h"

#include "pubprilock.h"

#include "Siren/logger.h"

SireSec::PubPriLock __copy__(const SireSec::PubPriLock &other){ return SireSec::PubPriLock(other); }

#include "Siren/str.hpp"

void register_PubPriLock_class(){

    { //::SireSec::PubPriLock
        typedef bp::class_< SireSec::PubPriLock, bp::bases< SireSec::Lock, Siren::Object > > PubPriLock_exposer_t;
        PubPriLock_exposer_t PubPriLock_exposer = PubPriLock_exposer_t( "PubPriLock" );
        bp::scope PubPriLock_scope( PubPriLock_exposer );
        PubPriLock_exposer.def( bp::init< >() );
        PubPriLock_exposer.def( bp::init< SireSec::PublicKey const &, bp::optional< SireSec::Ciphers::Cipher > >(( bp::arg("public_key"), bp::arg("cipher")=::SireSec::Ciphers::DEFAULT )) );
        PubPriLock_exposer.def( bp::init< SireSec::PublicKey const &, SireSec::PrivateKey const &, bp::optional< SireSec::Ciphers::Cipher > >(( bp::arg("public_key"), bp::arg("private_key"), bp::arg("cipher")=::SireSec::Ciphers::DEFAULT )) );
        PubPriLock_exposer.def( bp::init< SireSec::PubPriLock const & >(( bp::arg("other") )) );
        { //::SireSec::PubPriLock::cipher
        
            typedef ::SireSec::Ciphers::Cipher ( ::SireSec::PubPriLock::*cipher_function_type )(  ) const;
            cipher_function_type cipher_function_value( &::SireSec::PubPriLock::cipher );
            
            PubPriLock_exposer.def( 
                "cipher"
                , cipher_function_value );
        
        }
        { //::SireSec::PubPriLock::hasPrivateKey
        
            typedef bool ( ::SireSec::PubPriLock::*hasPrivateKey_function_type )(  ) const;
            hasPrivateKey_function_type hasPrivateKey_function_value( &::SireSec::PubPriLock::hasPrivateKey );
            
            PubPriLock_exposer.def( 
                "hasPrivateKey"
                , hasPrivateKey_function_value );
        
        }
        { //::SireSec::PubPriLock::hasPublicKey
        
            typedef bool ( ::SireSec::PubPriLock::*hasPublicKey_function_type )(  ) const;
            hasPublicKey_function_type hasPublicKey_function_value( &::SireSec::PubPriLock::hasPublicKey );
            
            PubPriLock_exposer.def( 
                "hasPublicKey"
                , hasPublicKey_function_value );
        
        }
        { //::SireSec::PubPriLock::hashCode
        
            typedef ::uint ( ::SireSec::PubPriLock::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireSec::PubPriLock::hashCode );
            
            PubPriLock_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        PubPriLock_exposer.def( bp::self != bp::self );
        { //::SireSec::PubPriLock::operator=
        
            typedef ::SireSec::PubPriLock & ( ::SireSec::PubPriLock::*assign_function_type )( ::SireSec::PubPriLock const & ) ;
            assign_function_type assign_function_value( &::SireSec::PubPriLock::operator= );
            
            PubPriLock_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PubPriLock_exposer.def( bp::self == bp::self );
        { //::SireSec::PubPriLock::stream
        
            typedef void ( ::SireSec::PubPriLock::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::PubPriLock::stream );
            
            PubPriLock_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::PubPriLock::toString
        
            typedef ::QString ( ::SireSec::PubPriLock::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSec::PubPriLock::toString );
            
            PubPriLock_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        PubPriLock_exposer.def( "__copy__", &__copy__);
        PubPriLock_exposer.def( "__deepcopy__", &__copy__);
        PubPriLock_exposer.def( "clone", &__copy__);
        PubPriLock_exposer.def( "__str__", &__str__< ::SireSec::PubPriLock > );
        PubPriLock_exposer.def( "__repr__", &__str__< ::SireSec::PubPriLock > );
    }

}

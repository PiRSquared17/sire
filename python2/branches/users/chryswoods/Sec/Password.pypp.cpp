// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Password.pypp.hpp"

namespace bp = boost::python;

#include "SireSec/errors.h"

#include "Siren/errors.h"

#include "Siren/mutex.h"

#include "Siren/stream.h"

#include "password.h"

#include <QThreadStorage>

#include <QUuid>

#include <boost/bind.hpp>

#include <boost/noncopyable.hpp>

#include "password.h"

#include "Siren/logger.h"

SireSec::Password __copy__(const SireSec::Password &other){ return SireSec::Password(other); }

#include "Siren/str.hpp"

void register_Password_class(){

    { //::SireSec::Password
        typedef bp::class_< SireSec::Password, bp::bases< SireSec::Key, Siren::Object > > Password_exposer_t;
        Password_exposer_t Password_exposer = Password_exposer_t( "Password" );
        bp::scope Password_scope( Password_exposer );
        Password_exposer.def( bp::init< >() );
        Password_exposer.def( bp::init< QString const & >(( bp::arg("password") )) );
        Password_exposer.def( bp::init< QString const &, QFlags< SireSec::Key::Option > const & >(( bp::arg("password"), bp::arg("key_options") )) );
        Password_exposer.def( bp::init< QString const &, QDateTime const & >(( bp::arg("password"), bp::arg("expiry_date") )) );
        Password_exposer.def( bp::init< QString const &, QFlags< SireSec::Key::Option > const &, QDateTime const & >(( bp::arg("password"), bp::arg("key_options"), bp::arg("expiry_date") )) );
        Password_exposer.def( bp::init< QString const &, QDateTime const &, QFlags< SireSec::Key::Option > const & >(( bp::arg("password"), bp::arg("expiry_date"), bp::arg("key_options") )) );
        Password_exposer.def( bp::init< SireSec::Password const & >(( bp::arg("other") )) );
        { //::SireSec::Password::availableToThisThread
        
            typedef bool ( ::SireSec::Password::*availableToThisThread_function_type )(  ) const;
            availableToThisThread_function_type availableToThisThread_function_value( &::SireSec::Password::availableToThisThread );
            
            Password_exposer.def( 
                "availableToThisThread"
                , availableToThisThread_function_value );
        
        }
        { //::SireSec::Password::hashCode
        
            typedef ::uint ( ::SireSec::Password::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireSec::Password::hashCode );
            
            Password_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        Password_exposer.def( bp::self != bp::self );
        { //::SireSec::Password::operator=
        
            typedef ::SireSec::Password & ( ::SireSec::Password::*assign_function_type )( ::SireSec::Password const & ) ;
            assign_function_type assign_function_value( &::SireSec::Password::operator= );
            
            Password_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Password_exposer.def( bp::self == bp::self );
        { //::SireSec::Password::stream
        
            typedef void ( ::SireSec::Password::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::Password::stream );
            
            Password_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::Password::toString
        
            typedef ::QString ( ::SireSec::Password::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSec::Password::toString );
            
            Password_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        Password_exposer.def( "__copy__", &__copy__);
        Password_exposer.def( "__deepcopy__", &__copy__);
        Password_exposer.def( "clone", &__copy__);
        Password_exposer.def( "__str__", &__str__< ::SireSec::Password > );
        Password_exposer.def( "__repr__", &__str__< ::SireSec::Password > );
    }

}

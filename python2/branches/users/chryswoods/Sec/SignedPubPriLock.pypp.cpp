// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "SignedPubPriLock.pypp.hpp"

namespace bp = boost::python;

#include "SireSec/errors.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "signedpubprilock.h"

#include <QDebug>

#include "signedpubprilock.h"

#include "Siren/logger.h"

SireSec::SignedPubPriLock __copy__(const SireSec::SignedPubPriLock &other){ return SireSec::SignedPubPriLock(other); }

#include "Siren/str.hpp"

void register_SignedPubPriLock_class(){

    { //::SireSec::SignedPubPriLock
        typedef bp::class_< SireSec::SignedPubPriLock, bp::bases< SireSec::Lock, Siren::Object > > SignedPubPriLock_exposer_t;
        SignedPubPriLock_exposer_t SignedPubPriLock_exposer = SignedPubPriLock_exposer_t( "SignedPubPriLock" );
        bp::scope SignedPubPriLock_scope( SignedPubPriLock_exposer );
        SignedPubPriLock_exposer.def( bp::init< >() );
        SignedPubPriLock_exposer.def( bp::init< SireSec::PublicKey const &, SireSec::PrivateKey const &, bp::optional< SireSec::Ciphers::Cipher, SireSec::MACTypes::MACType > >(( bp::arg("encryption_public_key"), bp::arg("signing_private_key"), bp::arg("cipher")=::SireSec::Ciphers::DEFAULT, bp::arg("mactype")=::SireSec::MACTypes::DEFAULT )) );
        SignedPubPriLock_exposer.def( bp::init< SireSec::PublicKey const &, SireSec::PrivateKey const &, SireSec::PrivateKey const &, SireSec::PublicKey const &, bp::optional< SireSec::Ciphers::Cipher, SireSec::MACTypes::MACType > >(( bp::arg("encryption_public_key"), bp::arg("signing_private_key"), bp::arg("encryption_private_key"), bp::arg("signing_public_key"), bp::arg("cipher")=::SireSec::Ciphers::DEFAULT, bp::arg("mactype")=::SireSec::MACTypes::DEFAULT )) );
        SignedPubPriLock_exposer.def( bp::init< SireSec::SignedPubPriLock const & >(( bp::arg("other") )) );
        { //::SireSec::SignedPubPriLock::canDecrypt
        
            typedef bool ( ::SireSec::SignedPubPriLock::*canDecrypt_function_type )(  ) const;
            canDecrypt_function_type canDecrypt_function_value( &::SireSec::SignedPubPriLock::canDecrypt );
            
            SignedPubPriLock_exposer.def( 
                "canDecrypt"
                , canDecrypt_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::canEncrypt
        
            typedef bool ( ::SireSec::SignedPubPriLock::*canEncrypt_function_type )(  ) const;
            canEncrypt_function_type canEncrypt_function_value( &::SireSec::SignedPubPriLock::canEncrypt );
            
            SignedPubPriLock_exposer.def( 
                "canEncrypt"
                , canEncrypt_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::cipher
        
            typedef ::SireSec::Ciphers::Cipher ( ::SireSec::SignedPubPriLock::*cipher_function_type )(  ) const;
            cipher_function_type cipher_function_value( &::SireSec::SignedPubPriLock::cipher );
            
            SignedPubPriLock_exposer.def( 
                "cipher"
                , cipher_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::hasEncryptionPrivateKey
        
            typedef bool ( ::SireSec::SignedPubPriLock::*hasEncryptionPrivateKey_function_type )(  ) const;
            hasEncryptionPrivateKey_function_type hasEncryptionPrivateKey_function_value( &::SireSec::SignedPubPriLock::hasEncryptionPrivateKey );
            
            SignedPubPriLock_exposer.def( 
                "hasEncryptionPrivateKey"
                , hasEncryptionPrivateKey_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::hasEncryptionPublicKey
        
            typedef bool ( ::SireSec::SignedPubPriLock::*hasEncryptionPublicKey_function_type )(  ) const;
            hasEncryptionPublicKey_function_type hasEncryptionPublicKey_function_value( &::SireSec::SignedPubPriLock::hasEncryptionPublicKey );
            
            SignedPubPriLock_exposer.def( 
                "hasEncryptionPublicKey"
                , hasEncryptionPublicKey_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::hasSigningPrivateKey
        
            typedef bool ( ::SireSec::SignedPubPriLock::*hasSigningPrivateKey_function_type )(  ) const;
            hasSigningPrivateKey_function_type hasSigningPrivateKey_function_value( &::SireSec::SignedPubPriLock::hasSigningPrivateKey );
            
            SignedPubPriLock_exposer.def( 
                "hasSigningPrivateKey"
                , hasSigningPrivateKey_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::hasSigningPublicKey
        
            typedef bool ( ::SireSec::SignedPubPriLock::*hasSigningPublicKey_function_type )(  ) const;
            hasSigningPublicKey_function_type hasSigningPublicKey_function_value( &::SireSec::SignedPubPriLock::hasSigningPublicKey );
            
            SignedPubPriLock_exposer.def( 
                "hasSigningPublicKey"
                , hasSigningPublicKey_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::hashCode
        
            typedef ::uint ( ::SireSec::SignedPubPriLock::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::SireSec::SignedPubPriLock::hashCode );
            
            SignedPubPriLock_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::SireSec::SignedPubPriLock::macType
        
            typedef ::SireSec::MACTypes::MACType ( ::SireSec::SignedPubPriLock::*macType_function_type )(  ) const;
            macType_function_type macType_function_value( &::SireSec::SignedPubPriLock::macType );
            
            SignedPubPriLock_exposer.def( 
                "macType"
                , macType_function_value );
        
        }
        SignedPubPriLock_exposer.def( bp::self != bp::self );
        { //::SireSec::SignedPubPriLock::operator=
        
            typedef ::SireSec::SignedPubPriLock & ( ::SireSec::SignedPubPriLock::*assign_function_type )( ::SireSec::SignedPubPriLock const & ) ;
            assign_function_type assign_function_value( &::SireSec::SignedPubPriLock::operator= );
            
            SignedPubPriLock_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        SignedPubPriLock_exposer.def( bp::self == bp::self );
        { //::SireSec::SignedPubPriLock::stream
        
            typedef void ( ::SireSec::SignedPubPriLock::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::SignedPubPriLock::stream );
            
            SignedPubPriLock_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::SignedPubPriLock::toString
        
            typedef ::QString ( ::SireSec::SignedPubPriLock::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireSec::SignedPubPriLock::toString );
            
            SignedPubPriLock_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        SignedPubPriLock_exposer.def( "__copy__", &__copy__);
        SignedPubPriLock_exposer.def( "__deepcopy__", &__copy__);
        SignedPubPriLock_exposer.def( "clone", &__copy__);
        SignedPubPriLock_exposer.def( "__str__", &__str__< ::SireSec::SignedPubPriLock > );
        SignedPubPriLock_exposer.def( "__repr__", &__str__< ::SireSec::SignedPubPriLock > );
    }

}

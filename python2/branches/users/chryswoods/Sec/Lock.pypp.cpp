// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Lock.pypp.hpp"

namespace bp = boost::python;

#include "SireSec/errors.h"

#include "Siren/errors.h"

#include "Siren/stream.h"

#include "lock.h"

#include <QDebug>

#include "lock.h"

#include "Siren/logger.h"

#include "Siren/str.hpp"

void register_Lock_class(){

    { //::SireSec::Lock
        typedef bp::class_< SireSec::Lock, bp::bases< Siren::Object >, boost::noncopyable > Lock_exposer_t;
        Lock_exposer_t Lock_exposer = Lock_exposer_t( "Lock", bp::no_init );
        bp::scope Lock_scope( Lock_exposer );
        { //::SireSec::Lock::activate
        
            typedef ::SireSec::LockPtr ( ::SireSec::Lock::*activate_function_type )( ::SireSec::Key const & ) const;
            activate_function_type activate_function_value( &::SireSec::Lock::activate );
            
            Lock_exposer.def( 
                "activate"
                , activate_function_value
                , ( bp::arg("key") ) );
        
        }
        { //::SireSec::Lock::deactivate
        
            typedef ::SireSec::LockPtr ( ::SireSec::Lock::*deactivate_function_type )(  ) const;
            deactivate_function_type deactivate_function_value( &::SireSec::Lock::deactivate );
            
            Lock_exposer.def( 
                "deactivate"
                , deactivate_function_value );
        
        }
        { //::SireSec::Lock::decrypt
        
            typedef void ( ::SireSec::Lock::*decrypt_function_type )( ::QDataStream &,::QDataStream & ) const;
            decrypt_function_type decrypt_function_value( &::SireSec::Lock::decrypt );
            
            Lock_exposer.def( 
                "decrypt"
                , decrypt_function_value
                , ( bp::arg("in_stream"), bp::arg("out_stream") ) );
        
        }
        { //::SireSec::Lock::decrypt
        
            typedef ::QByteArray ( ::SireSec::Lock::*decrypt_function_type )( ::QByteArray const & ) const;
            decrypt_function_type decrypt_function_value( &::SireSec::Lock::decrypt );
            
            Lock_exposer.def( 
                "decrypt"
                , decrypt_function_value
                , ( bp::arg("data") ) );
        
        }
        { //::SireSec::Lock::decryptString
        
            typedef ::QString ( ::SireSec::Lock::*decryptString_function_type )( ::QByteArray const & ) const;
            decryptString_function_type decryptString_function_value( &::SireSec::Lock::decryptString );
            
            Lock_exposer.def( 
                "decryptString"
                , decryptString_function_value
                , ( bp::arg("string") ) );
        
        }
        { //::SireSec::Lock::encrypt
        
            typedef void ( ::SireSec::Lock::*encrypt_function_type )( ::QDataStream &,::QDataStream & ) const;
            encrypt_function_type encrypt_function_value( &::SireSec::Lock::encrypt );
            
            Lock_exposer.def( 
                "encrypt"
                , encrypt_function_value
                , ( bp::arg("in_stream"), bp::arg("out_stream") ) );
        
        }
        { //::SireSec::Lock::encrypt
        
            typedef ::QByteArray ( ::SireSec::Lock::*encrypt_function_type )( ::QByteArray const & ) const;
            encrypt_function_type encrypt_function_value( &::SireSec::Lock::encrypt );
            
            Lock_exposer.def( 
                "encrypt"
                , encrypt_function_value
                , ( bp::arg("data") ) );
        
        }
        { //::SireSec::Lock::encryptString
        
            typedef ::QByteArray ( ::SireSec::Lock::*encryptString_function_type )( ::QString const & ) const;
            encryptString_function_type encryptString_function_value( &::SireSec::Lock::encryptString );
            
            Lock_exposer.def( 
                "encryptString"
                , encryptString_function_value
                , ( bp::arg("string") ) );
        
        }
        { //::SireSec::Lock::hasKey
        
            typedef bool ( ::SireSec::Lock::*hasKey_function_type )(  ) const;
            hasKey_function_type hasKey_function_value( &::SireSec::Lock::hasKey );
            
            Lock_exposer.def( 
                "hasKey"
                , hasKey_function_value );
        
        }
        { //::SireSec::Lock::stream
        
            typedef void ( ::SireSec::Lock::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::SireSec::Lock::stream );
            
            Lock_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::SireSec::Lock::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSec::Lock::typeName );
            
            Lock_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Lock_exposer.staticmethod( "typeName" );
        Lock_exposer.def( "__str__", &__str__< ::SireSec::Lock > );
        Lock_exposer.def( "__repr__", &__str__< ::SireSec::Lock > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "RDFMonitor.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/pairmatrix.hpp"

#include "SireMaths/constants.h"

#include "SireMol/atom.h"

#include "SireMol/selector.hpp"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/space.h"

#include "rdfmonitor.h"

#include "system.h"

#include "rdfmonitor.h"

SireSystem::RDFMonitor __copy__(const SireSystem::RDFMonitor &other){ return SireSystem::RDFMonitor(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_RDFMonitor_class(){

    { //::SireSystem::RDFMonitor
        typedef bp::class_< SireSystem::RDFMonitor, bp::bases< SireSystem::SystemMonitor, SireBase::Property > > RDFMonitor_exposer_t;
        RDFMonitor_exposer_t RDFMonitor_exposer = RDFMonitor_exposer_t( "RDFMonitor" );
        bp::scope RDFMonitor_scope( RDFMonitor_exposer );
        RDFMonitor_exposer.def( bp::init< >() );
        RDFMonitor_exposer.def( bp::init< SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, bp::optional< int > >(( bp::arg("min"), bp::arg("max"), bp::arg("nbins")=(int)(100) )) );
        RDFMonitor_exposer.def( bp::init< SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const & >(( bp::arg("min"), bp::arg("max"), bp::arg("binwidth") )) );
        RDFMonitor_exposer.def( bp::init< SireMaths::HistogramRangeT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & >(( bp::arg("range") )) );
        RDFMonitor_exposer.def( bp::init< SireSystem::RDFMonitor const & >(( bp::arg("other") )) );
        { //::SireSystem::RDFMonitor::add
        
            typedef void ( ::SireSystem::RDFMonitor::*add_function_type )( ::SireMol::AtomID const & ) ;
            add_function_type add_function_value( &::SireSystem::RDFMonitor::add );
            
            RDFMonitor_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("atom") ) );
        
        }
        { //::SireSystem::RDFMonitor::add
        
            typedef void ( ::SireSystem::RDFMonitor::*add_function_type )( ::SireMol::AtomID const &,::SireMol::AtomID const & ) ;
            add_function_type add_function_value( &::SireSystem::RDFMonitor::add );
            
            RDFMonitor_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("atom0"), bp::arg("atom1") ) );
        
        }
        { //::SireSystem::RDFMonitor::add
        
            typedef void ( ::SireSystem::RDFMonitor::*add_function_type )( ::boost::tuples::tuple< SireMol::AtomIdentifier, SireMol::AtomIdentifier, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > const & ) ;
            add_function_type add_function_value( &::SireSystem::RDFMonitor::add );
            
            RDFMonitor_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("atompair") ) );
        
        }
        { //::SireSystem::RDFMonitor::atomPairs
        
            typedef ::QList< boost::tuples::tuple< SireMol::AtomIdentifier, SireMol::AtomIdentifier, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > > const & ( ::SireSystem::RDFMonitor::*atomPairs_function_type )(  ) const;
            atomPairs_function_type atomPairs_function_value( &::SireSystem::RDFMonitor::atomPairs );
            
            RDFMonitor_exposer.def( 
                "atomPairs"
                , atomPairs_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::RDFMonitor::binWidth
        
            typedef ::SireUnits::Dimension::Length ( ::SireSystem::RDFMonitor::*binWidth_function_type )(  ) const;
            binWidth_function_type binWidth_function_value( &::SireSystem::RDFMonitor::binWidth );
            
            RDFMonitor_exposer.def( 
                "binWidth"
                , binWidth_function_value );
        
        }
        { //::SireSystem::RDFMonitor::clearStatistics
        
            typedef void ( ::SireSystem::RDFMonitor::*clearStatistics_function_type )(  ) ;
            clearStatistics_function_type clearStatistics_function_value( &::SireSystem::RDFMonitor::clearStatistics );
            
            RDFMonitor_exposer.def( 
                "clearStatistics"
                , clearStatistics_function_value );
        
        }
        { //::SireSystem::RDFMonitor::coordsProperty
        
            typedef ::SireBase::PropertyName const & ( ::SireSystem::RDFMonitor::*coordsProperty_function_type )(  ) const;
            coordsProperty_function_type coordsProperty_function_value( &::SireSystem::RDFMonitor::coordsProperty );
            
            RDFMonitor_exposer.def( 
                "coordsProperty"
                , coordsProperty_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::RDFMonitor::count
        
            typedef int ( ::SireSystem::RDFMonitor::*count_function_type )(  ) const;
            count_function_type count_function_value( &::SireSystem::RDFMonitor::count );
            
            RDFMonitor_exposer.def( 
                "count"
                , count_function_value );
        
        }
        { //::SireSystem::RDFMonitor::maximum
        
            typedef ::SireUnits::Dimension::Length ( ::SireSystem::RDFMonitor::*maximum_function_type )(  ) const;
            maximum_function_type maximum_function_value( &::SireSystem::RDFMonitor::maximum );
            
            RDFMonitor_exposer.def( 
                "maximum"
                , maximum_function_value );
        
        }
        { //::SireSystem::RDFMonitor::middle
        
            typedef ::SireUnits::Dimension::Length ( ::SireSystem::RDFMonitor::*middle_function_type )(  ) const;
            middle_function_type middle_function_value( &::SireSystem::RDFMonitor::middle );
            
            RDFMonitor_exposer.def( 
                "middle"
                , middle_function_value );
        
        }
        { //::SireSystem::RDFMonitor::minimum
        
            typedef ::SireUnits::Dimension::Length ( ::SireSystem::RDFMonitor::*minimum_function_type )(  ) const;
            minimum_function_type minimum_function_value( &::SireSystem::RDFMonitor::minimum );
            
            RDFMonitor_exposer.def( 
                "minimum"
                , minimum_function_value );
        
        }
        { //::SireSystem::RDFMonitor::monitor
        
            typedef void ( ::SireSystem::RDFMonitor::*monitor_function_type )( ::SireSystem::System & ) ;
            monitor_function_type monitor_function_value( &::SireSystem::RDFMonitor::monitor );
            
            RDFMonitor_exposer.def( 
                "monitor"
                , monitor_function_value
                , ( bp::arg("system") ) );
        
        }
        { //::SireSystem::RDFMonitor::nBins
        
            typedef int ( ::SireSystem::RDFMonitor::*nBins_function_type )(  ) const;
            nBins_function_type nBins_function_value( &::SireSystem::RDFMonitor::nBins );
            
            RDFMonitor_exposer.def( 
                "nBins"
                , nBins_function_value );
        
        }
        RDFMonitor_exposer.def( bp::self != bp::self );
        { //::SireSystem::RDFMonitor::operator=
        
            typedef ::SireSystem::RDFMonitor & ( ::SireSystem::RDFMonitor::*assign_function_type )( ::SireSystem::RDFMonitor const & ) ;
            assign_function_type assign_function_value( &::SireSystem::RDFMonitor::operator= );
            
            RDFMonitor_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RDFMonitor_exposer.def( bp::self == bp::self );
        { //::SireSystem::RDFMonitor::operator[]
        
            typedef ::SireMaths::HistogramValueT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > ( ::SireSystem::RDFMonitor::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireSystem::RDFMonitor::operator[] );
            
            RDFMonitor_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireSystem::RDFMonitor::rdf
        
            typedef ::SireSystem::RDF const & ( ::SireSystem::RDFMonitor::*rdf_function_type )(  ) const;
            rdf_function_type rdf_function_value( &::SireSystem::RDFMonitor::rdf );
            
            RDFMonitor_exposer.def( 
                "rdf"
                , rdf_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireSystem::RDFMonitor::setCoordsProperty
        
            typedef void ( ::SireSystem::RDFMonitor::*setCoordsProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setCoordsProperty_function_type setCoordsProperty_function_value( &::SireSystem::RDFMonitor::setCoordsProperty );
            
            RDFMonitor_exposer.def( 
                "setCoordsProperty"
                , setCoordsProperty_function_value
                , ( bp::arg("coords_property") ) );
        
        }
        { //::SireSystem::RDFMonitor::setRange
        
            typedef void ( ::SireSystem::RDFMonitor::*setRange_function_type )( ::SireUnits::Dimension::Length const &,::SireUnits::Dimension::Length const &,int ) ;
            setRange_function_type setRange_function_value( &::SireSystem::RDFMonitor::setRange );
            
            RDFMonitor_exposer.def( 
                "setRange"
                , setRange_function_value
                , ( bp::arg("min"), bp::arg("max"), bp::arg("nbins") ) );
        
        }
        { //::SireSystem::RDFMonitor::setRange
        
            typedef void ( ::SireSystem::RDFMonitor::*setRange_function_type )( ::SireUnits::Dimension::Length const &,::SireUnits::Dimension::Length const &,::SireUnits::Dimension::Length const & ) ;
            setRange_function_type setRange_function_value( &::SireSystem::RDFMonitor::setRange );
            
            RDFMonitor_exposer.def( 
                "setRange"
                , setRange_function_value
                , ( bp::arg("min"), bp::arg("max"), bp::arg("binwidth") ) );
        
        }
        { //::SireSystem::RDFMonitor::setRange
        
            typedef void ( ::SireSystem::RDFMonitor::*setRange_function_type )( ::SireMaths::HistogramRangeT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & ) ;
            setRange_function_type setRange_function_value( &::SireSystem::RDFMonitor::setRange );
            
            RDFMonitor_exposer.def( 
                "setRange"
                , setRange_function_value
                , ( bp::arg("range") ) );
        
        }
        { //::SireSystem::RDFMonitor::setSkipIntramolecularPairs
        
            typedef void ( ::SireSystem::RDFMonitor::*setSkipIntramolecularPairs_function_type )( bool ) ;
            setSkipIntramolecularPairs_function_type setSkipIntramolecularPairs_function_value( &::SireSystem::RDFMonitor::setSkipIntramolecularPairs );
            
            RDFMonitor_exposer.def( 
                "setSkipIntramolecularPairs"
                , setSkipIntramolecularPairs_function_value
                , ( bp::arg("skip") ) );
        
        }
        { //::SireSystem::RDFMonitor::setSpaceProperty
        
            typedef void ( ::SireSystem::RDFMonitor::*setSpaceProperty_function_type )( ::SireBase::PropertyName const & ) ;
            setSpaceProperty_function_type setSpaceProperty_function_value( &::SireSystem::RDFMonitor::setSpaceProperty );
            
            RDFMonitor_exposer.def( 
                "setSpaceProperty"
                , setSpaceProperty_function_value
                , ( bp::arg("space_property") ) );
        
        }
        { //::SireSystem::RDFMonitor::skipIntramolecularPairs
        
            typedef bool ( ::SireSystem::RDFMonitor::*skipIntramolecularPairs_function_type )(  ) const;
            skipIntramolecularPairs_function_type skipIntramolecularPairs_function_value( &::SireSystem::RDFMonitor::skipIntramolecularPairs );
            
            RDFMonitor_exposer.def( 
                "skipIntramolecularPairs"
                , skipIntramolecularPairs_function_value );
        
        }
        { //::SireSystem::RDFMonitor::spaceProperty
        
            typedef ::SireBase::PropertyName const & ( ::SireSystem::RDFMonitor::*spaceProperty_function_type )(  ) const;
            spaceProperty_function_type spaceProperty_function_value( &::SireSystem::RDFMonitor::spaceProperty );
            
            RDFMonitor_exposer.def( 
                "spaceProperty"
                , spaceProperty_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireSystem::RDFMonitor::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireSystem::RDFMonitor::typeName );
            
            RDFMonitor_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        RDFMonitor_exposer.staticmethod( "typeName" );
        RDFMonitor_exposer.def( "__copy__", &__copy__);
        RDFMonitor_exposer.def( "__deepcopy__", &__copy__);
        RDFMonitor_exposer.def( "clone", &__copy__);
        RDFMonitor_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireSystem::RDFMonitor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RDFMonitor_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireSystem::RDFMonitor >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RDFMonitor_exposer.def( "__str__", &__str__< ::SireSystem::RDFMonitor > );
        RDFMonitor_exposer.def( "__repr__", &__str__< ::SireSystem::RDFMonitor > );
    }

}

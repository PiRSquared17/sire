// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NullCommand.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "command.h"

#include "renderview.h"

#include "command.h"

Spier::NullCommand __copy__(const Spier::NullCommand &other){ return Spier::NullCommand(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_NullCommand_class(){

    { //::Spier::NullCommand
        typedef bp::class_< Spier::NullCommand, bp::bases< Spier::Command, SireBase::Property > > NullCommand_exposer_t;
        NullCommand_exposer_t NullCommand_exposer = NullCommand_exposer_t( "NullCommand", bp::init< >() );
        bp::scope NullCommand_scope( NullCommand_exposer );
        NullCommand_exposer.def( bp::init< Spier::NullCommand const & >(( bp::arg("other") )) );
        { //::Spier::NullCommand::mergeWith
        
            typedef ::Spier::CommandPtr ( ::Spier::NullCommand::*mergeWith_function_type )( ::Spier::Command const & ) const;
            mergeWith_function_type mergeWith_function_value( &::Spier::NullCommand::mergeWith );
            
            NullCommand_exposer.def( 
                "mergeWith"
                , mergeWith_function_value
                , ( bp::arg("other") ) );
        
        }
        NullCommand_exposer.def( bp::self != bp::self );
        { //::Spier::NullCommand::operator=
        
            typedef ::Spier::NullCommand & ( ::Spier::NullCommand::*assign_function_type )( ::Spier::NullCommand const & ) ;
            assign_function_type assign_function_value( &::Spier::NullCommand::operator= );
            
            NullCommand_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        NullCommand_exposer.def( bp::self == bp::self );
        { //::Spier::NullCommand::redo
        
            typedef void ( ::Spier::NullCommand::*redo_function_type )(  ) const;
            redo_function_type redo_function_value( &::Spier::NullCommand::redo );
            
            NullCommand_exposer.def( 
                "redo"
                , redo_function_value );
        
        }
        { //::Spier::NullCommand::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::NullCommand::typeName );
            
            NullCommand_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Spier::NullCommand::undo
        
            typedef void ( ::Spier::NullCommand::*undo_function_type )(  ) const;
            undo_function_type undo_function_value( &::Spier::NullCommand::undo );
            
            NullCommand_exposer.def( 
                "undo"
                , undo_function_value );
        
        }
        NullCommand_exposer.staticmethod( "typeName" );
        NullCommand_exposer.def( "__copy__", &__copy__);
        NullCommand_exposer.def( "__deepcopy__", &__copy__);
        NullCommand_exposer.def( "clone", &__copy__);
        NullCommand_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::NullCommand >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullCommand_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::NullCommand >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullCommand_exposer.def( "__str__", &__str__< ::Spier::NullCommand > );
        NullCommand_exposer.def( "__repr__", &__str__< ::Spier::NullCommand > );
    }

}

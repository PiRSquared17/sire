// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NullGLRenderFunction.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "glrenderfunction.h"

#include "glrenderfunction.h"

Spier::NullGLRenderFunction __copy__(const Spier::NullGLRenderFunction &other){ return Spier::NullGLRenderFunction(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_NullGLRenderFunction_class(){

    { //::Spier::NullGLRenderFunction
        typedef bp::class_< Spier::NullGLRenderFunction, bp::bases< Spier::GLRenderFunction, SireBase::Property > > NullGLRenderFunction_exposer_t;
        NullGLRenderFunction_exposer_t NullGLRenderFunction_exposer = NullGLRenderFunction_exposer_t( "NullGLRenderFunction", bp::init< >() );
        bp::scope NullGLRenderFunction_scope( NullGLRenderFunction_exposer );
        NullGLRenderFunction_exposer.def( bp::init< Spier::NullGLRenderFunction const & >(( bp::arg("other") )) );
        NullGLRenderFunction_exposer.def( bp::self != bp::self );
        { //::Spier::NullGLRenderFunction::operator()
        
            typedef void ( ::Spier::NullGLRenderFunction::*__call___function_type )(  ) const;
            __call___function_type __call___function_value( &::Spier::NullGLRenderFunction::operator() );
            
            NullGLRenderFunction_exposer.def( 
                "__call__"
                , __call___function_value );
        
        }
        { //::Spier::NullGLRenderFunction::operator=
        
            typedef ::Spier::NullGLRenderFunction & ( ::Spier::NullGLRenderFunction::*assign_function_type )( ::Spier::NullGLRenderFunction const & ) ;
            assign_function_type assign_function_value( &::Spier::NullGLRenderFunction::operator= );
            
            NullGLRenderFunction_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        NullGLRenderFunction_exposer.def( bp::self == bp::self );
        { //::Spier::NullGLRenderFunction::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::NullGLRenderFunction::typeName );
            
            NullGLRenderFunction_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        NullGLRenderFunction_exposer.staticmethod( "typeName" );
        NullGLRenderFunction_exposer.def( "__copy__", &__copy__);
        NullGLRenderFunction_exposer.def( "__deepcopy__", &__copy__);
        NullGLRenderFunction_exposer.def( "clone", &__copy__);
        NullGLRenderFunction_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::NullGLRenderFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullGLRenderFunction_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::NullGLRenderFunction >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullGLRenderFunction_exposer.def( "__str__", &__str__< ::Spier::NullGLRenderFunction > );
        NullGLRenderFunction_exposer.def( "__repr__", &__str__< ::Spier::NullGLRenderFunction > );
    }

}

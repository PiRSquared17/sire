// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "GLDisplayList.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "gldisplaylist.h"

#include "glrendercontext.h"

#include <QDebug>

#include "gldisplaylist.h"

Spier::GLDisplayList __copy__(const Spier::GLDisplayList &other){ return Spier::GLDisplayList(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const Spier::GLDisplayList&){ return "Spier::GLDisplayList";}

void register_GLDisplayList_class(){

    { //::Spier::GLDisplayList
        typedef bp::class_< Spier::GLDisplayList > GLDisplayList_exposer_t;
        GLDisplayList_exposer_t GLDisplayList_exposer = GLDisplayList_exposer_t( "GLDisplayList" );
        bp::scope GLDisplayList_scope( GLDisplayList_exposer );
        GLDisplayList_exposer.def( bp::init< >() );
        GLDisplayList_exposer.def( bp::init< Spier::GLRenderFunction const & >(( bp::arg("renderfunc") )) );
        GLDisplayList_exposer.def( bp::init< Spier::GLDisplayList const & >(( bp::arg("other") )) );
        { //::Spier::GLDisplayList::isEmpty
        
            typedef bool ( ::Spier::GLDisplayList::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::Spier::GLDisplayList::isEmpty );
            
            GLDisplayList_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        GLDisplayList_exposer.def( bp::self != bp::self );
        { //::Spier::GLDisplayList::operator=
        
            typedef ::Spier::GLDisplayList & ( ::Spier::GLDisplayList::*assign_function_type )( ::Spier::GLDisplayList const & ) ;
            assign_function_type assign_function_value( &::Spier::GLDisplayList::operator= );
            
            GLDisplayList_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        GLDisplayList_exposer.def( bp::self == bp::self );
        { //::Spier::GLDisplayList::render
        
            typedef void ( ::Spier::GLDisplayList::*render_function_type )( ::Spier::GLRenderContext & ) const;
            render_function_type render_function_value( &::Spier::GLDisplayList::render );
            
            GLDisplayList_exposer.def( 
                "render"
                , render_function_value
                , ( bp::arg("render_contex") ) );
        
        }
        { //::Spier::GLDisplayList::renderFunction
        
            typedef ::Spier::GLRenderFunction const & ( ::Spier::GLDisplayList::*renderFunction_function_type )(  ) const;
            renderFunction_function_type renderFunction_function_value( &::Spier::GLDisplayList::renderFunction );
            
            GLDisplayList_exposer.def( 
                "renderFunction"
                , renderFunction_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::Spier::GLDisplayList::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::GLDisplayList::typeName );
            
            GLDisplayList_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Spier::GLDisplayList::what
        
            typedef char const * ( ::Spier::GLDisplayList::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Spier::GLDisplayList::what );
            
            GLDisplayList_exposer.def( 
                "what"
                , what_function_value );
        
        }
        GLDisplayList_exposer.staticmethod( "typeName" );
        GLDisplayList_exposer.def( "__copy__", &__copy__);
        GLDisplayList_exposer.def( "__deepcopy__", &__copy__);
        GLDisplayList_exposer.def( "clone", &__copy__);
        GLDisplayList_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::GLDisplayList >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLDisplayList_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::GLDisplayList >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLDisplayList_exposer.def( "__str__", &pvt_get_name);
        GLDisplayList_exposer.def( "__repr__", &pvt_get_name);
    }

}

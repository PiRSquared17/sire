// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "TranslateCamera.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "camera.h"

#include "cameracommand.h"

#include "renderview.h"

#include "cameracommand.h"

Spier::TranslateCamera __copy__(const Spier::TranslateCamera &other){ return Spier::TranslateCamera(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_TranslateCamera_class(){

    { //::Spier::TranslateCamera
        typedef bp::class_< Spier::TranslateCamera, bp::bases< Spier::CameraCommand, Spier::RenderViewCommand, Spier::Command, SireBase::Property > > TranslateCamera_exposer_t;
        TranslateCamera_exposer_t TranslateCamera_exposer = TranslateCamera_exposer_t( "TranslateCamera" );
        bp::scope TranslateCamera_scope( TranslateCamera_exposer );
        TranslateCamera_exposer.def( bp::init< >() );
        TranslateCamera_exposer.def( bp::init< SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const &, SireUnits::Dimension::Length const & >(( bp::arg("translate_x"), bp::arg("translate_y"), bp::arg("translate_z") )) );
        TranslateCamera_exposer.def( bp::init< Spier::TranslateCamera const & >(( bp::arg("other") )) );
        { //::Spier::TranslateCamera::mergeWith
        
            typedef ::Spier::CommandPtr ( ::Spier::TranslateCamera::*mergeWith_function_type )( ::Spier::Command const & ) const;
            mergeWith_function_type mergeWith_function_value( &::Spier::TranslateCamera::mergeWith );
            
            TranslateCamera_exposer.def( 
                "mergeWith"
                , mergeWith_function_value
                , ( bp::arg("other") ) );
        
        }
        TranslateCamera_exposer.def( bp::self != bp::self );
        { //::Spier::TranslateCamera::operator=
        
            typedef ::Spier::TranslateCamera & ( ::Spier::TranslateCamera::*assign_function_type )( ::Spier::TranslateCamera const & ) ;
            assign_function_type assign_function_value( &::Spier::TranslateCamera::operator= );
            
            TranslateCamera_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        TranslateCamera_exposer.def( bp::self == bp::self );
        { //::Spier::TranslateCamera::redo
        
            typedef void ( ::Spier::TranslateCamera::*redo_function_type )(  ) const;
            redo_function_type redo_function_value( &::Spier::TranslateCamera::redo );
            
            TranslateCamera_exposer.def( 
                "redo"
                , redo_function_value );
        
        }
        { //::Spier::TranslateCamera::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::TranslateCamera::typeName );
            
            TranslateCamera_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Spier::TranslateCamera::undo
        
            typedef void ( ::Spier::TranslateCamera::*undo_function_type )(  ) const;
            undo_function_type undo_function_value( &::Spier::TranslateCamera::undo );
            
            TranslateCamera_exposer.def( 
                "undo"
                , undo_function_value );
        
        }
        TranslateCamera_exposer.staticmethod( "typeName" );
        TranslateCamera_exposer.def( "__copy__", &__copy__);
        TranslateCamera_exposer.def( "__deepcopy__", &__copy__);
        TranslateCamera_exposer.def( "clone", &__copy__);
        TranslateCamera_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::TranslateCamera >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TranslateCamera_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::TranslateCamera >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TranslateCamera_exposer.def( "__str__", &__str__< ::Spier::TranslateCamera > );
        TranslateCamera_exposer.def( "__repr__", &__str__< ::Spier::TranslateCamera > );
    }

}

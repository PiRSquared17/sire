// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NullCamera.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "camera.h"

#include <QGLWidget>

#include "camera.h"

Spier::NullCamera __copy__(const Spier::NullCamera &other){ return Spier::NullCamera(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_NullCamera_class(){

    { //::Spier::NullCamera
        typedef bp::class_< Spier::NullCamera, bp::bases< Spier::Camera, SireBase::Property > > NullCamera_exposer_t;
        NullCamera_exposer_t NullCamera_exposer = NullCamera_exposer_t( "NullCamera", bp::init< >() );
        bp::scope NullCamera_scope( NullCamera_exposer );
        NullCamera_exposer.def( bp::init< Spier::NullCamera const & >(( bp::arg("other") )) );
        { //::Spier::NullCamera::lookAt
        
            typedef void ( ::Spier::NullCamera::*lookAt_function_type )( ::SireMaths::Vector const & ) ;
            lookAt_function_type lookAt_function_value( &::Spier::NullCamera::lookAt );
            
            NullCamera_exposer.def( 
                "lookAt"
                , lookAt_function_value
                , ( bp::arg("lookat") ) );
        
        }
        NullCamera_exposer.def( bp::self != bp::self );
        { //::Spier::NullCamera::operator=
        
            typedef ::Spier::NullCamera & ( ::Spier::NullCamera::*assign_function_type )( ::Spier::NullCamera const & ) ;
            assign_function_type assign_function_value( &::Spier::NullCamera::operator= );
            
            NullCamera_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        NullCamera_exposer.def( bp::self == bp::self );
        { //::Spier::NullCamera::reset
        
            typedef void ( ::Spier::NullCamera::*reset_function_type )(  ) ;
            reset_function_type reset_function_value( &::Spier::NullCamera::reset );
            
            NullCamera_exposer.def( 
                "reset"
                , reset_function_value );
        
        }
        { //::Spier::NullCamera::rotate
        
            typedef void ( ::Spier::NullCamera::*rotate_function_type )( ::SireUnits::Dimension::Angle const &,::SireUnits::Dimension::Angle const & ) ;
            rotate_function_type rotate_function_value( &::Spier::NullCamera::rotate );
            
            NullCamera_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::Spier::NullCamera::spin
        
            typedef void ( ::Spier::NullCamera::*spin_function_type )( ::SireUnits::Dimension::Angle const & ) ;
            spin_function_type spin_function_value( &::Spier::NullCamera::spin );
            
            NullCamera_exposer.def( 
                "spin"
                , spin_function_value
                , ( bp::arg("delta") ) );
        
        }
        { //::Spier::NullCamera::translate
        
            typedef void ( ::Spier::NullCamera::*translate_function_type )( double,double ) ;
            translate_function_type translate_function_value( &::Spier::NullCamera::translate );
            
            NullCamera_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::Spier::NullCamera::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::NullCamera::typeName );
            
            NullCamera_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Spier::NullCamera::zoom
        
            typedef void ( ::Spier::NullCamera::*zoom_function_type )( double ) ;
            zoom_function_type zoom_function_value( &::Spier::NullCamera::zoom );
            
            NullCamera_exposer.def( 
                "zoom"
                , zoom_function_value
                , ( bp::arg("delta") ) );
        
        }
        NullCamera_exposer.staticmethod( "typeName" );
        NullCamera_exposer.def( "__copy__", &__copy__);
        NullCamera_exposer.def( "__deepcopy__", &__copy__);
        NullCamera_exposer.def( "clone", &__copy__);
        NullCamera_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::NullCamera >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullCamera_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::NullCamera >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        NullCamera_exposer.def( "__str__", &__str__< ::Spier::NullCamera > );
        NullCamera_exposer.def( "__repr__", &__str__< ::Spier::NullCamera > );
    }

}

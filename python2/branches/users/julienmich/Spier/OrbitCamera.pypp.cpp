// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "OrbitCamera.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "camera.h"

#include <QGLWidget>

#include "camera.h"

Spier::OrbitCamera __copy__(const Spier::OrbitCamera &other){ return Spier::OrbitCamera(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_OrbitCamera_class(){

    { //::Spier::OrbitCamera
        typedef bp::class_< Spier::OrbitCamera, bp::bases< Spier::Camera, SireBase::Property > > OrbitCamera_exposer_t;
        OrbitCamera_exposer_t OrbitCamera_exposer = OrbitCamera_exposer_t( "OrbitCamera" );
        bp::scope OrbitCamera_scope( OrbitCamera_exposer );
        OrbitCamera_exposer.def( bp::init< >() );
        OrbitCamera_exposer.def( bp::init< SireMaths::Vector const & >(( bp::arg("lookat") )) );
        OrbitCamera_exposer.def( bp::init< Spier::OrbitCamera const & >(( bp::arg("other") )) );
        { //::Spier::OrbitCamera::lookAt
        
            typedef void ( ::Spier::OrbitCamera::*lookAt_function_type )( ::SireMaths::Vector const & ) ;
            lookAt_function_type lookAt_function_value( &::Spier::OrbitCamera::lookAt );
            
            OrbitCamera_exposer.def( 
                "lookAt"
                , lookAt_function_value
                , ( bp::arg("lookat") ) );
        
        }
        OrbitCamera_exposer.def( bp::self != bp::self );
        { //::Spier::OrbitCamera::operator=
        
            typedef ::Spier::OrbitCamera & ( ::Spier::OrbitCamera::*assign_function_type )( ::Spier::OrbitCamera const & ) ;
            assign_function_type assign_function_value( &::Spier::OrbitCamera::operator= );
            
            OrbitCamera_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        OrbitCamera_exposer.def( bp::self == bp::self );
        { //::Spier::OrbitCamera::reset
        
            typedef void ( ::Spier::OrbitCamera::*reset_function_type )(  ) ;
            reset_function_type reset_function_value( &::Spier::OrbitCamera::reset );
            
            OrbitCamera_exposer.def( 
                "reset"
                , reset_function_value );
        
        }
        { //::Spier::OrbitCamera::rotate
        
            typedef void ( ::Spier::OrbitCamera::*rotate_function_type )( ::SireUnits::Dimension::Angle const &,::SireUnits::Dimension::Angle const & ) ;
            rotate_function_type rotate_function_value( &::Spier::OrbitCamera::rotate );
            
            OrbitCamera_exposer.def( 
                "rotate"
                , rotate_function_value
                , ( bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::Spier::OrbitCamera::spin
        
            typedef void ( ::Spier::OrbitCamera::*spin_function_type )( ::SireUnits::Dimension::Angle const & ) ;
            spin_function_type spin_function_value( &::Spier::OrbitCamera::spin );
            
            OrbitCamera_exposer.def( 
                "spin"
                , spin_function_value
                , ( bp::arg("delta") ) );
        
        }
        { //::Spier::OrbitCamera::translate
        
            typedef void ( ::Spier::OrbitCamera::*translate_function_type )( double,double ) ;
            translate_function_type translate_function_value( &::Spier::OrbitCamera::translate );
            
            OrbitCamera_exposer.def( 
                "translate"
                , translate_function_value
                , ( bp::arg("dx"), bp::arg("dy") ) );
        
        }
        { //::Spier::OrbitCamera::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::OrbitCamera::typeName );
            
            OrbitCamera_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Spier::OrbitCamera::zoom
        
            typedef void ( ::Spier::OrbitCamera::*zoom_function_type )( double ) ;
            zoom_function_type zoom_function_value( &::Spier::OrbitCamera::zoom );
            
            OrbitCamera_exposer.def( 
                "zoom"
                , zoom_function_value
                , ( bp::arg("delta") ) );
        
        }
        OrbitCamera_exposer.staticmethod( "typeName" );
        OrbitCamera_exposer.def( "__copy__", &__copy__);
        OrbitCamera_exposer.def( "__deepcopy__", &__copy__);
        OrbitCamera_exposer.def( "clone", &__copy__);
        OrbitCamera_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::OrbitCamera >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        OrbitCamera_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::OrbitCamera >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        OrbitCamera_exposer.def( "__str__", &__str__< ::Spier::OrbitCamera > );
        OrbitCamera_exposer.def( "__repr__", &__str__< ::Spier::OrbitCamera > );
    }

}

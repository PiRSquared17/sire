// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "CameraCommand.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireUnits/units.h"

#include "camera.h"

#include "cameracommand.h"

#include "renderview.h"

#include "cameracommand.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_CameraCommand_class(){

    { //::Spier::CameraCommand
        typedef bp::class_< Spier::CameraCommand, bp::bases< Spier::RenderViewCommand, Spier::Command, SireBase::Property >, boost::noncopyable > CameraCommand_exposer_t;
        CameraCommand_exposer_t CameraCommand_exposer = CameraCommand_exposer_t( "CameraCommand", bp::no_init );
        bp::scope CameraCommand_scope( CameraCommand_exposer );
        { //::Spier::CameraCommand::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::CameraCommand::typeName );
            
            CameraCommand_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        CameraCommand_exposer.staticmethod( "typeName" );
        CameraCommand_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::CameraCommand >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CameraCommand_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::CameraCommand >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        CameraCommand_exposer.def( "__str__", &__str__< ::Spier::CameraCommand > );
        CameraCommand_exposer.def( "__repr__", &__str__< ::Spier::CameraCommand > );
    }

}

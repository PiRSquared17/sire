// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GradientBackground.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "glbackground.h"

#include <QGLWidget>

#include "glbackground.h"

Spier::GradientBackground __copy__(const Spier::GradientBackground &other){ return Spier::GradientBackground(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GradientBackground_class(){

    { //::Spier::GradientBackground
        typedef bp::class_< Spier::GradientBackground, bp::bases< Spier::GLBackground, Spier::GLRenderFunction, SireBase::Property > > GradientBackground_exposer_t;
        GradientBackground_exposer_t GradientBackground_exposer = GradientBackground_exposer_t( "GradientBackground" );
        bp::scope GradientBackground_scope( GradientBackground_exposer );
        GradientBackground_exposer.def( bp::init< >() );
        GradientBackground_exposer.def( bp::init< Spier::GradientBackground const & >(( bp::arg("other") )) );
        GradientBackground_exposer.def( bp::self != bp::self );
        { //::Spier::GradientBackground::operator()
        
            typedef void ( ::Spier::GradientBackground::*__call___function_type )(  ) const;
            __call___function_type __call___function_value( &::Spier::GradientBackground::operator() );
            
            GradientBackground_exposer.def( 
                "__call__"
                , __call___function_value );
        
        }
        { //::Spier::GradientBackground::operator=
        
            typedef ::Spier::GradientBackground & ( ::Spier::GradientBackground::*assign_function_type )( ::Spier::GradientBackground const & ) ;
            assign_function_type assign_function_value( &::Spier::GradientBackground::operator= );
            
            GradientBackground_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        GradientBackground_exposer.def( bp::self == bp::self );
        { //::Spier::GradientBackground::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::GradientBackground::typeName );
            
            GradientBackground_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        GradientBackground_exposer.staticmethod( "typeName" );
        GradientBackground_exposer.def( "__copy__", &__copy__);
        GradientBackground_exposer.def( "__deepcopy__", &__copy__);
        GradientBackground_exposer.def( "clone", &__copy__);
        GradientBackground_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::GradientBackground >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GradientBackground_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::GradientBackground >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GradientBackground_exposer.def( "__str__", &__str__< ::Spier::GradientBackground > );
        GradientBackground_exposer.def( "__repr__", &__str__< ::Spier::GradientBackground > );
    }

}

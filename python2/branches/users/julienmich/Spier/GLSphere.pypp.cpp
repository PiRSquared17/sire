// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "GLSphere.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "glrendercontext.h"

#include "glsphere.h"

#include <QGLWidget>

#include "glsphere.h"

Spier::GLSphere __copy__(const Spier::GLSphere &other){ return Spier::GLSphere(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_GLSphere_class(){

    { //::Spier::GLSphere
        typedef bp::class_< Spier::GLSphere, bp::bases< Spier::GLMesh, SireBase::Property > > GLSphere_exposer_t;
        GLSphere_exposer_t GLSphere_exposer = GLSphere_exposer_t( "GLSphere", bp::init< >() );
        bp::scope GLSphere_scope( GLSphere_exposer );
        GLSphere_exposer.def( bp::init< double >(( bp::arg("radius") )) );
        GLSphere_exposer.def( bp::init< double, int, int, int >(( bp::arg("radius"), bp::arg("hires"), bp::arg("midres"), bp::arg("lowres") )) );
        GLSphere_exposer.def( bp::init< Spier::GLSphere const & >(( bp::arg("other") )) );
        GLSphere_exposer.def( bp::self != bp::self );
        { //::Spier::GLSphere::operator=
        
            typedef ::Spier::GLSphere & ( ::Spier::GLSphere::*assign_function_type )( ::Spier::GLSphere const & ) ;
            assign_function_type assign_function_value( &::Spier::GLSphere::operator= );
            
            GLSphere_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        GLSphere_exposer.def( bp::self == bp::self );
        { //::Spier::GLSphere::radius
        
            typedef double ( ::Spier::GLSphere::*radius_function_type )(  ) const;
            radius_function_type radius_function_value( &::Spier::GLSphere::radius );
            
            GLSphere_exposer.def( 
                "radius"
                , radius_function_value );
        
        }
        { //::Spier::GLSphere::render
        
            typedef void ( ::Spier::GLSphere::*render_function_type )( ::Spier::GLRenderContext &,float ) const;
            render_function_type render_function_value( &::Spier::GLSphere::render );
            
            GLSphere_exposer.def( 
                "render"
                , render_function_value
                , ( bp::arg("render_context"), bp::arg("distance_from_camera") ) );
        
        }
        { //::Spier::GLSphere::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Spier::GLSphere::typeName );
            
            GLSphere_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        GLSphere_exposer.staticmethod( "typeName" );
        GLSphere_exposer.def( "__copy__", &__copy__);
        GLSphere_exposer.def( "__deepcopy__", &__copy__);
        GLSphere_exposer.def( "clone", &__copy__);
        GLSphere_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Spier::GLSphere >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLSphere_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Spier::GLSphere >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        GLSphere_exposer.def( "__str__", &__str__< ::Spier::GLSphere > );
        GLSphere_exposer.def( "__repr__", &__str__< ::Spier::GLSphere > );
    }

}

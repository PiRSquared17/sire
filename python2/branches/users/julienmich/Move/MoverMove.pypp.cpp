// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MoverMove.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/atomidx.h"

#include "SireMol/bondid.h"

#include "SireMol/connectivity.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/temperature.h"

#include "ensemble.h"

#include "movermove.h"

#include "zmatrix.h"

#include <QDebug>

#include <QTime>

#include "movermove.h"

SireMove::MoverMove __copy__(const SireMove::MoverMove &other){ return SireMove::MoverMove(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MoverMove_class(){

    { //::SireMove::MoverMove
        typedef bp::class_< SireMove::MoverMove, bp::bases< SireMove::MonteCarlo, SireMove::Move, SireBase::Property > > MoverMove_exposer_t;
        MoverMove_exposer_t MoverMove_exposer = MoverMove_exposer_t( "MoverMove" );
        bp::scope MoverMove_scope( MoverMove_exposer );
        MoverMove_exposer.def( bp::init< >() );
        MoverMove_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") )) );
        MoverMove_exposer.def( bp::init< SireMove::Sampler const & >(( bp::arg("sampler") )) );
        MoverMove_exposer.def( bp::init< SireMove::MoverMove const & >(( bp::arg("other") )) );
        { //::SireMove::MoverMove::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMove::MoverMove::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireMove::MoverMove::moleculeGroup );
            
            MoverMove_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::MoverMove::move
        
            typedef void ( ::SireMove::MoverMove::*move_function_type )( ::SireSystem::System &,int,bool ) ;
            move_function_type move_function_value( &::SireMove::MoverMove::move );
            
            MoverMove_exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("system"), bp::arg("nmoves"), bp::arg("record_stats")=(bool)(true) ) );
        
        }
        MoverMove_exposer.def( bp::self != bp::self );
        { //::SireMove::MoverMove::operator=
        
            typedef ::SireMove::MoverMove & ( ::SireMove::MoverMove::*assign_function_type )( ::SireMove::MoverMove const & ) ;
            assign_function_type assign_function_value( &::SireMove::MoverMove::operator= );
            
            MoverMove_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MoverMove_exposer.def( bp::self == bp::self );
        { //::SireMove::MoverMove::sampler
        
            typedef ::SireMove::Sampler const & ( ::SireMove::MoverMove::*sampler_function_type )(  ) const;
            sampler_function_type sampler_function_value( &::SireMove::MoverMove::sampler );
            
            MoverMove_exposer.def( 
                "sampler"
                , sampler_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::MoverMove::setGenerator
        
            typedef void ( ::SireMove::MoverMove::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::MoverMove::setGenerator );
            
            MoverMove_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("rangenerator") ) );
        
        }
        { //::SireMove::MoverMove::setSampler
        
            typedef void ( ::SireMove::MoverMove::*setSampler_function_type )( ::SireMove::Sampler const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::MoverMove::setSampler );
            
            MoverMove_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("sampler") ) );
        
        }
        { //::SireMove::MoverMove::setSampler
        
            typedef void ( ::SireMove::MoverMove::*setSampler_function_type )( ::SireMol::MoleculeGroup const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::MoverMove::setSampler );
            
            MoverMove_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMove::MoverMove::setSynchronisedAngles
        
            typedef void ( ::SireMove::MoverMove::*setSynchronisedAngles_function_type )( bool ) ;
            setSynchronisedAngles_function_type setSynchronisedAngles_function_value( &::SireMove::MoverMove::setSynchronisedAngles );
            
            MoverMove_exposer.def( 
                "setSynchronisedAngles"
                , setSynchronisedAngles_function_value
                , ( bp::arg("on") ) );
        
        }
        { //::SireMove::MoverMove::setSynchronisedBonds
        
            typedef void ( ::SireMove::MoverMove::*setSynchronisedBonds_function_type )( bool ) ;
            setSynchronisedBonds_function_type setSynchronisedBonds_function_value( &::SireMove::MoverMove::setSynchronisedBonds );
            
            MoverMove_exposer.def( 
                "setSynchronisedBonds"
                , setSynchronisedBonds_function_value
                , ( bp::arg("on") ) );
        
        }
        { //::SireMove::MoverMove::setSynchronisedDihedrals
        
            typedef void ( ::SireMove::MoverMove::*setSynchronisedDihedrals_function_type )( bool ) ;
            setSynchronisedDihedrals_function_type setSynchronisedDihedrals_function_value( &::SireMove::MoverMove::setSynchronisedDihedrals );
            
            MoverMove_exposer.def( 
                "setSynchronisedDihedrals"
                , setSynchronisedDihedrals_function_value
                , ( bp::arg("on") ) );
        
        }
        { //::SireMove::MoverMove::setSynchronisedMotion
        
            typedef void ( ::SireMove::MoverMove::*setSynchronisedMotion_function_type )( bool ) ;
            setSynchronisedMotion_function_type setSynchronisedMotion_function_value( &::SireMove::MoverMove::setSynchronisedMotion );
            
            MoverMove_exposer.def( 
                "setSynchronisedMotion"
                , setSynchronisedMotion_function_value
                , ( bp::arg("on") ) );
        
        }
        { //::SireMove::MoverMove::synchronisedAngles
        
            typedef bool ( ::SireMove::MoverMove::*synchronisedAngles_function_type )(  ) const;
            synchronisedAngles_function_type synchronisedAngles_function_value( &::SireMove::MoverMove::synchronisedAngles );
            
            MoverMove_exposer.def( 
                "synchronisedAngles"
                , synchronisedAngles_function_value );
        
        }
        { //::SireMove::MoverMove::synchronisedBonds
        
            typedef bool ( ::SireMove::MoverMove::*synchronisedBonds_function_type )(  ) const;
            synchronisedBonds_function_type synchronisedBonds_function_value( &::SireMove::MoverMove::synchronisedBonds );
            
            MoverMove_exposer.def( 
                "synchronisedBonds"
                , synchronisedBonds_function_value );
        
        }
        { //::SireMove::MoverMove::synchronisedDihedrals
        
            typedef bool ( ::SireMove::MoverMove::*synchronisedDihedrals_function_type )(  ) const;
            synchronisedDihedrals_function_type synchronisedDihedrals_function_value( &::SireMove::MoverMove::synchronisedDihedrals );
            
            MoverMove_exposer.def( 
                "synchronisedDihedrals"
                , synchronisedDihedrals_function_value );
        
        }
        { //::SireMove::MoverMove::synchronisedMotion
        
            typedef bool ( ::SireMove::MoverMove::*synchronisedMotion_function_type )(  ) const;
            synchronisedMotion_function_type synchronisedMotion_function_value( &::SireMove::MoverMove::synchronisedMotion );
            
            MoverMove_exposer.def( 
                "synchronisedMotion"
                , synchronisedMotion_function_value );
        
        }
        { //::SireMove::MoverMove::toString
        
            typedef ::QString ( ::SireMove::MoverMove::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::MoverMove::toString );
            
            MoverMove_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::MoverMove::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::MoverMove::typeName );
            
            MoverMove_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        MoverMove_exposer.staticmethod( "typeName" );
        MoverMove_exposer.def( "__copy__", &__copy__);
        MoverMove_exposer.def( "__deepcopy__", &__copy__);
        MoverMove_exposer.def( "clone", &__copy__);
        MoverMove_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::MoverMove >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoverMove_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::MoverMove >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoverMove_exposer.def( "__str__", &__str__< ::SireMove::MoverMove > );
        MoverMove_exposer.def( "__repr__", &__str__< ::SireMove::MoverMove > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "MoverMove.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/angleid.h"

#include "SireMol/atomidx.h"

#include "SireMol/bondid.h"

#include "SireMol/connectivity.h"

#include "SireMol/dihedralid.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/mover.hpp"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "ensemble.h"

#include "movermove.h"

#include <QDebug>

#include <QTime>

#include "movermove.h"

SireMove::MoverMove __copy__(const SireMove::MoverMove &other){ return SireMove::MoverMove(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_MoverMove_class(){

    { //::SireMove::MoverMove
        typedef bp::class_< SireMove::MoverMove, bp::bases< SireMove::MonteCarlo, SireMove::Move, SireBase::Property > > MoverMove_exposer_t;
        MoverMove_exposer_t MoverMove_exposer = MoverMove_exposer_t( "MoverMove" );
        bp::scope MoverMove_scope( MoverMove_exposer );
        MoverMove_exposer.def( bp::init< >() );
        MoverMove_exposer.def( bp::init< SireMol::MoleculeGroup const & >(( bp::arg("molgroup") )) );
        MoverMove_exposer.def( bp::init< SireMove::Sampler const & >(( bp::arg("sampler") )) );
        MoverMove_exposer.def( bp::init< SireMove::MoverMove const & >(( bp::arg("other") )) );
        { //::SireMove::MoverMove::getAngleDeltas
        
            typedef ::QHash< SireMove::DofID, SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 0, 0, 1 > > const & ( ::SireMove::MoverMove::*getAngleDeltas_function_type )(  ) ;
            getAngleDeltas_function_type getAngleDeltas_function_value( &::SireMove::MoverMove::getAngleDeltas );
            
            MoverMove_exposer.def( 
                "getAngleDeltas"
                , getAngleDeltas_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::MoverMove::getAngles
        
            typedef ::QList< SireMol::AngleID > const & ( ::SireMove::MoverMove::*getAngles_function_type )(  ) ;
            getAngles_function_type getAngles_function_value( &::SireMove::MoverMove::getAngles );
            
            MoverMove_exposer.def( 
                "getAngles"
                , getAngles_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::MoverMove::getBondDeltas
        
            typedef ::QHash< SireMove::DofID, SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & ( ::SireMove::MoverMove::*getBondDeltas_function_type )(  ) ;
            getBondDeltas_function_type getBondDeltas_function_value( &::SireMove::MoverMove::getBondDeltas );
            
            MoverMove_exposer.def( 
                "getBondDeltas"
                , getBondDeltas_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::MoverMove::getBonds
        
            typedef ::QList< SireMol::BondID > const & ( ::SireMove::MoverMove::*getBonds_function_type )(  ) ;
            getBonds_function_type getBonds_function_value( &::SireMove::MoverMove::getBonds );
            
            MoverMove_exposer.def( 
                "getBonds"
                , getBonds_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::MoverMove::getDihedrals
        
            typedef ::QList< SireMol::DihedralID > const & ( ::SireMove::MoverMove::*getDihedrals_function_type )(  ) ;
            getDihedrals_function_type getDihedrals_function_value( &::SireMove::MoverMove::getDihedrals );
            
            MoverMove_exposer.def( 
                "getDihedrals"
                , getDihedrals_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::SireMove::MoverMove::moleculeGroup
        
            typedef ::SireMol::MoleculeGroup const & ( ::SireMove::MoverMove::*moleculeGroup_function_type )(  ) const;
            moleculeGroup_function_type moleculeGroup_function_value( &::SireMove::MoverMove::moleculeGroup );
            
            MoverMove_exposer.def( 
                "moleculeGroup"
                , moleculeGroup_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::MoverMove::move
        
            typedef void ( ::SireMove::MoverMove::*move_function_type )( ::SireSystem::System &,int,bool ) ;
            move_function_type move_function_value( &::SireMove::MoverMove::move );
            
            MoverMove_exposer.def( 
                "move"
                , move_function_value
                , ( bp::arg("system"), bp::arg("nmoves"), bp::arg("record_stats")=(bool)(true) ) );
        
        }
        MoverMove_exposer.def( bp::self != bp::self );
        { //::SireMove::MoverMove::operator=
        
            typedef ::SireMove::MoverMove & ( ::SireMove::MoverMove::*assign_function_type )( ::SireMove::MoverMove const & ) ;
            assign_function_type assign_function_value( &::SireMove::MoverMove::operator= );
            
            MoverMove_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        MoverMove_exposer.def( bp::self == bp::self );
        { //::SireMove::MoverMove::sampler
        
            typedef ::SireMove::Sampler const & ( ::SireMove::MoverMove::*sampler_function_type )(  ) const;
            sampler_function_type sampler_function_value( &::SireMove::MoverMove::sampler );
            
            MoverMove_exposer.def( 
                "sampler"
                , sampler_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::SireMove::MoverMove::setAngleDeltas
        
            typedef void ( ::SireMove::MoverMove::*setAngleDeltas_function_type )( ::QHash< SireMove::DofID, SireUnits::Dimension::PhysUnit< 0, 0, 0, 0, 0, 0, 1 > > const & ) ;
            setAngleDeltas_function_type setAngleDeltas_function_value( &::SireMove::MoverMove::setAngleDeltas );
            
            MoverMove_exposer.def( 
                "setAngleDeltas"
                , setAngleDeltas_function_value
                , ( bp::arg("angle_deltas") ) );
        
        }
        { //::SireMove::MoverMove::setAngles
        
            typedef void ( ::SireMove::MoverMove::*setAngles_function_type )( ::QList< SireMol::AngleID > const & ) ;
            setAngles_function_type setAngles_function_value( &::SireMove::MoverMove::setAngles );
            
            MoverMove_exposer.def( 
                "setAngles"
                , setAngles_function_value
                , ( bp::arg("angles") ) );
        
        }
        { //::SireMove::MoverMove::setBondDeltas
        
            typedef void ( ::SireMove::MoverMove::*setBondDeltas_function_type )( ::QHash< SireMove::DofID, SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & ) ;
            setBondDeltas_function_type setBondDeltas_function_value( &::SireMove::MoverMove::setBondDeltas );
            
            MoverMove_exposer.def( 
                "setBondDeltas"
                , setBondDeltas_function_value
                , ( bp::arg("bond_deltas") ) );
        
        }
        { //::SireMove::MoverMove::setBonds
        
            typedef void ( ::SireMove::MoverMove::*setBonds_function_type )( ::QList< SireMol::BondID > const & ) ;
            setBonds_function_type setBonds_function_value( &::SireMove::MoverMove::setBonds );
            
            MoverMove_exposer.def( 
                "setBonds"
                , setBonds_function_value
                , ( bp::arg("bonds") ) );
        
        }
        { //::SireMove::MoverMove::setDihedrals
        
            typedef void ( ::SireMove::MoverMove::*setDihedrals_function_type )( ::QList< SireMol::DihedralID > const & ) ;
            setDihedrals_function_type setDihedrals_function_value( &::SireMove::MoverMove::setDihedrals );
            
            MoverMove_exposer.def( 
                "setDihedrals"
                , setDihedrals_function_value
                , ( bp::arg("dihedrals") ) );
        
        }
        { //::SireMove::MoverMove::setGenerator
        
            typedef void ( ::SireMove::MoverMove::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::MoverMove::setGenerator );
            
            MoverMove_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("rangenerator") ) );
        
        }
        { //::SireMove::MoverMove::setSampler
        
            typedef void ( ::SireMove::MoverMove::*setSampler_function_type )( ::SireMove::Sampler const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::MoverMove::setSampler );
            
            MoverMove_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("sampler") ) );
        
        }
        { //::SireMove::MoverMove::setSampler
        
            typedef void ( ::SireMove::MoverMove::*setSampler_function_type )( ::SireMol::MoleculeGroup const & ) ;
            setSampler_function_type setSampler_function_value( &::SireMove::MoverMove::setSampler );
            
            MoverMove_exposer.def( 
                "setSampler"
                , setSampler_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMove::MoverMove::toString
        
            typedef ::QString ( ::SireMove::MoverMove::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::MoverMove::toString );
            
            MoverMove_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::MoverMove::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::MoverMove::typeName );
            
            MoverMove_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        MoverMove_exposer.staticmethod( "typeName" );
        MoverMove_exposer.def( "__copy__", &__copy__);
        MoverMove_exposer.def( "__deepcopy__", &__copy__);
        MoverMove_exposer.def( "clone", &__copy__);
        MoverMove_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::MoverMove >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoverMove_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::MoverMove >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        MoverMove_exposer.def( "__str__", &__str__< ::SireMove::MoverMove > );
        MoverMove_exposer.def( "__repr__", &__str__< ::SireMove::MoverMove > );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "RandomVelocities.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/symbol.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "velocitygenerator.h"

#include "velocitygenerator.h"

SireMove::RandomVelocities __copy__(const SireMove::RandomVelocities &other){ return SireMove::RandomVelocities(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_RandomVelocities_class(){

    { //::SireMove::RandomVelocities
        typedef bp::class_< SireMove::RandomVelocities, bp::bases< SireMove::VelocityGenerator, SireBase::Property > > RandomVelocities_exposer_t;
        RandomVelocities_exposer_t RandomVelocities_exposer = RandomVelocities_exposer_t( "RandomVelocities", bp::init< >() );
        bp::scope RandomVelocities_scope( RandomVelocities_exposer );
        RandomVelocities_exposer.def( bp::init< SireCAS::Expression const & >(( bp::arg("ranfunction") )) );
        RandomVelocities_exposer.def( bp::init< SireMove::RandomVelocities const & >(( bp::arg("other") )) );
        { //::SireMove::RandomVelocities::generator
        
            typedef ::SireMaths::RanGenerator const & ( ::SireMove::RandomVelocities::*generator_function_type )(  ) const;
            generator_function_type generator_function_value( &::SireMove::RandomVelocities::generator );
            
            RandomVelocities_exposer.def( 
                "generator"
                , generator_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        RandomVelocities_exposer.def( bp::self != bp::self );
        { //::SireMove::RandomVelocities::operator=
        
            typedef ::SireMove::RandomVelocities & ( ::SireMove::RandomVelocities::*assign_function_type )( ::SireMove::RandomVelocities const & ) ;
            assign_function_type assign_function_value( &::SireMove::RandomVelocities::operator= );
            
            RandomVelocities_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        RandomVelocities_exposer.def( bp::self == bp::self );
        { //::SireMove::RandomVelocities::setGenerator
        
            typedef void ( ::SireMove::RandomVelocities::*setGenerator_function_type )( ::SireMaths::RanGenerator const & ) ;
            setGenerator_function_type setGenerator_function_value( &::SireMove::RandomVelocities::setGenerator );
            
            RandomVelocities_exposer.def( 
                "setGenerator"
                , setGenerator_function_value
                , ( bp::arg("rangenerator") ) );
        
        }
        { //::SireMove::RandomVelocities::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::RandomVelocities::typeName );
            
            RandomVelocities_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::SireMove::RandomVelocities::x
        
            typedef ::SireCAS::Symbol ( *x_function_type )(  );
            x_function_type x_function_value( &::SireMove::RandomVelocities::x );
            
            RandomVelocities_exposer.def( 
                "x"
                , x_function_value );
        
        }
        RandomVelocities_exposer.staticmethod( "typeName" );
        RandomVelocities_exposer.staticmethod( "x" );
        RandomVelocities_exposer.def( "__copy__", &__copy__);
        RandomVelocities_exposer.def( "__deepcopy__", &__copy__);
        RandomVelocities_exposer.def( "clone", &__copy__);
        RandomVelocities_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::RandomVelocities >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RandomVelocities_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::RandomVelocities >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        RandomVelocities_exposer.def( "__str__", &__str__< ::SireMove::RandomVelocities > );
        RandomVelocities_exposer.def( "__repr__", &__str__< ::SireMove::RandomVelocities > );
    }

}

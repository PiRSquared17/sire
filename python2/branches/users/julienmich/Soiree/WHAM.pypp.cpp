// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Helpers/clone_const_reference.hpp"
#include "WHAM.pypp.hpp"

namespace bp = boost::python;

#include "SireCAS/values.h"

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireMaths/maths.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "wham.h"

#include "wham.h"

Soiree::WHAM __copy__(const Soiree::WHAM &other){ return Soiree::WHAM(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const Soiree::WHAM&){ return "Soiree::WHAM";}

void register_WHAM_class(){

    { //::Soiree::WHAM
        typedef bp::class_< Soiree::WHAM > WHAM_exposer_t;
        WHAM_exposer_t WHAM_exposer = WHAM_exposer_t( "WHAM" );
        bp::scope WHAM_scope( WHAM_exposer );
        WHAM_exposer.def( bp::init< >() );
        WHAM_exposer.def( bp::init< SireCAS::Symbol const & >(( bp::arg("coordinate") )) );
        WHAM_exposer.def( bp::init< SireCAS::Symbol const &, SireUnits::Dimension::Temperature >(( bp::arg("coordinate"), bp::arg("temperature") )) );
        WHAM_exposer.def( bp::init< QVector< SireCAS::Symbol > const & >(( bp::arg("coordinates") )) );
        WHAM_exposer.def( bp::init< QVector< SireCAS::Symbol > const &, SireUnits::Dimension::Temperature >(( bp::arg("coordinates"), bp::arg("temperature") )) );
        WHAM_exposer.def( bp::init< QSet< SireCAS::Symbol > const & >(( bp::arg("coordinates") )) );
        WHAM_exposer.def( bp::init< QSet< SireCAS::Symbol > const &, SireUnits::Dimension::Temperature >(( bp::arg("coordinates"), bp::arg("temperature") )) );
        WHAM_exposer.def( bp::init< Soiree::WHAM const & >(( bp::arg("other") )) );
        { //::Soiree::WHAM::add
        
            typedef void ( ::Soiree::WHAM::*add_function_type )( ::QVector< double > const &,::QVector< SireUnits::Dimension::PhysUnit< 1, 2, -0x000000002, 0, 0, -0x000000001, 0 > > const &,bool ) ;
            add_function_type add_function_value( &::Soiree::WHAM::add );
            
            WHAM_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("coord_values"), bp::arg("umbrella_values"), bp::arg("new_trajectory")=(bool)(false) ) );
        
        }
        { //::Soiree::WHAM::add
        
            typedef void ( ::Soiree::WHAM::*add_function_type )( double,::SireUnits::Dimension::MolarEnergy,bool ) ;
            add_function_type add_function_value( &::Soiree::WHAM::add );
            
            WHAM_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("coord_value"), bp::arg("umbrella_value"), bp::arg("new_trajectory")=(bool)(false) ) );
        
        }
        { //::Soiree::WHAM::add
        
            typedef void ( ::Soiree::WHAM::*add_function_type )( ::QHash< SireCAS::Symbol, QVector< double > > const &,::QVector< SireUnits::Dimension::PhysUnit< 1, 2, -0x000000002, 0, 0, -0x000000001, 0 > > const &,bool ) ;
            add_function_type add_function_value( &::Soiree::WHAM::add );
            
            WHAM_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("coord_values"), bp::arg("umbrella_values"), bp::arg("new_trajectory")=(bool)(false) ) );
        
        }
        { //::Soiree::WHAM::add
        
            typedef void ( ::Soiree::WHAM::*add_function_type )( ::SireCAS::Values const &,::SireUnits::Dimension::MolarEnergy,bool ) ;
            add_function_type add_function_value( &::Soiree::WHAM::add );
            
            WHAM_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("coord_values"), bp::arg("umbrella_value"), bp::arg("new_trajectory")=(bool)(false) ) );
        
        }
        { //::Soiree::WHAM::add
        
            typedef void ( ::Soiree::WHAM::*add_function_type )( ::Soiree::WHAM const &,bool ) ;
            add_function_type add_function_value( &::Soiree::WHAM::add );
            
            WHAM_exposer.def( 
                "add"
                , add_function_value
                , ( bp::arg("other"), bp::arg("new_trajectory")=(bool)(false) ) );
        
        }
        { //::Soiree::WHAM::coordinateTrajectory
        
            typedef ::QVector< double > ( ::Soiree::WHAM::*coordinateTrajectory_function_type )(  ) const;
            coordinateTrajectory_function_type coordinateTrajectory_function_value( &::Soiree::WHAM::coordinateTrajectory );
            
            WHAM_exposer.def( 
                "coordinateTrajectory"
                , coordinateTrajectory_function_value );
        
        }
        { //::Soiree::WHAM::coordinateTrajectory
        
            typedef ::QVector< double > ( ::Soiree::WHAM::*coordinateTrajectory_function_type )( ::SireCAS::Symbol const & ) const;
            coordinateTrajectory_function_type coordinateTrajectory_function_value( &::Soiree::WHAM::coordinateTrajectory );
            
            WHAM_exposer.def( 
                "coordinateTrajectory"
                , coordinateTrajectory_function_value
                , ( bp::arg("coordinate") ) );
        
        }
        { //::Soiree::WHAM::coordinateTrajectory
        
            typedef ::QVector< double > ( ::Soiree::WHAM::*coordinateTrajectory_function_type )( int ) const;
            coordinateTrajectory_function_type coordinateTrajectory_function_value( &::Soiree::WHAM::coordinateTrajectory );
            
            WHAM_exposer.def( 
                "coordinateTrajectory"
                , coordinateTrajectory_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::WHAM::coordinateTrajectory
        
            typedef ::QVector< double > ( ::Soiree::WHAM::*coordinateTrajectory_function_type )( ::SireCAS::Symbol const &,int ) const;
            coordinateTrajectory_function_type coordinateTrajectory_function_value( &::Soiree::WHAM::coordinateTrajectory );
            
            WHAM_exposer.def( 
                "coordinateTrajectory"
                , coordinateTrajectory_function_value
                , ( bp::arg("coordinate"), bp::arg("i") ) );
        
        }
        { //::Soiree::WHAM::isEmpty
        
            typedef bool ( ::Soiree::WHAM::*isEmpty_function_type )(  ) const;
            isEmpty_function_type isEmpty_function_value( &::Soiree::WHAM::isEmpty );
            
            WHAM_exposer.def( 
                "isEmpty"
                , isEmpty_function_value );
        
        }
        { //::Soiree::WHAM::nReactionCoordinates
        
            typedef int ( ::Soiree::WHAM::*nReactionCoordinates_function_type )(  ) const;
            nReactionCoordinates_function_type nReactionCoordinates_function_value( &::Soiree::WHAM::nReactionCoordinates );
            
            WHAM_exposer.def( 
                "nReactionCoordinates"
                , nReactionCoordinates_function_value );
        
        }
        { //::Soiree::WHAM::nSteps
        
            typedef ::quint64 ( ::Soiree::WHAM::*nSteps_function_type )( int ) const;
            nSteps_function_type nSteps_function_value( &::Soiree::WHAM::nSteps );
            
            WHAM_exposer.def( 
                "nSteps"
                , nSteps_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::WHAM::nTrajectories
        
            typedef int ( ::Soiree::WHAM::*nTrajectories_function_type )(  ) const;
            nTrajectories_function_type nTrajectories_function_value( &::Soiree::WHAM::nTrajectories );
            
            WHAM_exposer.def( 
                "nTrajectories"
                , nTrajectories_function_value );
        
        }
        WHAM_exposer.def( bp::self != bp::self );
        WHAM_exposer.def( bp::self + bp::self );
        { //::Soiree::WHAM::operator=
        
            typedef ::Soiree::WHAM & ( ::Soiree::WHAM::*assign_function_type )( ::Soiree::WHAM const & ) ;
            assign_function_type assign_function_value( &::Soiree::WHAM::operator= );
            
            WHAM_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        WHAM_exposer.def( bp::self == bp::self );
        { //::Soiree::WHAM::reactionCoordinate
        
            typedef ::SireCAS::Symbol const & ( ::Soiree::WHAM::*reactionCoordinate_function_type )(  ) const;
            reactionCoordinate_function_type reactionCoordinate_function_value( &::Soiree::WHAM::reactionCoordinate );
            
            WHAM_exposer.def( 
                "reactionCoordinate"
                , reactionCoordinate_function_value
                , bp::return_value_policy<bp::clone_const_reference>() );
        
        }
        { //::Soiree::WHAM::reactionCoordinates
        
            typedef ::QVector< SireCAS::Symbol > const & ( ::Soiree::WHAM::*reactionCoordinates_function_type )(  ) const;
            reactionCoordinates_function_type reactionCoordinates_function_value( &::Soiree::WHAM::reactionCoordinates );
            
            WHAM_exposer.def( 
                "reactionCoordinates"
                , reactionCoordinates_function_value
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::Soiree::WHAM::solve
        
            typedef ::QVector< QPair< QVector< double >, double > > ( ::Soiree::WHAM::*solve_function_type )( ::QHash< SireCAS::Symbol, SireMaths::HistogramRange > const &,double,int ) const;
            solve_function_type solve_function_value( &::Soiree::WHAM::solve );
            
            WHAM_exposer.def( 
                "solve"
                , solve_function_value
                , ( bp::arg("range"), bp::arg("tolerance")=1.0000000000000000364321973154977415791655470656e-10, bp::arg("maxiter")=(int)(100000) ) );
        
        }
        { //::Soiree::WHAM::solve
        
            typedef ::SireMaths::Histogram ( ::Soiree::WHAM::*solve_function_type )( ::SireMaths::HistogramRange const &,double,int ) const;
            solve_function_type solve_function_value( &::Soiree::WHAM::solve );
            
            WHAM_exposer.def( 
                "solve"
                , solve_function_value
                , ( bp::arg("range"), bp::arg("tolerance")=1.0000000000000000364321973154977415791655470656e-10, bp::arg("maxiter")=(int)(100000) ) );
        
        }
        { //::Soiree::WHAM::temperature
        
            typedef ::SireUnits::Dimension::Temperature ( ::Soiree::WHAM::*temperature_function_type )(  ) const;
            temperature_function_type temperature_function_value( &::Soiree::WHAM::temperature );
            
            WHAM_exposer.def( 
                "temperature"
                , temperature_function_value );
        
        }
        { //::Soiree::WHAM::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Soiree::WHAM::typeName );
            
            WHAM_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Soiree::WHAM::umbrellaTrajectory
        
            typedef ::QVector< SireUnits::Dimension::PhysUnit< 1, 2, -0x000000002, 0, 0, -0x000000001, 0 > > ( ::Soiree::WHAM::*umbrellaTrajectory_function_type )(  ) const;
            umbrellaTrajectory_function_type umbrellaTrajectory_function_value( &::Soiree::WHAM::umbrellaTrajectory );
            
            WHAM_exposer.def( 
                "umbrellaTrajectory"
                , umbrellaTrajectory_function_value );
        
        }
        { //::Soiree::WHAM::umbrellaTrajectory
        
            typedef ::QVector< SireUnits::Dimension::PhysUnit< 1, 2, -0x000000002, 0, 0, -0x000000001, 0 > > ( ::Soiree::WHAM::*umbrellaTrajectory_function_type )( int ) const;
            umbrellaTrajectory_function_type umbrellaTrajectory_function_value( &::Soiree::WHAM::umbrellaTrajectory );
            
            WHAM_exposer.def( 
                "umbrellaTrajectory"
                , umbrellaTrajectory_function_value
                , ( bp::arg("i") ) );
        
        }
        { //::Soiree::WHAM::what
        
            typedef char const * ( ::Soiree::WHAM::*what_function_type )(  ) const;
            what_function_type what_function_value( &::Soiree::WHAM::what );
            
            WHAM_exposer.def( 
                "what"
                , what_function_value );
        
        }
        WHAM_exposer.staticmethod( "typeName" );
        WHAM_exposer.def( "__copy__", &__copy__);
        WHAM_exposer.def( "__deepcopy__", &__copy__);
        WHAM_exposer.def( "clone", &__copy__);
        WHAM_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::Soiree::WHAM >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        WHAM_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::Soiree::WHAM >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        WHAM_exposer.def( "__str__", &pvt_get_name);
        WHAM_exposer.def( "__repr__", &pvt_get_name);
    }

}

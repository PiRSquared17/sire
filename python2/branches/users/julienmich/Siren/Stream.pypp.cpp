// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Stream.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "class.h"

#include "detail/sharestrings.h"

#include "objref.h"

#include "stream.h"

#include "stream.h"

#include "Helpers/str.hpp"

void register_Stream_class(){

    { //::Siren::Stream
        typedef bp::class_< Siren::Stream, bp::bases< Siren::Handle >, boost::noncopyable > Stream_exposer_t;
        Stream_exposer_t Stream_exposer = Stream_exposer_t( "Stream", bp::no_init );
        bp::scope Stream_scope( Stream_exposer );
        { //::Siren::Stream::assertIsLoading
        
            typedef void ( ::Siren::Stream::*assertIsLoading_function_type )(  ) const;
            assertIsLoading_function_type assertIsLoading_function_value( &::Siren::Stream::assertIsLoading );
            
            Stream_exposer.def( 
                "assertIsLoading"
                , assertIsLoading_function_value );
        
        }
        { //::Siren::Stream::assertIsSaving
        
            typedef void ( ::Siren::Stream::*assertIsSaving_function_type )(  ) const;
            assertIsSaving_function_type assertIsSaving_function_value( &::Siren::Stream::assertIsSaving );
            
            Stream_exposer.def( 
                "assertIsSaving"
                , assertIsSaving_function_value );
        
        }
        { //::Siren::Stream::assertVersion
        
            typedef void ( ::Siren::Stream::*assertVersion_function_type )( ::QString const &,int ) ;
            assertVersion_function_type assertVersion_function_value( &::Siren::Stream::assertVersion );
            
            Stream_exposer.def( 
                "assertVersion"
                , assertVersion_function_value
                , ( bp::arg("class_name"), bp::arg("version") ) );
        
        }
        { //::Siren::Stream::checkVersion
        
            typedef int ( ::Siren::Stream::*checkVersion_function_type )( ::QString const &,int ) ;
            checkVersion_function_type checkVersion_function_value( &::Siren::Stream::checkVersion );
            
            Stream_exposer.def( 
                "checkVersion"
                , checkVersion_function_value
                , ( bp::arg("class_name"), bp::arg("version") ) );
        
        }
        { //::Siren::Stream::isLoading
        
            typedef bool ( ::Siren::Stream::*isLoading_function_type )(  ) const;
            isLoading_function_type isLoading_function_value( &::Siren::Stream::isLoading );
            
            Stream_exposer.def( 
                "isLoading"
                , isLoading_function_value );
        
        }
        { //::Siren::Stream::isSaving
        
            typedef bool ( ::Siren::Stream::*isSaving_function_type )(  ) const;
            isSaving_function_type isSaving_function_value( &::Siren::Stream::isSaving );
            
            Stream_exposer.def( 
                "isSaving"
                , isSaving_function_value );
        
        }
        { //::Siren::Stream::item
        
            typedef ::Siren::Schema ( ::Siren::Stream::*item_function_type )( ::Siren::Class const &,int ) ;
            item_function_type item_function_value( &::Siren::Stream::item );
            
            Stream_exposer.def( 
                "item"
                , item_function_value
                , ( bp::arg("c"), bp::arg("version")=(int)(1) ) );
        
        }
        { //::Siren::Stream::loadNextObject
        
            typedef ::Siren::ObjRef ( ::Siren::Stream::*loadNextObject_function_type )(  ) ;
            loadNextObject_function_type loadNextObject_function_value( &::Siren::Stream::loadNextObject );
            
            Stream_exposer.def( 
                "loadNextObject"
                , loadNextObject_function_value );
        
        }
        { //::Siren::Stream::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::Stream::typeName );
            
            Stream_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        Stream_exposer.staticmethod( "typeName" );
        Stream_exposer.def( "__str__", &__str__< ::Siren::Stream > );
        Stream_exposer.def( "__repr__", &__str__< ::Siren::Stream > );
    }

}

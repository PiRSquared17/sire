// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "NumberBase.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "logger.h"

#include "primitive.h"

#include "tester.h"

#include <cmath>

#include <limits>

#include "primitive.h"

Siren::Primitive<Siren::Number> __copy__(const Siren::Primitive<Siren::Number> &other){ return Siren::Primitive<Siren::Number>(other); }

const char* pvt_get_name(const Siren::Primitive<Siren::Number>&){ return "Siren::Primitive<Siren::Number>";}

void register_NumberBase_class(){

    { //::Siren::Primitive< Siren::Number >
        typedef bp::class_< Siren::Primitive< Siren::Number > > NumberBase_exposer_t;
        NumberBase_exposer_t NumberBase_exposer = NumberBase_exposer_t( "NumberBase" );
        bp::scope NumberBase_scope( NumberBase_exposer );
        NumberBase_exposer.def( bp::init< >() );
        { //::Siren::Primitive< Siren::Number >::getClass
        
            typedef Siren::Primitive< Siren::Number > exported_class_t;
            typedef ::Siren::Class ( ::Siren::Primitive< Siren::Number >::*getClass_function_type )(  ) const;
            getClass_function_type getClass_function_value( &::Siren::Primitive< Siren::Number >::getClass );
            
            NumberBase_exposer.def( 
                "getClass"
                , getClass_function_value );
        
        }
        { //::Siren::Primitive< Siren::Number >::load
        
            typedef Siren::Primitive< Siren::Number > exported_class_t;
            typedef void ( ::Siren::Primitive< Siren::Number >::*load_function_type )( ::Siren::Stream & ) ;
            load_function_type load_function_value( &::Siren::Primitive< Siren::Number >::load );
            
            NumberBase_exposer.def( 
                "load"
                , load_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< Siren::Number >::save
        
            typedef Siren::Primitive< Siren::Number > exported_class_t;
            typedef void ( ::Siren::Primitive< Siren::Number >::*save_function_type )( ::Siren::Stream & ) const;
            save_function_type save_function_value( &::Siren::Primitive< Siren::Number >::save );
            
            NumberBase_exposer.def( 
                "save"
                , save_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< Siren::Number >::stream
        
            typedef Siren::Primitive< Siren::Number > exported_class_t;
            typedef void ( ::Siren::Primitive< Siren::Number >::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::Primitive< Siren::Number >::stream );
            
            NumberBase_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Primitive< Siren::Number >::typeName
        
            typedef Siren::Primitive< Siren::Number > exported_class_t;
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::Primitive< Siren::Number >::typeName );
            
            NumberBase_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        NumberBase_exposer.staticmethod( "typeName" );
        NumberBase_exposer.def( "__copy__", &__copy__);
        NumberBase_exposer.def( "__deepcopy__", &__copy__);
        NumberBase_exposer.def( "clone", &__copy__);
        NumberBase_exposer.def( "__str__", &pvt_get_name);
        NumberBase_exposer.def( "__repr__", &pvt_get_name);
    }

}

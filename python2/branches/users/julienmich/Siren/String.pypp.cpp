// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "String.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "logger.h"

#include "primitive.h"

#include "tester.h"

#include <cmath>

#include <limits>

#include "primitive.h"

Siren::String __copy__(const Siren::String &other){ return Siren::String(other); }

#include "Helpers/str.hpp"

void register_String_class(){

    { //::Siren::String
        typedef bp::class_< Siren::String, bp::bases< Siren::Primitive<Siren::String> > > String_exposer_t;
        String_exposer_t String_exposer = String_exposer_t( "String" );
        bp::scope String_scope( String_exposer );
        String_exposer.def( bp::init< >() );
        String_exposer.def( bp::init< QString const & >(( bp::arg("text") )) );
        String_exposer.def( bp::init< Siren::String const & >(( bp::arg("other") )) );
        { //::Siren::String::hashCode
        
            typedef ::uint ( ::Siren::String::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::String::hashCode );
            
            String_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        String_exposer.def( bp::self != bp::self );
        { //::Siren::String::operator=
        
            typedef ::Siren::String & ( ::Siren::String::*assign_function_type )( ::Siren::String const & ) ;
            assign_function_type assign_function_value( &::Siren::String::operator= );
            
            String_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        String_exposer.def( bp::self == bp::self );
        { //::Siren::String::stream
        
            typedef void ( ::Siren::String::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::String::stream );
            
            String_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::String::test
        
            typedef bool ( ::Siren::String::*test_function_type )(  ) const;
            test_function_type test_function_value( &::Siren::String::test );
            
            String_exposer.def( 
                "test"
                , test_function_value );
        
        }
        { //::Siren::String::test
        
            typedef bool ( ::Siren::String::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::String::test );
            
            String_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::String::toString
        
            typedef ::QString ( ::Siren::String::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::String::toString );
            
            String_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        String_exposer.def( "__copy__", &__copy__);
        String_exposer.def( "__deepcopy__", &__copy__);
        String_exposer.def( "clone", &__copy__);
        String_exposer.def( "__str__", &__str__< ::Siren::String > );
        String_exposer.def( "__repr__", &__str__< ::Siren::String > );
    }

}

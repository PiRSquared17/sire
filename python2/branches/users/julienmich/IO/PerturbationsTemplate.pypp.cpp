// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "PerturbationsTemplate.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireIO/errors.h"

#include "SireMol/errors.h"

#include "SireUnits/convert.h"

#include "SireUnits/dimensions.h"

#include "SireUnits/units.h"

#include "perturbationslibrary.h"

#include "tostring.h"

#include <QFile>

#include <QTextStream>

#include "perturbationslibrary.h"

SireIO::PerturbationsTemplate __copy__(const SireIO::PerturbationsTemplate &other){ return SireIO::PerturbationsTemplate(other); }

#include "Qt/qdatastream.hpp"

const char* pvt_get_name(const SireIO::PerturbationsTemplate&){ return "SireIO::PerturbationsTemplate";}

void register_PerturbationsTemplate_class(){

    { //::SireIO::PerturbationsTemplate
        typedef bp::class_< SireIO::PerturbationsTemplate > PerturbationsTemplate_exposer_t;
        PerturbationsTemplate_exposer_t PerturbationsTemplate_exposer = PerturbationsTemplate_exposer_t( "PerturbationsTemplate" );
        bp::scope PerturbationsTemplate_scope( PerturbationsTemplate_exposer );
        PerturbationsTemplate_exposer.def( bp::init< >() );
        PerturbationsTemplate_exposer.def( bp::init< QString const & >(( bp::arg("name") )) );
        PerturbationsTemplate_exposer.def( bp::init< SireIO::PerturbationsTemplate const & >(( bp::arg("other") )) );
        { //::SireIO::PerturbationsTemplate::getFinalCharge
        
            typedef ::SireUnits::Dimension::Charge ( ::SireIO::PerturbationsTemplate::*getFinalCharge_function_type )( ::QString const & ) const;
            getFinalCharge_function_type getFinalCharge_function_value( &::SireIO::PerturbationsTemplate::getFinalCharge );
            
            PerturbationsTemplate_exposer.def( 
                "getFinalCharge"
                , getFinalCharge_function_value
                , ( bp::arg("atomname") ) );
        
        }
        { //::SireIO::PerturbationsTemplate::getInitCharge
        
            typedef ::SireUnits::Dimension::Charge ( ::SireIO::PerturbationsTemplate::*getInitCharge_function_type )( ::QString const & ) const;
            getInitCharge_function_type getInitCharge_function_value( &::SireIO::PerturbationsTemplate::getInitCharge );
            
            PerturbationsTemplate_exposer.def( 
                "getInitCharge"
                , getInitCharge_function_value
                , ( bp::arg("atomname") ) );
        
        }
        { //::SireIO::PerturbationsTemplate::getName
        
            typedef ::QString const ( ::SireIO::PerturbationsTemplate::*getName_function_type )(  ) ;
            getName_function_type getName_function_value( &::SireIO::PerturbationsTemplate::getName );
            
            PerturbationsTemplate_exposer.def( 
                "getName"
                , getName_function_value );
        
        }
        PerturbationsTemplate_exposer.def( bp::self != bp::self );
        { //::SireIO::PerturbationsTemplate::operator=
        
            typedef ::SireIO::PerturbationsTemplate & ( ::SireIO::PerturbationsTemplate::*assign_function_type )( ::SireIO::PerturbationsTemplate const & ) ;
            assign_function_type assign_function_value( &::SireIO::PerturbationsTemplate::operator= );
            
            PerturbationsTemplate_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        PerturbationsTemplate_exposer.def( bp::self == bp::self );
        { //::SireIO::PerturbationsTemplate::setFinalCharge
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setFinalCharge_function_type )( ::QString const &,::SireUnits::Dimension::Charge const & ) ;
            setFinalCharge_function_type setFinalCharge_function_value( &::SireIO::PerturbationsTemplate::setFinalCharge );
            
            PerturbationsTemplate_exposer.def( 
                "setFinalCharge"
                , setFinalCharge_function_value
                , ( bp::arg("atomname"), bp::arg("atomcharge") ) );
        
        }
        { //::SireIO::PerturbationsTemplate::setInitCharge
        
            typedef void ( ::SireIO::PerturbationsTemplate::*setInitCharge_function_type )( ::QString const &,::SireUnits::Dimension::Charge const & ) ;
            setInitCharge_function_type setInitCharge_function_value( &::SireIO::PerturbationsTemplate::setInitCharge );
            
            PerturbationsTemplate_exposer.def( 
                "setInitCharge"
                , setInitCharge_function_value
                , ( bp::arg("atomname"), bp::arg("atomcharge") ) );
        
        }
        { //::SireIO::PerturbationsTemplate::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireIO::PerturbationsTemplate::typeName );
            
            PerturbationsTemplate_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        PerturbationsTemplate_exposer.staticmethod( "typeName" );
        PerturbationsTemplate_exposer.def( "__copy__", &__copy__);
        PerturbationsTemplate_exposer.def( "__deepcopy__", &__copy__);
        PerturbationsTemplate_exposer.def( "clone", &__copy__);
        PerturbationsTemplate_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireIO::PerturbationsTemplate >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PerturbationsTemplate_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireIO::PerturbationsTemplate >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PerturbationsTemplate_exposer.def( "__str__", &pvt_get_name);
        PerturbationsTemplate_exposer.def( "__repr__", &pvt_get_name);
    }

}

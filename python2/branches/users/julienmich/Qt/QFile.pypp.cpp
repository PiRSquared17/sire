// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QFile.pypp.hpp"

namespace bp = boost::python;

void register_QFile_class(){

    { //::QFile
        typedef bp::class_< QFile, boost::noncopyable > QFile_exposer_t;
        QFile_exposer_t QFile_exposer = QFile_exposer_t( "QFile", bp::no_init );
        bp::scope QFile_scope( QFile_exposer );
        bp::enum_< QFile::FileError>("FileError")
            .value("NoError", QFile::NoError)
            .value("ReadError", QFile::ReadError)
            .value("WriteError", QFile::WriteError)
            .value("FatalError", QFile::FatalError)
            .value("ResourceError", QFile::ResourceError)
            .value("OpenError", QFile::OpenError)
            .value("AbortError", QFile::AbortError)
            .value("TimeOutError", QFile::TimeOutError)
            .value("UnspecifiedError", QFile::UnspecifiedError)
            .value("RemoveError", QFile::RemoveError)
            .value("RenameError", QFile::RenameError)
            .value("PositionError", QFile::PositionError)
            .value("ResizeError", QFile::ResizeError)
            .value("PermissionsError", QFile::PermissionsError)
            .value("CopyError", QFile::CopyError)
            .export_values()
            ;
        bp::enum_< QFile::Permission>("Permission")
            .value("ReadOwner", QFile::ReadOwner)
            .value("WriteOwner", QFile::WriteOwner)
            .value("ExeOwner", QFile::ExeOwner)
            .value("ReadUser", QFile::ReadUser)
            .value("WriteUser", QFile::WriteUser)
            .value("ExeUser", QFile::ExeUser)
            .value("ReadGroup", QFile::ReadGroup)
            .value("WriteGroup", QFile::WriteGroup)
            .value("ExeGroup", QFile::ExeGroup)
            .value("ReadOther", QFile::ReadOther)
            .value("WriteOther", QFile::WriteOther)
            .value("ExeOther", QFile::ExeOther)
            .export_values()
            ;
        { //::QFile::atEnd
        
            typedef bool ( ::QFile::*atEnd_function_type )(  ) const;
            atEnd_function_type atEnd_function_value( &::QFile::atEnd );
            
            QFile_exposer.def( 
                "atEnd"
                , atEnd_function_value );
        
        }
        { //::QFile::close
        
            typedef void ( ::QFile::*close_function_type )(  ) ;
            close_function_type close_function_value( &::QFile::close );
            
            QFile_exposer.def( 
                "close"
                , close_function_value );
        
        }
        { //::QFile::copy
        
            typedef bool ( ::QFile::*copy_function_type )( ::QString const & ) ;
            copy_function_type copy_function_value( &::QFile::copy );
            
            QFile_exposer.def( 
                "copy"
                , copy_function_value
                , ( bp::arg("newName") ) );
        
        }
        { //::QFile::copy
        
            typedef bool ( *copy_function_type )( ::QString const &,::QString const & );
            copy_function_type copy_function_value( &::QFile::copy );
            
            QFile_exposer.def( 
                "copy"
                , copy_function_value
                , ( bp::arg("fileName"), bp::arg("newName") ) );
        
        }
        { //::QFile::decodeName
        
            typedef ::QString ( *decodeName_function_type )( ::QByteArray const & );
            decodeName_function_type decodeName_function_value( &::QFile::decodeName );
            
            QFile_exposer.def( 
                "decodeName"
                , decodeName_function_value
                , ( bp::arg("localFileName") ) );
        
        }
        { //::QFile::encodeName
        
            typedef ::QByteArray ( *encodeName_function_type )( ::QString const & );
            encodeName_function_type encodeName_function_value( &::QFile::encodeName );
            
            QFile_exposer.def( 
                "encodeName"
                , encodeName_function_value
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::error
        
            typedef ::QFile::FileError ( ::QFile::*error_function_type )(  ) const;
            error_function_type error_function_value( &::QFile::error );
            
            QFile_exposer.def( 
                "error"
                , error_function_value );
        
        }
        { //::QFile::exists
        
            typedef bool ( ::QFile::*exists_function_type )(  ) const;
            exists_function_type exists_function_value( &::QFile::exists );
            
            QFile_exposer.def( 
                "exists"
                , exists_function_value );
        
        }
        { //::QFile::exists
        
            typedef bool ( *exists_function_type )( ::QString const & );
            exists_function_type exists_function_value( &::QFile::exists );
            
            QFile_exposer.def( 
                "exists"
                , exists_function_value
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::fileName
        
            typedef ::QString ( ::QFile::*fileName_function_type )(  ) const;
            fileName_function_type fileName_function_value( &::QFile::fileName );
            
            QFile_exposer.def( 
                "fileName"
                , fileName_function_value );
        
        }
        { //::QFile::flush
        
            typedef bool ( ::QFile::*flush_function_type )(  ) ;
            flush_function_type flush_function_value( &::QFile::flush );
            
            QFile_exposer.def( 
                "flush"
                , flush_function_value );
        
        }
        { //::QFile::handle
        
            typedef int ( ::QFile::*handle_function_type )(  ) const;
            handle_function_type handle_function_value( &::QFile::handle );
            
            QFile_exposer.def( 
                "handle"
                , handle_function_value );
        
        }
        { //::QFile::isSequential
        
            typedef bool ( ::QFile::*isSequential_function_type )(  ) const;
            isSequential_function_type isSequential_function_value( &::QFile::isSequential );
            
            QFile_exposer.def( 
                "isSequential"
                , isSequential_function_value );
        
        }
        { //::QFile::link
        
            typedef bool ( ::QFile::*link_function_type )( ::QString const & ) ;
            link_function_type link_function_value( &::QFile::link );
            
            QFile_exposer.def( 
                "link"
                , link_function_value
                , ( bp::arg("newName") ) );
        
        }
        { //::QFile::link
        
            typedef bool ( *link_function_type )( ::QString const &,::QString const & );
            link_function_type link_function_value( &::QFile::link );
            
            QFile_exposer.def( 
                "link"
                , link_function_value
                , ( bp::arg("oldname"), bp::arg("newName") ) );
        
        }
        { //::QFile::open
        
            typedef bool ( ::QFile::*open_function_type )( ::QFlags< QIODevice::OpenModeFlag > ) ;
            open_function_type open_function_value( &::QFile::open );
            
            QFile_exposer.def( 
                "open"
                , open_function_value
                , ( bp::arg("flags") ) );
        
        }
        { //::QFile::permissions
        
            typedef ::QFlags< QFile::Permission > ( ::QFile::*permissions_function_type )(  ) const;
            permissions_function_type permissions_function_value( &::QFile::permissions );
            
            QFile_exposer.def( 
                "permissions"
                , permissions_function_value );
        
        }
        { //::QFile::permissions
        
            typedef ::QFlags< QFile::Permission > ( *permissions_function_type )( ::QString const & );
            permissions_function_type permissions_function_value( &::QFile::permissions );
            
            QFile_exposer.def( 
                "permissions"
                , permissions_function_value
                , ( bp::arg("filename") ) );
        
        }
        { //::QFile::pos
        
            typedef ::qint64 ( ::QFile::*pos_function_type )(  ) const;
            pos_function_type pos_function_value( &::QFile::pos );
            
            QFile_exposer.def( 
                "pos"
                , pos_function_value );
        
        }
        { //::QFile::readLink
        
            typedef ::QString ( ::QFile::*readLink_function_type )(  ) const;
            readLink_function_type readLink_function_value( &::QFile::readLink );
            
            QFile_exposer.def( 
                "readLink"
                , readLink_function_value );
        
        }
        { //::QFile::readLink
        
            typedef ::QString ( *readLink_function_type )( ::QString const & );
            readLink_function_type readLink_function_value( &::QFile::readLink );
            
            QFile_exposer.def( 
                "readLink"
                , readLink_function_value
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::remove
        
            typedef bool ( ::QFile::*remove_function_type )(  ) ;
            remove_function_type remove_function_value( &::QFile::remove );
            
            QFile_exposer.def( 
                "remove"
                , remove_function_value );
        
        }
        { //::QFile::remove
        
            typedef bool ( *remove_function_type )( ::QString const & );
            remove_function_type remove_function_value( &::QFile::remove );
            
            QFile_exposer.def( 
                "remove"
                , remove_function_value
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::rename
        
            typedef bool ( ::QFile::*rename_function_type )( ::QString const & ) ;
            rename_function_type rename_function_value( &::QFile::rename );
            
            QFile_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("newName") ) );
        
        }
        { //::QFile::rename
        
            typedef bool ( *rename_function_type )( ::QString const &,::QString const & );
            rename_function_type rename_function_value( &::QFile::rename );
            
            QFile_exposer.def( 
                "rename"
                , rename_function_value
                , ( bp::arg("oldName"), bp::arg("newName") ) );
        
        }
        { //::QFile::resize
        
            typedef bool ( ::QFile::*resize_function_type )( ::qint64 ) ;
            resize_function_type resize_function_value( &::QFile::resize );
            
            QFile_exposer.def( 
                "resize"
                , resize_function_value
                , ( bp::arg("sz") ) );
        
        }
        { //::QFile::resize
        
            typedef bool ( *resize_function_type )( ::QString const &,::qint64 );
            resize_function_type resize_function_value( &::QFile::resize );
            
            QFile_exposer.def( 
                "resize"
                , resize_function_value
                , ( bp::arg("filename"), bp::arg("sz") ) );
        
        }
        { //::QFile::seek
        
            typedef bool ( ::QFile::*seek_function_type )( ::qint64 ) ;
            seek_function_type seek_function_value( &::QFile::seek );
            
            QFile_exposer.def( 
                "seek"
                , seek_function_value
                , ( bp::arg("offset") ) );
        
        }
        { //::QFile::setFileName
        
            typedef void ( ::QFile::*setFileName_function_type )( ::QString const & ) ;
            setFileName_function_type setFileName_function_value( &::QFile::setFileName );
            
            QFile_exposer.def( 
                "setFileName"
                , setFileName_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::QFile::setPermissions
        
            typedef bool ( ::QFile::*setPermissions_function_type )( ::QFlags< QFile::Permission > ) ;
            setPermissions_function_type setPermissions_function_value( &::QFile::setPermissions );
            
            QFile_exposer.def( 
                "setPermissions"
                , setPermissions_function_value
                , ( bp::arg("permissionSpec") ) );
        
        }
        { //::QFile::setPermissions
        
            typedef bool ( *setPermissions_function_type )( ::QString const &,::QFlags< QFile::Permission > );
            setPermissions_function_type setPermissions_function_value( &::QFile::setPermissions );
            
            QFile_exposer.def( 
                "setPermissions"
                , setPermissions_function_value
                , ( bp::arg("filename"), bp::arg("permissionSpec") ) );
        
        }
        { //::QFile::size
        
            typedef ::qint64 ( ::QFile::*size_function_type )(  ) const;
            size_function_type size_function_value( &::QFile::size );
            
            QFile_exposer.def( 
                "size"
                , size_function_value );
        
        }
        { //::QFile::symLinkTarget
        
            typedef ::QString ( ::QFile::*symLinkTarget_function_type )(  ) const;
            symLinkTarget_function_type symLinkTarget_function_value( &::QFile::symLinkTarget );
            
            QFile_exposer.def( 
                "symLinkTarget"
                , symLinkTarget_function_value );
        
        }
        { //::QFile::symLinkTarget
        
            typedef ::QString ( *symLinkTarget_function_type )( ::QString const & );
            symLinkTarget_function_type symLinkTarget_function_value( &::QFile::symLinkTarget );
            
            QFile_exposer.def( 
                "symLinkTarget"
                , symLinkTarget_function_value
                , ( bp::arg("fileName") ) );
        
        }
        { //::QFile::unsetError
        
            typedef void ( ::QFile::*unsetError_function_type )(  ) ;
            unsetError_function_type unsetError_function_value( &::QFile::unsetError );
            
            QFile_exposer.def( 
                "unsetError"
                , unsetError_function_value );
        
        }
        QFile_exposer.staticmethod( "copy" );
        QFile_exposer.staticmethod( "decodeName" );
        QFile_exposer.staticmethod( "encodeName" );
        QFile_exposer.staticmethod( "exists" );
        QFile_exposer.staticmethod( "link" );
        QFile_exposer.staticmethod( "permissions" );
        QFile_exposer.staticmethod( "readLink" );
        QFile_exposer.staticmethod( "remove" );
        QFile_exposer.staticmethod( "rename" );
        QFile_exposer.staticmethod( "resize" );
        QFile_exposer.staticmethod( "setPermissions" );
        QFile_exposer.staticmethod( "symLinkTarget" );
    }

}

// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "AtomID.pypp.hpp"

namespace bp = boost::python;

#include "SireMol/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atom.h"

#include "atomid.h"

#include "atomidentifier.h"

#include "chain.h"

#include "cutgroup.h"

#include "editor.hpp"

#include "groupatomids.h"

#include "molatomid.h"

#include "moleculegroup.h"

#include "moleculegroups.h"

#include "molecules.h"

#include "molinfo.h"

#include "mover.hpp"

#include "residue.h"

#include "segment.h"

#include "selector.hpp"

#include "tostring.h"

#include <QDebug>

#include "atomid.h"

#include "Helpers/str.hpp"

void register_AtomID_class(){

    { //::SireMol::AtomID
        typedef bp::class_< SireMol::AtomID, bp::bases< SireID::ID >, boost::noncopyable > AtomID_exposer_t;
        AtomID_exposer_t AtomID_exposer = AtomID_exposer_t( "AtomID", bp::no_init );
        bp::scope AtomID_scope( AtomID_exposer );
        { //::SireMol::AtomID::map
        
            typedef ::QList< SireMol::AtomIdx > ( ::SireMol::AtomID::*map_function_type )( ::SireMol::MolInfo const & ) const;
            map_function_type map_function_value( &::SireMol::AtomID::map );
            
            AtomID_exposer.def( 
                "map"
                , map_function_value
                , ( bp::arg("molinfo") ) );
        
        }
        AtomID_exposer.def( bp::self & bp::self );
        AtomID_exposer.def( bp::self & bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::SegID >() );
        AtomID_exposer.def( bp::self & bp::other< SireMol::MolID >() );
        { //::SireMol::AtomID::operator()
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__call___function_type )( int ) const;
            __call___function_type __call___function_value( &::SireMol::AtomID::operator() );
            
            AtomID_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("i") ) );
        
        }
        { //::SireMol::AtomID::operator()
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__call___function_type )( int,int ) const;
            __call___function_type __call___function_value( &::SireMol::AtomID::operator() );
            
            AtomID_exposer.def( 
                "__call__"
                , __call___function_value
                , ( bp::arg("i"), bp::arg("j") ) );
        
        }
        AtomID_exposer.def( bp::self * bp::self );
        AtomID_exposer.def( bp::self + bp::self );
        AtomID_exposer.def( bp::self + bp::other< SireMol::CGID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::ResID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::ChainID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::SegID >() );
        AtomID_exposer.def( bp::self + bp::other< SireMol::MolID >() );
        { //::SireMol::AtomID::operator[]
        
            typedef ::SireID::Specify< SireMol::AtomID > ( ::SireMol::AtomID::*__getitem___function_type )( int ) const;
            __getitem___function_type __getitem___function_value( &::SireMol::AtomID::operator[] );
            
            AtomID_exposer.def( 
                "__getitem__"
                , __getitem___function_value
                , ( bp::arg("i") ) );
        
        }
        AtomID_exposer.def( bp::self | bp::self );
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomID::*selectAllFrom_function_type )( ::SireMol::Molecules const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomID::*selectAllFrom_function_type )( ::SireMol::MoleculeGroup const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMol::AtomID::selectAllFrom
        
            typedef ::QHash< SireMol::MolNum, SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomID::*selectAllFrom_function_type )( ::SireMol::MolGroupsBase const & ) const;
            selectAllFrom_function_type selectAllFrom_function_value( &::SireMol::AtomID::selectAllFrom );
            
            AtomID_exposer.def( 
                "selectAllFrom"
                , selectAllFrom_function_value
                , ( bp::arg("molgroups") ) );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type )( ::SireMol::Molecules const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molecules") ) );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type )( ::SireMol::MoleculeGroup const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molgroup") ) );
        
        }
        { //::SireMol::AtomID::selectFrom
        
            typedef ::SireMol::Atom ( ::SireMol::AtomID::*selectFrom_function_type )( ::SireMol::MolGroupsBase const & ) const;
            selectFrom_function_type selectFrom_function_value( &::SireMol::AtomID::selectFrom );
            
            AtomID_exposer.def( 
                "selectFrom"
                , selectFrom_function_value
                , ( bp::arg("molgroups") ) );
        
        }
        { //::SireMol::AtomID::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomID::typeName );
            
            AtomID_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        AtomID_exposer.staticmethod( "typeName" );
        AtomID_exposer.def( "__str__", &__str__< ::SireMol::AtomID > );
        AtomID_exposer.def( "__repr__", &__str__< ::SireMol::AtomID > );
    }

}

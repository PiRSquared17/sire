// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "LengthHistogramBin.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "histogram.h"

#include "histogram.h"

SireMaths::HistogramBinT<SireUnits::Dimension::PhysUnit<0, 1, 0, 0, 0, 0, 0> > __copy__(const SireMaths::HistogramBinT<SireUnits::Dimension::PhysUnit<0, 1, 0, 0, 0, 0, 0> > &other){ return SireMaths::HistogramBinT<SireUnits::Dimension::PhysUnit<0, 1, 0, 0, 0, 0, 0> >(other); }

#include "Helpers/str.hpp"

void register_LengthHistogramBin_class(){

    { //::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >
        typedef bp::class_< SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >, bp::bases< SireMaths::HistogramBin > > LengthHistogramBin_exposer_t;
        LengthHistogramBin_exposer_t LengthHistogramBin_exposer = LengthHistogramBin_exposer_t( "LengthHistogramBin" );
        bp::scope LengthHistogramBin_scope( LengthHistogramBin_exposer );
        LengthHistogramBin_exposer.def( bp::init< >() );
        LengthHistogramBin_exposer.def( bp::init< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 >, SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >(( bp::arg("minval"), bp::arg("maxval") )) );
        LengthHistogramBin_exposer.def( bp::init< SireMaths::HistogramBin const & >(( bp::arg("bin") )) );
        LengthHistogramBin_exposer.def( bp::init< SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & >(( bp::arg("other") )) );
        { //::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::maximum
        
            typedef SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > exported_class_t;
            typedef ::SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > ( ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::*maximum_function_type )(  ) const;
            maximum_function_type maximum_function_value( &::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::maximum );
            
            LengthHistogramBin_exposer.def( 
                "maximum"
                , maximum_function_value );
        
        }
        { //::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::middle
        
            typedef SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > exported_class_t;
            typedef ::SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > ( ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::*middle_function_type )(  ) const;
            middle_function_type middle_function_value( &::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::middle );
            
            LengthHistogramBin_exposer.def( 
                "middle"
                , middle_function_value );
        
        }
        { //::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::minimum
        
            typedef SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > exported_class_t;
            typedef ::SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > ( ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::*minimum_function_type )(  ) const;
            minimum_function_type minimum_function_value( &::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::minimum );
            
            LengthHistogramBin_exposer.def( 
                "minimum"
                , minimum_function_value );
        
        }
        LengthHistogramBin_exposer.def( bp::self != bp::self );
        { //::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::operator=
        
            typedef SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > exported_class_t;
            typedef ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > & ( ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::*assign_function_type )( ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > const & ) ;
            assign_function_type assign_function_value( &::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::operator= );
            
            LengthHistogramBin_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        LengthHistogramBin_exposer.def( bp::self == bp::self );
        { //::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::toString
        
            typedef SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > > exported_class_t;
            typedef ::QString ( ::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMaths::HistogramBinT< SireUnits::Dimension::PhysUnit< 0, 1, 0, 0, 0, 0, 0 > >::toString );
            
            LengthHistogramBin_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        LengthHistogramBin_exposer.def( "__copy__", &__copy__);
        LengthHistogramBin_exposer.def( "__deepcopy__", &__copy__);
        LengthHistogramBin_exposer.def( "clone", &__copy__);
        LengthHistogramBin_exposer.def( "__str__", &__str__< ::SireMaths::HistogramBinT<SireUnits::Dimension::PhysUnit<0, 1, 0, 0, 0, 0, 0> > > );
        LengthHistogramBin_exposer.def( "__repr__", &__str__< ::SireMaths::HistogramBinT<SireUnits::Dimension::PhysUnit<0, 1, 0, 0, 0, 0, 0> > > );
    }

}

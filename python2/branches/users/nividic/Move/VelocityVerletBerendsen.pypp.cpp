// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "VelocityVerletBerendsen.pypp.hpp"

namespace bp = boost::python;

#include "SireFF/forcetable.h"

#include "SireMaths/rangenerator.h"

#include "SireMol/atomcoords.h"

#include "SireMol/atommasses.h"

#include "SireMol/molecule.h"

#include "SireMol/moleculegroup.h"

#include "SireMol/moleditor.h"

#include "SireMol/partialmolecule.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireSystem/system.h"

#include "SireUnits/convert.h"

#include "SireUnits/temperature.h"

#include "SireUnits/units.h"

#include "ensemble.h"

#include "velocityverlet.h"

#include "velocityverlet.h"

SireMove::VelocityVerletBerendsen __copy__(const SireMove::VelocityVerletBerendsen &other){ return SireMove::VelocityVerletBerendsen(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

void register_VelocityVerletBerendsen_class(){

    { //::SireMove::VelocityVerletBerendsen
        typedef bp::class_< SireMove::VelocityVerletBerendsen, bp::bases< SireMove::Integrator, SireBase::Property > > VelocityVerletBerendsen_exposer_t;
        VelocityVerletBerendsen_exposer_t VelocityVerletBerendsen_exposer = VelocityVerletBerendsen_exposer_t( "VelocityVerletBerendsen", bp::init< bp::optional< bool > >(( bp::arg("frequent_save_velocities")=(bool)(false) )) );
        bp::scope VelocityVerletBerendsen_scope( VelocityVerletBerendsen_exposer );
        VelocityVerletBerendsen_exposer.def( bp::init< SireMove::VelocityVerletBerendsen const & >(( bp::arg("other") )) );
        { //::SireMove::VelocityVerletBerendsen::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::VelocityVerletBerendsen::*createWorkspace_function_type )( ::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::VelocityVerletBerendsen::createWorkspace );
            
            VelocityVerletBerendsen_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMove::VelocityVerletBerendsen::createWorkspace
        
            typedef ::SireMove::IntegratorWorkspacePtr ( ::SireMove::VelocityVerletBerendsen::*createWorkspace_function_type )( ::SireMol::MoleculeGroup const &,::SireBase::PropertyMap const & ) const;
            createWorkspace_function_type createWorkspace_function_value( &::SireMove::VelocityVerletBerendsen::createWorkspace );
            
            VelocityVerletBerendsen_exposer.def( 
                "createWorkspace"
                , createWorkspace_function_value
                , ( bp::arg("molgroup"), bp::arg("map")=SireBase::PropertyMap() ) );
        
        }
        { //::SireMove::VelocityVerletBerendsen::ensemble
        
            typedef ::SireMove::Ensemble ( ::SireMove::VelocityVerletBerendsen::*ensemble_function_type )(  ) const;
            ensemble_function_type ensemble_function_value( &::SireMove::VelocityVerletBerendsen::ensemble );
            
            VelocityVerletBerendsen_exposer.def( 
                "ensemble"
                , ensemble_function_value );
        
        }
        { //::SireMove::VelocityVerletBerendsen::integrate
        
            typedef void ( ::SireMove::VelocityVerletBerendsen::*integrate_function_type )( ::SireMove::IntegratorWorkspace &,::SireCAS::Symbol const &,::SireUnits::Dimension::Time,int,bool ) ;
            integrate_function_type integrate_function_value( &::SireMove::VelocityVerletBerendsen::integrate );
            
            VelocityVerletBerendsen_exposer.def( 
                "integrate"
                , integrate_function_value
                , ( bp::arg("workspace"), bp::arg("nrg_component"), bp::arg("timestep"), bp::arg("nmoves"), bp::arg("record_stats") ) );
        
        }
        { //::SireMove::VelocityVerletBerendsen::isTimeReversible
        
            typedef bool ( ::SireMove::VelocityVerletBerendsen::*isTimeReversible_function_type )(  ) const;
            isTimeReversible_function_type isTimeReversible_function_value( &::SireMove::VelocityVerletBerendsen::isTimeReversible );
            
            VelocityVerletBerendsen_exposer.def( 
                "isTimeReversible"
                , isTimeReversible_function_value );
        
        }
        VelocityVerletBerendsen_exposer.def( bp::self != bp::self );
        { //::SireMove::VelocityVerletBerendsen::operator=
        
            typedef ::SireMove::VelocityVerletBerendsen & ( ::SireMove::VelocityVerletBerendsen::*assign_function_type )( ::SireMove::VelocityVerletBerendsen const & ) ;
            assign_function_type assign_function_value( &::SireMove::VelocityVerletBerendsen::operator= );
            
            VelocityVerletBerendsen_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        VelocityVerletBerendsen_exposer.def( bp::self == bp::self );
        { //::SireMove::VelocityVerletBerendsen::setTemperature
        
            typedef void ( ::SireMove::VelocityVerletBerendsen::*setTemperature_function_type )( ::SireUnits::Dimension::Temperature ) ;
            setTemperature_function_type setTemperature_function_value( &::SireMove::VelocityVerletBerendsen::setTemperature );
            
            VelocityVerletBerendsen_exposer.def( 
                "setTemperature"
                , setTemperature_function_value
                , ( bp::arg("temp") ) );
        
        }
        { //::SireMove::VelocityVerletBerendsen::setTemperatureCoupling
        
            typedef void ( ::SireMove::VelocityVerletBerendsen::*setTemperatureCoupling_function_type )( ::SireUnits::Dimension::Time ) ;
            setTemperatureCoupling_function_type setTemperatureCoupling_function_value( &::SireMove::VelocityVerletBerendsen::setTemperatureCoupling );
            
            VelocityVerletBerendsen_exposer.def( 
                "setTemperatureCoupling"
                , setTemperatureCoupling_function_value
                , ( bp::arg("tau") ) );
        
        }
        { //::SireMove::VelocityVerletBerendsen::toString
        
            typedef ::QString ( ::SireMove::VelocityVerletBerendsen::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::SireMove::VelocityVerletBerendsen::toString );
            
            VelocityVerletBerendsen_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::SireMove::VelocityVerletBerendsen::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMove::VelocityVerletBerendsen::typeName );
            
            VelocityVerletBerendsen_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        VelocityVerletBerendsen_exposer.staticmethod( "typeName" );
        VelocityVerletBerendsen_exposer.def( "__copy__", &__copy__);
        VelocityVerletBerendsen_exposer.def( "__deepcopy__", &__copy__);
        VelocityVerletBerendsen_exposer.def( "clone", &__copy__);
        VelocityVerletBerendsen_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMove::VelocityVerletBerendsen >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VelocityVerletBerendsen_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMove::VelocityVerletBerendsen >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        VelocityVerletBerendsen_exposer.def( "__str__", &__str__< ::SireMove::VelocityVerletBerendsen > );
        VelocityVerletBerendsen_exposer.def( "__repr__", &__str__< ::SireMove::VelocityVerletBerendsen > );
    }

}

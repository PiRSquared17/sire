// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include <QString>
#include <QByteArray>
#include <QFile>
#include <QFileInfo>
#include <QDir>
#include <QTextStream>
#include <QDateTime>
#include <QLocale>
#include <QUuid>
#include <qnamespace.h>
#include <QVariant>
#include <QUrl>
#include <QBitArray>
#include "QVariant.pypp.hpp"

namespace bp = boost::python;

QVariant __copy__(const QVariant &other){ return QVariant(other); }

#include "Qt/qdatastream.hpp"

void register_QVariant_class(){

    { //::QVariant
        typedef bp::class_< QVariant > QVariant_exposer_t;
        QVariant_exposer_t QVariant_exposer = QVariant_exposer_t( "QVariant" );
        bp::scope QVariant_scope( QVariant_exposer );
        bp::enum_< QVariant::Type>("Type")
            .value("Invalid", QVariant::Invalid)
            .value("Bool", QVariant::Bool)
            .value("Int", QVariant::Int)
            .value("UInt", QVariant::UInt)
            .value("LongLong", QVariant::LongLong)
            .value("ULongLong", QVariant::ULongLong)
            .value("Double", QVariant::Double)
            .value("Char", QVariant::Char)
            .value("Map", QVariant::Map)
            .value("List", QVariant::List)
            .value("String", QVariant::String)
            .value("StringList", QVariant::StringList)
            .value("ByteArray", QVariant::ByteArray)
            .value("BitArray", QVariant::BitArray)
            .value("Date", QVariant::Date)
            .value("Time", QVariant::Time)
            .value("DateTime", QVariant::DateTime)
            .value("Url", QVariant::Url)
            .value("Locale", QVariant::Locale)
            .value("Rect", QVariant::Rect)
            .value("RectF", QVariant::RectF)
            .value("Size", QVariant::Size)
            .value("SizeF", QVariant::SizeF)
            .value("Line", QVariant::Line)
            .value("LineF", QVariant::LineF)
            .value("Point", QVariant::Point)
            .value("PointF", QVariant::PointF)
            .value("RegExp", QVariant::RegExp)
            .value("LastCoreType", QVariant::LastCoreType)
            .value("Font", QVariant::Font)
            .value("Pixmap", QVariant::Pixmap)
            .value("Brush", QVariant::Brush)
            .value("Color", QVariant::Color)
            .value("Palette", QVariant::Palette)
            .value("Icon", QVariant::Icon)
            .value("Image", QVariant::Image)
            .value("Polygon", QVariant::Polygon)
            .value("Region", QVariant::Region)
            .value("Bitmap", QVariant::Bitmap)
            .value("Cursor", QVariant::Cursor)
            .value("SizePolicy", QVariant::SizePolicy)
            .value("KeySequence", QVariant::KeySequence)
            .value("Pen", QVariant::Pen)
            .value("TextLength", QVariant::TextLength)
            .value("TextFormat", QVariant::TextFormat)
            .value("Matrix", QVariant::Matrix)
            .value("LastGuiType", QVariant::LastGuiType)
            .value("UserType", QVariant::UserType)
            .value("LastType", QVariant::LastType)
            .export_values()
            ;
        QVariant_exposer.def( bp::init< >() );
        QVariant_exposer.def( bp::init< QVariant::Type >(( bp::arg("type") )) );
        QVariant_exposer.def( bp::init< QVariant const & >(( bp::arg("other") )) );
        QVariant_exposer.def( bp::init< QDataStream & >(( bp::arg("s") )) );
        QVariant_exposer.def( bp::init< int >(( bp::arg("i") )) );
        QVariant_exposer.def( bp::init< uint >(( bp::arg("ui") )) );
        QVariant_exposer.def( bp::init< bool >(( bp::arg("b") )) );
        QVariant_exposer.def( bp::init< double >(( bp::arg("d") )) );
        QVariant_exposer.def( bp::init< QByteArray const & >(( bp::arg("bytearray") )) );
        QVariant_exposer.def( bp::init< QBitArray const & >(( bp::arg("bitarray") )) );
        QVariant_exposer.def( bp::init< QString const & >(( bp::arg("string") )) );
        QVariant_exposer.def( bp::init< QStringList const & >(( bp::arg("stringlist") )) );
        QVariant_exposer.def( bp::init< QChar const & >(( bp::arg("qchar") )) );
        QVariant_exposer.def( bp::init< QDate const & >(( bp::arg("date") )) );
        QVariant_exposer.def( bp::init< QTime const & >(( bp::arg("time") )) );
        QVariant_exposer.def( bp::init< QDateTime const & >(( bp::arg("datetime") )) );
        QVariant_exposer.def( bp::init< QList< QVariant > const & >(( bp::arg("list") )) );
        QVariant_exposer.def( bp::init< QMap< QString, QVariant > const & >(( bp::arg("map") )) );
        QVariant_exposer.def( bp::init< QUrl const & >(( bp::arg("url") )) );
        QVariant_exposer.def( bp::init< QLocale const & >(( bp::arg("locale") )) );
        QVariant_exposer.def( bp::init< QRegExp const & >(( bp::arg("regExp") )) );
        { //::QVariant::canConvert
        
            typedef bool ( ::QVariant::*canConvert_function_type )( ::QVariant::Type ) const;
            canConvert_function_type canConvert_function_value( &::QVariant::canConvert );
            
            QVariant_exposer.def( 
                "canConvert"
                , canConvert_function_value
                , ( bp::arg("t") ) );
        
        }
        { //::QVariant::clear
        
            typedef void ( ::QVariant::*clear_function_type )(  ) ;
            clear_function_type clear_function_value( &::QVariant::clear );
            
            QVariant_exposer.def( 
                "clear"
                , clear_function_value );
        
        }
        { //::QVariant::convert
        
            typedef bool ( ::QVariant::*convert_function_type )( ::QVariant::Type ) ;
            convert_function_type convert_function_value( &::QVariant::convert );
            
            QVariant_exposer.def( 
                "convert"
                , convert_function_value
                , ( bp::arg("t") ) );
        
        }
        { //::QVariant::detach
        
            typedef void ( ::QVariant::*detach_function_type )(  ) ;
            detach_function_type detach_function_value( &::QVariant::detach );
            
            QVariant_exposer.def( 
                "detach"
                , detach_function_value );
        
        }
        { //::QVariant::isDetached
        
            typedef bool ( ::QVariant::*isDetached_function_type )(  ) const;
            isDetached_function_type isDetached_function_value( &::QVariant::isDetached );
            
            QVariant_exposer.def( 
                "isDetached"
                , isDetached_function_value );
        
        }
        { //::QVariant::isNull
        
            typedef bool ( ::QVariant::*isNull_function_type )(  ) const;
            isNull_function_type isNull_function_value( &::QVariant::isNull );
            
            QVariant_exposer.def( 
                "isNull"
                , isNull_function_value );
        
        }
        { //::QVariant::isValid
        
            typedef bool ( ::QVariant::*isValid_function_type )(  ) const;
            isValid_function_type isValid_function_value( &::QVariant::isValid );
            
            QVariant_exposer.def( 
                "isValid"
                , isValid_function_value );
        
        }
        { //::QVariant::load
        
            typedef void ( ::QVariant::*load_function_type )( ::QDataStream & ) ;
            load_function_type load_function_value( &::QVariant::load );
            
            QVariant_exposer.def( 
                "load"
                , load_function_value
                , ( bp::arg("ds") ) );
        
        }
        { //::QVariant::nameToType
        
            typedef ::QVariant::Type ( *nameToType_function_type )( char const * );
            nameToType_function_type nameToType_function_value( &::QVariant::nameToType );
            
            QVariant_exposer.def( 
                "nameToType"
                , nameToType_function_value
                , ( bp::arg("name") ) );
        
        }
        { //::QVariant::operator=
        
            typedef ::QVariant & ( ::QVariant::*assign_function_type )( ::QVariant const & ) ;
            assign_function_type assign_function_value( &::QVariant::operator= );
            
            QVariant_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        { //::QVariant::save
        
            typedef void ( ::QVariant::*save_function_type )( ::QDataStream & ) const;
            save_function_type save_function_value( &::QVariant::save );
            
            QVariant_exposer.def( 
                "save"
                , save_function_value
                , ( bp::arg("ds") ) );
        
        }
        { //::QVariant::toBitArray
        
            typedef ::QBitArray ( ::QVariant::*toBitArray_function_type )(  ) const;
            toBitArray_function_type toBitArray_function_value( &::QVariant::toBitArray );
            
            QVariant_exposer.def( 
                "toBitArray"
                , toBitArray_function_value );
        
        }
        { //::QVariant::toBool
        
            typedef bool ( ::QVariant::*toBool_function_type )(  ) const;
            toBool_function_type toBool_function_value( &::QVariant::toBool );
            
            QVariant_exposer.def( 
                "toBool"
                , toBool_function_value );
        
        }
        { //::QVariant::toByteArray
        
            typedef ::QByteArray ( ::QVariant::*toByteArray_function_type )(  ) const;
            toByteArray_function_type toByteArray_function_value( &::QVariant::toByteArray );
            
            QVariant_exposer.def( 
                "toByteArray"
                , toByteArray_function_value );
        
        }
        { //::QVariant::toChar
        
            typedef ::QChar ( ::QVariant::*toChar_function_type )(  ) const;
            toChar_function_type toChar_function_value( &::QVariant::toChar );
            
            QVariant_exposer.def( 
                "toChar"
                , toChar_function_value );
        
        }
        { //::QVariant::toDate
        
            typedef ::QDate ( ::QVariant::*toDate_function_type )(  ) const;
            toDate_function_type toDate_function_value( &::QVariant::toDate );
            
            QVariant_exposer.def( 
                "toDate"
                , toDate_function_value );
        
        }
        { //::QVariant::toDateTime
        
            typedef ::QDateTime ( ::QVariant::*toDateTime_function_type )(  ) const;
            toDateTime_function_type toDateTime_function_value( &::QVariant::toDateTime );
            
            QVariant_exposer.def( 
                "toDateTime"
                , toDateTime_function_value );
        
        }
        { //::QVariant::toDouble
        
            typedef double ( ::QVariant::*toDouble_function_type )( bool * ) const;
            toDouble_function_type toDouble_function_value( &::QVariant::toDouble );
            
            QVariant_exposer.def( 
                "toDouble"
                , toDouble_function_value
                , ( bp::arg("ok")=bp::object() ) );
        
        }
        { //::QVariant::toInt
        
            typedef int ( ::QVariant::*toInt_function_type )( bool * ) const;
            toInt_function_type toInt_function_value( &::QVariant::toInt );
            
            QVariant_exposer.def( 
                "toInt"
                , toInt_function_value
                , ( bp::arg("ok")=bp::object() ) );
        
        }
        { //::QVariant::toList
        
            typedef ::QList< QVariant > ( ::QVariant::*toList_function_type )(  ) const;
            toList_function_type toList_function_value( &::QVariant::toList );
            
            QVariant_exposer.def( 
                "toList"
                , toList_function_value );
        
        }
        { //::QVariant::toLocale
        
            typedef ::QLocale ( ::QVariant::*toLocale_function_type )(  ) const;
            toLocale_function_type toLocale_function_value( &::QVariant::toLocale );
            
            QVariant_exposer.def( 
                "toLocale"
                , toLocale_function_value );
        
        }
        { //::QVariant::toMap
        
            typedef ::QMap< QString, QVariant > ( ::QVariant::*toMap_function_type )(  ) const;
            toMap_function_type toMap_function_value( &::QVariant::toMap );
            
            QVariant_exposer.def( 
                "toMap"
                , toMap_function_value );
        
        }
        { //::QVariant::toRegExp
        
            typedef ::QRegExp ( ::QVariant::*toRegExp_function_type )(  ) const;
            toRegExp_function_type toRegExp_function_value( &::QVariant::toRegExp );
            
            QVariant_exposer.def( 
                "toRegExp"
                , toRegExp_function_value );
        
        }
        { //::QVariant::toString
        
            typedef ::QString ( ::QVariant::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::QVariant::toString );
            
            QVariant_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::QVariant::toStringList
        
            typedef ::QStringList ( ::QVariant::*toStringList_function_type )(  ) const;
            toStringList_function_type toStringList_function_value( &::QVariant::toStringList );
            
            QVariant_exposer.def( 
                "toStringList"
                , toStringList_function_value );
        
        }
        { //::QVariant::toTime
        
            typedef ::QTime ( ::QVariant::*toTime_function_type )(  ) const;
            toTime_function_type toTime_function_value( &::QVariant::toTime );
            
            QVariant_exposer.def( 
                "toTime"
                , toTime_function_value );
        
        }
        { //::QVariant::toUInt
        
            typedef ::uint ( ::QVariant::*toUInt_function_type )( bool * ) const;
            toUInt_function_type toUInt_function_value( &::QVariant::toUInt );
            
            QVariant_exposer.def( 
                "toUInt"
                , toUInt_function_value
                , ( bp::arg("ok")=bp::object() ) );
        
        }
        { //::QVariant::toUrl
        
            typedef ::QUrl ( ::QVariant::*toUrl_function_type )(  ) const;
            toUrl_function_type toUrl_function_value( &::QVariant::toUrl );
            
            QVariant_exposer.def( 
                "toUrl"
                , toUrl_function_value );
        
        }
        { //::QVariant::type
        
            typedef ::QVariant::Type ( ::QVariant::*type_function_type )(  ) const;
            type_function_type type_function_value( &::QVariant::type );
            
            QVariant_exposer.def( 
                "type"
                , type_function_value );
        
        }
        { //::QVariant::typeName
        
            typedef char const * ( ::QVariant::*typeName_function_type )(  ) const;
            typeName_function_type typeName_function_value( &::QVariant::typeName );
            
            QVariant_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::QVariant::typeToName
        
            typedef char const * ( *typeToName_function_type )( ::QVariant::Type );
            typeToName_function_type typeToName_function_value( &::QVariant::typeToName );
            
            QVariant_exposer.def( 
                "typeToName"
                , typeToName_function_value
                , ( bp::arg("type") ) );
        
        }
        { //::QVariant::userType
        
            typedef int ( ::QVariant::*userType_function_type )(  ) const;
            userType_function_type userType_function_value( &::QVariant::userType );
            
            QVariant_exposer.def( 
                "userType"
                , userType_function_value );
        
        }
        QVariant_exposer.staticmethod( "nameToType" );
        QVariant_exposer.staticmethod( "typeToName" );
        QVariant_exposer.def( "__copy__", &__copy__);
        QVariant_exposer.def( "__deepcopy__", &__copy__);
        QVariant_exposer.def( "clone", &__copy__);
        QVariant_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::QVariant >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        QVariant_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::QVariant >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
    }

}

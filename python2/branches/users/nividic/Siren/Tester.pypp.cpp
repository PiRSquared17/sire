// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "Tester.pypp.hpp"

namespace bp = boost::python;

#include "Siren/errors.h"

#include "objref.h"

#include "stream.h"

#include "tester.h"

#include <cmath>

#include "tester.h"

Siren::Tester __copy__(const Siren::Tester &other){ return Siren::Tester(other); }

#include "Helpers/str.hpp"

void register_Tester_class(){

    { //::Siren::Tester
        typedef bp::class_< Siren::Tester, bp::bases< Siren::Mutable, Siren::Object > > Tester_exposer_t;
        Tester_exposer_t Tester_exposer = Tester_exposer_t( "Tester" );
        bp::scope Tester_scope( Tester_exposer );
        Tester_exposer.def( bp::init< >() );
        Tester_exposer.def( bp::init< Siren::Object const & >(( bp::arg("object") )) );
        Tester_exposer.def( bp::init< Siren::Object const &, Siren::Logger & >(( bp::arg("object"), bp::arg("logger") )) );
        Tester_exposer.def( bp::init< Siren::Handle const & >(( bp::arg("handle") )) );
        Tester_exposer.def( bp::init< Siren::Handle const &, Siren::Logger & >(( bp::arg("handle"), bp::arg("logger") )) );
        Tester_exposer.def( bp::init< QString const & >(( bp::arg("type_name") )) );
        Tester_exposer.def( bp::init< QString const &, Siren::Logger & >(( bp::arg("type_name"), bp::arg("logger") )) );
        Tester_exposer.def( bp::init< Siren::Tester const & >(( bp::arg("other") )) );
        { //::Siren::Tester::allPassed
        
            typedef bool ( ::Siren::Tester::*allPassed_function_type )(  ) const;
            allPassed_function_type allPassed_function_value( &::Siren::Tester::allPassed );
            
            Tester_exposer.def( 
                "allPassed"
                , allPassed_function_value );
        
        }
        { //::Siren::Tester::expect_false
        
            typedef void ( ::Siren::Tester::*expect_false_function_type )( ::QString const &,::QString const &,bool ) ;
            expect_false_function_type expect_false_function_value( &::Siren::Tester::expect_false );
            
            Tester_exposer.def( 
                "expect_false"
                , expect_false_function_value
                , ( bp::arg("description"), bp::arg("location"), bp::arg("flag") ) );
        
        }
        { //::Siren::Tester::expect_roughly_equal
        
            typedef void ( ::Siren::Tester::*expect_roughly_equal_function_type )( ::QString const &,::QString const &,double,double ) ;
            expect_roughly_equal_function_type expect_roughly_equal_function_value( &::Siren::Tester::expect_roughly_equal );
            
            Tester_exposer.def( 
                "expect_roughly_equal"
                , expect_roughly_equal_function_value
                , ( bp::arg("description"), bp::arg("location"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::Siren::Tester::expect_true
        
            typedef void ( ::Siren::Tester::*expect_true_function_type )( ::QString const &,::QString const &,bool ) ;
            expect_true_function_type expect_true_function_value( &::Siren::Tester::expect_true );
            
            Tester_exposer.def( 
                "expect_true"
                , expect_true_function_value
                , ( bp::arg("description"), bp::arg("location"), bp::arg("flag") ) );
        
        }
        { //::Siren::Tester::hashCode
        
            typedef ::uint ( ::Siren::Tester::*hashCode_function_type )(  ) const;
            hashCode_function_type hashCode_function_value( &::Siren::Tester::hashCode );
            
            Tester_exposer.def( 
                "hashCode"
                , hashCode_function_value );
        
        }
        { //::Siren::Tester::nextTest
        
            typedef void ( ::Siren::Tester::*nextTest_function_type )(  ) ;
            nextTest_function_type nextTest_function_value( &::Siren::Tester::nextTest );
            
            Tester_exposer.def( 
                "nextTest"
                , nextTest_function_value );
        
        }
        { //::Siren::Tester::nextTest
        
            typedef void ( ::Siren::Tester::*nextTest_function_type )( ::QString const & ) ;
            nextTest_function_type nextTest_function_value( &::Siren::Tester::nextTest );
            
            Tester_exposer.def( 
                "nextTest"
                , nextTest_function_value
                , ( bp::arg("description") ) );
        
        }
        Tester_exposer.def( bp::self != bp::self );
        { //::Siren::Tester::operator=
        
            typedef ::Siren::Tester & ( ::Siren::Tester::*assign_function_type )( ::Siren::Tester const & ) ;
            assign_function_type assign_function_value( &::Siren::Tester::operator= );
            
            Tester_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >() );
        
        }
        Tester_exposer.def( bp::self == bp::self );
        { //::Siren::Tester::stream
        
            typedef void ( ::Siren::Tester::*stream_function_type )( ::Siren::Stream & ) ;
            stream_function_type stream_function_value( &::Siren::Tester::stream );
            
            Tester_exposer.def( 
                "stream"
                , stream_function_value
                , ( bp::arg("s") ) );
        
        }
        { //::Siren::Tester::test
        
            typedef bool ( ::Siren::Tester::*test_function_type )( ::Siren::Logger & ) const;
            test_function_type test_function_value( &::Siren::Tester::test );
            
            Tester_exposer.def( 
                "test"
                , test_function_value
                , ( bp::arg("logger") ) );
        
        }
        { //::Siren::Tester::toString
        
            typedef ::QString ( ::Siren::Tester::*toString_function_type )(  ) const;
            toString_function_type toString_function_value( &::Siren::Tester::toString );
            
            Tester_exposer.def( 
                "toString"
                , toString_function_value );
        
        }
        { //::Siren::Tester::typeName
        
            typedef ::QString ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::Siren::Tester::typeName );
            
            Tester_exposer.def( 
                "typeName"
                , typeName_function_value );
        
        }
        { //::Siren::Tester::unexpected_error
        
            typedef void ( ::Siren::Tester::*unexpected_error_function_type )( ::Siren::exception const & ) ;
            unexpected_error_function_type unexpected_error_function_value( &::Siren::Tester::unexpected_error );
            
            Tester_exposer.def( 
                "unexpected_error"
                , unexpected_error_function_value
                , ( bp::arg("e") ) );
        
        }
        Tester_exposer.staticmethod( "typeName" );
        Tester_exposer.def( "__copy__", &__copy__);
        Tester_exposer.def( "__deepcopy__", &__copy__);
        Tester_exposer.def( "clone", &__copy__);
        Tester_exposer.def( "__str__", &__str__< ::Siren::Tester > );
        Tester_exposer.def( "__repr__", &__str__< ::Siren::Tester > );
    }

}

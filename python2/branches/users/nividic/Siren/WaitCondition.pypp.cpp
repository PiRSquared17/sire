// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 2 License

#include "boost/python.hpp"
#include "WaitCondition.pypp.hpp"

namespace bp = boost::python;

#include "forages.h"

#include "mutex.h"

#include "waitcondition.h"

#include "waitcondition.h"

const char* pvt_get_name(const Siren::WaitCondition&){ return "Siren::WaitCondition";}

void register_WaitCondition_class(){

    { //::Siren::WaitCondition
        typedef bp::class_< Siren::WaitCondition, boost::noncopyable > WaitCondition_exposer_t;
        WaitCondition_exposer_t WaitCondition_exposer = WaitCondition_exposer_t( "WaitCondition" );
        bp::scope WaitCondition_scope( WaitCondition_exposer );
        { //::Siren::WaitCondition::wait
        
            typedef bool ( ::Siren::WaitCondition::*wait_function_type )( ::Siren::Mutex *,long unsigned int ) ;
            wait_function_type wait_function_value( &::Siren::WaitCondition::wait );
            
            WaitCondition_exposer.def( 
                "wait"
                , wait_function_value
                , ( bp::arg("mutex"), bp::arg("time")=(long unsigned int)(-1ul) ) );
        
        }
        { //::Siren::WaitCondition::wait
        
            typedef bool ( ::Siren::WaitCondition::*wait_function_type )( ::QMutex *,long unsigned int ) ;
            wait_function_type wait_function_value( &::Siren::WaitCondition::wait );
            
            WaitCondition_exposer.def( 
                "wait"
                , wait_function_value
                , ( bp::arg("mutex"), bp::arg("time")=(long unsigned int)(-1ul) ) );
        
        }
        { //::Siren::WaitCondition::wakeAll
        
            typedef void ( ::Siren::WaitCondition::*wakeAll_function_type )(  ) ;
            wakeAll_function_type wakeAll_function_value( &::Siren::WaitCondition::wakeAll );
            
            WaitCondition_exposer.def( 
                "wakeAll"
                , wakeAll_function_value );
        
        }
        { //::Siren::WaitCondition::wakeOne
        
            typedef void ( ::Siren::WaitCondition::*wakeOne_function_type )(  ) ;
            wakeOne_function_type wakeOne_function_value( &::Siren::WaitCondition::wakeOne );
            
            WaitCondition_exposer.def( 
                "wakeOne"
                , wakeOne_function_value );
        
        }
        WaitCondition_exposer.def( "__str__", &pvt_get_name);
        WaitCondition_exposer.def( "__repr__", &pvt_get_name);
    }

}
